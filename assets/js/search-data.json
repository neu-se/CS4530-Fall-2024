{"0": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "Activity 1: User Stories and Conditions of Satisfaction",
    "content": "Introduction . This activity will give you practice with using user stories to solicit and document user requirements, refining them into conditions of satisfaction, and assigning priorities. Before you start, be sure to review the tutorial User Stories and Conditions of Satisfaction on the course website. Scenario . Consider a Learning Management System (like Canvas). Choose one of the following areas: . | Sections and Enrollment | Assignment Submission and Grading | Gradebooks | . Requirements for this activity . | Identify at least 3 different roles representing different classes of users for that area. | Choose one of those roles and write down at least 3 different user stories for that participant. These should be of the form . As a &lt;role&gt; I want &lt;some capability&gt; so that I can &lt;get some benefit&gt; . | For each user story, write 3 conditions of satisfaction with appropriate priorities. (Essential = user story is not satisfied without it) . | . Please submit a total of: . | 1 area | 3 roles | 3 user stories | 9 conditions of satisfaction with priorities | . When you are done, submit your work as required by your instructor (check the Canvas asssignment for details, if assigned). This may vary from section to section. ",
    "url": "/CS4530-Fall-2024/Activities/Module01%20Activity/#activity-1-user-stories-and-conditions-of-satisfaction",
    
    "relUrl": "/Activities/Module01%20Activity/#activity-1-user-stories-and-conditions-of-satisfaction"
  },"1": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Conditions of Satisfaction",
    "content": " ",
    "url": "/CS4530-Fall-2024/Activities/Module01%20Activity/",
    
    "relUrl": "/Activities/Module01%20Activity/"
  },"2": {
    "doc": "Test-Driven Development",
    "title": "Test-Driven Development",
    "content": "This activity is intended to supplement the CS4530 lecture on test-driven development. Steps . | Download and unpack the starter Code | Write down the testable behaviors for the satisfaction condition: “Add a new grade for an existing student” | Identify at least two exceptional conditions or design decisions associated with these testable behaviors | Write Jest tests for your testable behaviors | Implement a method addGrade that passes your tests. | . When you are done, submit your work as required by your instructor (check the Canvas asssignment for details, if assigned). This may vary from section to section. ",
    "url": "/CS4530-Fall-2024/Activities/Module02%20Activity/",
    
    "relUrl": "/Activities/Module02%20Activity/"
  },"3": {
    "doc": "Test Adequacy",
    "title": "Test Adequacy Activity",
    "content": "We will gain experience improving test suites using two adequacy criteria: line coverage and mutation coverage. The instructions reference line numbers in transcriptManager.ts. Do not change that file while you are following along, or else you may find that the line referenced do not match what you see. As usual, download the starter code and run npm install. Then, follow the instructions given in the README.md file. Be sure to review the canvas assignment for related details (if assigned). ",
    "url": "/CS4530-Fall-2024/Activities/Module03%20Activity/#test-adequacy-activity",
    
    "relUrl": "/Activities/Module03%20Activity/#test-adequacy-activity"
  },"4": {
    "doc": "Test Adequacy",
    "title": "Test Adequacy",
    "content": " ",
    "url": "/CS4530-Fall-2024/Activities/Module03%20Activity/",
    
    "relUrl": "/Activities/Module03%20Activity/"
  },"5": {
    "doc": "Code-Level Design",
    "title": "Readable Code Activity",
    "content": "In this activity, you will do a simple example to help you exercise the five code-level design principles . As usual, download the starter code and run npm install. Then, follow the instructions given in the README.md file. Be sure to review Canvas assignment for more details (if assigned). ",
    "url": "/CS4530-Fall-2024/Activities/Module04%20Activity/#readable-code-activity",
    
    "relUrl": "/Activities/Module04%20Activity/#readable-code-activity"
  },"6": {
    "doc": "Code-Level Design",
    "title": "Code-Level Design",
    "content": " ",
    "url": "/CS4530-Fall-2024/Activities/Module04%20Activity/",
    
    "relUrl": "/Activities/Module04%20Activity/"
  },"7": {
    "doc": "Weather Station Observer Pattern Activity Handout",
    "title": "Instructions to install Node-Version",
    "content": ". | nvm install 18.18 or higher | nvm use 18.18 or higher | . ",
    "url": "/CS4530-Fall-2024/Activities/Module05%20Activity/#instructions-to-install-node-version",
    
    "relUrl": "/Activities/Module05%20Activity/#instructions-to-install-node-version"
  },"8": {
    "doc": "Weather Station Observer Pattern Activity Handout",
    "title": "Instructions",
    "content": "To run it on your computer, run npm install to fetch the dependencies for the project, and then run npm run demo, which should produce the output like the following: . Current conditions: 80F degrees and 65% humidity Avg/max/min temperature = 80/80/0 Heat Index: 82.95535063710001 Forecast: Improving weather on the way! Current conditions: 82F degrees and 70% humidity Avg/max/min temperature = 81/82/0 Heat Index: 86.90123306385205 Forecast: Watch out for cooler, rainy weather Current conditions: 78F degrees and 90% humidity Avg/max/min temperature = 80/82/0 Heat Index: 83.64967139559604 Forecast: More of the same . There is a lot to be improved from this design. Modify this code so that it uses the observer pattern, with each of the various display classes as the observers, and the WeatherData as the subject object. A high-level sketch of this design is: . | Create a WeatherDataObserver interface, which defines your update method | In WeatherData, create an observers array in WeatherData along with methods to register and de-register observers. Add code to notify the observers of updates when the weather data updates. | Modify each of CurrentConditionsDisplay, ForecastDisplay, HeatIndexDisplay and StatisticsDisplay to be implementors of the new observer interface. These display classes should display their information whenever the weather data is updated. | Modify WeatherStation, so that it creates the XXXDisplays, and subscribes them to the WeatherData | Update WeatherData.measurementsChanged to notify its observers of the update | Compare the output of your new program to the output you got by running the original version. Are the lines printed in the same order? Why or why not? | Can you modify the code so that the various XXXDisplay classes are all implementations of the same interface? Why might or might not this be a good idea? | . When you are done, run npm run zip to create a zip archive with your code. Check canvas assignment for more details (if assigned) . This activity is based on the running example in Chapter 2 of “Head First Design Patterns, 2nd Edition” by Robson and Freeman. ",
    "url": "/CS4530-Fall-2024/Activities/Module05%20Activity/#instructions",
    
    "relUrl": "/Activities/Module05%20Activity/#instructions"
  },"9": {
    "doc": "Weather Station Observer Pattern Activity Handout",
    "title": "Weather Station Observer Pattern Activity Handout",
    "content": "This project will give you practice in coding using the observer design pattern. Start by downloading the starter code. ",
    "url": "/CS4530-Fall-2024/Activities/Module05%20Activity/",
    
    "relUrl": "/Activities/Module05%20Activity/"
  },"10": {
    "doc": "Async Activity",
    "title": "Simple Activity using async/await",
    "content": "Learning Objectives for this activity: . | Practice applying asynchronous programming concepts: promises, async/await | Experiment with applying different ordering constraints in asynchronous code | . ",
    "url": "/CS4530-Fall-2024/Activities/Module06%20Activity/#simple-activity-using-asyncawait",
    
    "relUrl": "/Activities/Module06%20Activity/#simple-activity-using-asyncawait"
  },"11": {
    "doc": "Async Activity",
    "title": "Overview",
    "content": "In this activity, you will experiment with asynchronous programming constructs in TypeScript. Getting started . Download the starter Code Run npm install to download the dependencies for this project, and then open it in Visual Studio Code. Run npm run client to run the client as-is, the output should be something like: . Creating a student Import grades completed, and returned: [ { \"student\": { \"studentID\": 17, \"studentName\": \"test student\" }, \"grades\": [ { \"course\": \"demo course\", \"grade\": 100 } ] } ] . Stringing together many async calls: bulk importing grades . Your task is to write a new, async function, importGrades, which takes in input of the type ImportTranscript[]. importGrades should create a student record for each ImportTranscript, and then post the grades for each of those students. After posting the grades, it should fetch the transcripts for each student and return an array of transcripts. You should implement importGrades in the file examples.ts - note that there is already a function stub there. As you get started, examine the transcript server client in client.ts, and take note of the API calls that are available to you. Here is the type definition for ImportTranscript and its dependencies: . type ImportTranscript = { studentName: string; grades: CourseGrade[]; }; type CourseGrade = { course: Course, grade: number }; type Course = string; . Example input: . [ { studentName: \"Avery\", grades: [{course: \"Software Engineering\", grade: 100}, {course: \"Chemistry\", grade: 70}], }, { studentName: \"Ripley\", grades: [{course: \"Underwater Basket Weaving\", grade: 100}, {course: \"Kayaking\", grade: 90} ] } ] . Implement this three ways: . | Insert a student, insert each of their grades (in order), then insert the next student, then their grades, etc. until all students are inserted, then fetch transcripts | Insert a student, then insert each of their grades (in order), then fetch their transcript. Do this set of operations asynchronously (concurrently) for all students | Insert a student, then insert each of their grades asynchronously (concurrently). After all students have all of their grades submitted, fetch all fo the transcripts asynchronously (concurrently) | . ",
    "url": "/CS4530-Fall-2024/Activities/Module06%20Activity/#overview",
    
    "relUrl": "/Activities/Module06%20Activity/#overview"
  },"12": {
    "doc": "Async Activity",
    "title": "Async Activity",
    "content": " ",
    "url": "/CS4530-Fall-2024/Activities/Module06%20Activity/",
    
    "relUrl": "/Activities/Module06%20Activity/"
  },"13": {
    "doc": "React",
    "title": "React Activity - Todo Tracker",
    "content": "This activity is designed to give you practice with React. You will enhance the ToDo app that was discussed in lecture. Steps . To get started, download the starter Code. Run the command npm install, and then npm run dev. The development server should start, and If you open your browser it will start running the app in app/page.tsx If your browser does not open up in the todo app, modify app/page.tsx to point to ./Apps/ToDoApp . In the ToDoApp, make the following three enhancements: . | Currently the “priority” field will accept any value. Modify it so that the priority must be a number. (Hint: NumberInput is your friend) | Add a button that will sort the todo items by priority, lowest number first | Add an entry field that will take a number and delete all the todo items with priorities greater than that number. (We are assuming that priority 1 means the thing that has to be done first.) | . When you are done, submit your work as required by your instructor (see canvas assignment for any additional instructions, if assigned). This may vary from section to section. ",
    "url": "/CS4530-Fall-2024/Activities/Module08%20Activity/#react-activity---todo-tracker",
    
    "relUrl": "/Activities/Module08%20Activity/#react-activity---todo-tracker"
  },"14": {
    "doc": "React",
    "title": "React",
    "content": " ",
    "url": "/CS4530-Fall-2024/Activities/Module08%20Activity/",
    
    "relUrl": "/Activities/Module08%20Activity/"
  },"15": {
    "doc": "Working with REST / OpenAPI",
    "title": "REST Transcript Activity",
    "content": "In this activity, you will use TSOA to build a REST client for our transcript database. Requirement: node -version = 20 . As usual, download the starter code and run npm install. Then, run npm start to generate the OpenAPI specification, server boilerplate, and start the development server. This command will automatically reload the server as you change files in this project. To stop the server, press control-C in the terminal. Once you see the message “Listening on 8081”, you can access this URL in your browser: http://localhost:8081/docs/#/transcript . You should now see a “Swagger” transcript-server-openapi documentation page, with a few API endpoints defined. Expand the “GET /transcripts” endpoint, click “Try it out”, and then “Execute”. Now, the field “Response Body” should have text in it like: . [ { \"student\": { \"studentID\": 1, \"studentName\": \"avery\" }, \"grades\": [ { \"course\": \"DemoClass\", \"grade\": 100 }, { \"course\": \"DemoClass2\", \"grade\": 100 } ] }, . This demonstrates that this endpoint of your REST API is functional. In the rest of the activity, you will implement the remainder of the routes. Details are in the README page of the starter code. Be sure to review Canvas assignment for more details (if assigned) . ",
    "url": "/CS4530-Fall-2024/Activities/Module11%20REST%20Activity/#rest-transcript-activity",
    
    "relUrl": "/Activities/Module11%20REST%20Activity/#rest-transcript-activity"
  },"16": {
    "doc": "Working with REST / OpenAPI",
    "title": "Working with REST / OpenAPI",
    "content": " ",
    "url": "/CS4530-Fall-2024/Activities/Module11%20REST%20Activity/",
    
    "relUrl": "/Activities/Module11%20REST%20Activity/"
  },"17": {
    "doc": "Continuous Deployment Pipeline for FakeStackOverFlow",
    "title": "Continuous Deployment Pipeline for FakeStackOverFlow",
    "content": "In this activity, you will set up a continuous deployment pipeline using MongoDB Atlas and Render.com. The application will be deployed through Render.com, while the MongoDB database will be hosted in the cloud using MongoDB Atlas. Only one member of each team needs to complete these steps, as the resulting deployment will be shared with the entire team. However, if preferred, the team can work together to deploy the application. In this activity, we will focus on building a continuous deployment pipeline, but what about continuous integration? There are many ways to use continuous integration in your projects. For example, you can use GitHub Actions to automatically run tests after pushing a commit. FakeStackOverflow has a continuous integration setup for running tests, and you can find the workflow in .github/workflows/main.yml. ",
    "url": "/CS4530-Fall-2024/activities/continuous-deployment",
    
    "relUrl": "/activities/continuous-deployment"
  },"18": {
    "doc": "Continuous Deployment Pipeline for FakeStackOverFlow",
    "title": "Pre-Requisites",
    "content": "There are three pre-requisites for this activity. GitHub Repository . Your team’s deployment must take place within a private GitHub repository in our GitHub Classroom. To create your repository, each member of your team should follow these instructions: . | Sign in to GitHub.com, and then use our invitation to create a repository with the FakeStackOverflow codebase. Check to see if one of your groupmates has created a group already - if so, select it to join it. Otherwise, create a repo using the following format fall24-team-project-group-xyy where you should enter your group number (e.g. “Group-XYY”) as the name where X is your section number and YY is your group number. | Check your email for the invitation to join the repo. After that, refresh the page, and it will show a link to your new repository, for example: https://github.com/neu-cs4530/fall24-team-project-group-xyy. Click the link to navigate to your new repository. This is the repository you will use for the project. | . This repository will be private, and visible only to your team and the course staff. After the semester ends, you are welcome to make it public - you have complete administrative control of the repository. If you run into the error “refusing to allow an OAuth App to create or update workflow” when trying to push to GitHub, the fix is to update your saved authentication credentials for GitHub. For instance, you can follow these instructions to update your credentials in the MacOS Keychain. If all else fails, you can connect to GitHub with SSH instead of HTTPS, which will also solve this problem. This error seems to only occur when pushing a change to the GitHub Actions configuration file, so you could also side-step the problem by having a team mate push this change to GitHub instead (who may not run into this issue). MongoDB Account . MongoDB Atlas is a cloud-based service that provides fully managed MongoDB databases. It allows you to easily deploy, manage, and scale MongoDB clusters without needing to handle server infrastructure, security, backups, or updates, making database management simpler and more efficient. To use MongoDB Atlas, create a MongoDB account here. After you register you will be asked to verify your email. The steps on how to create a MongoDB database and configure are provided below. Render.com Account . Render.com is a cloud platform that simplifies deploying and hosting web applications, APIs, and databases. It automatically manages servers, scaling, and security, allowing developers to easily build, deploy, and run applications without worrying about infrastructure management. You can create a Render.com account here. Clicking on the “GitHub” button and sign up using the same GitHub account as the one used to create the GitHub project repository. After you register you will be asked to verify your email. You might be asked to authorize the Render app for the “neu-cs4530” organization - choose your repository using the “Only select repositories” option, DO NOT choose “All repositories”. ",
    "url": "/CS4530-Fall-2024/activities/continuous-deployment#pre-requisites",
    
    "relUrl": "/activities/continuous-deployment#pre-requisites"
  },"19": {
    "doc": "Continuous Deployment Pipeline for FakeStackOverFlow",
    "title": "Steps",
    "content": "You will first create the MongoDB database, and then setup the continuous deployment pipeline for the server and the client. Setup your MongoDB Database . | Navigate to your MongoDB Account Profile. | Click on the “Visit MongoDB Atlas” button. | Click on the “Create” button on the center of the screen. (If you don’t see a “Create” button, make sure you are in the “Overview” section on the left navigation and on the “Data Services” tab) | In the configuration options: . | Choose the “M0” free tier. | For the Name, provide a name such as “db-cs4530-f24-XYY” (where XYY is your group number). | Keep the Provider and Region the default values. | . | Click on “Create Deployment”. | You will be prompted about connecting to your database. | Copy the username and password that is automatically generated. You will need this later (you can also create an user after the database has been created). | Click on “Create Database User”. | Click the “Close” button. | . | Wait for your database cluster to complete creation. Once complete, click on the “Network Access” option in the left navigation. | Your current public IP address will be automatically present. Click the “EDIT” button, and then click “ALLOW ACCESS FROM ANYWHERE”. Click the “Confirm” button. | Click on the “Database” option in the left navigation. Then, click on the “Connect” button. | Click on “Choose a connection method”. | Click on “Compass”. | If you don’t have Compass installed, follow the instructions to install MongoDB Compass and then connect. | Otherwise, switch to the “I have MongoDB Compass installed” tab and connect. | . | Open up MongoDB Compass and see what connections are displayed. You should see a connection to something like &lt;your repo name&gt;.cvjdm.mongodb.net:27017 That connection should include databases such as such as “admin”, “config”, and “local”. | In Compass nav bar (on the left), select the connection you just created. Mouse to the “…” and select “Copy Connection String”. Paste this connection string in some convenient place; you will need it later. | Go to your project repository’s server folder and run the populate_db.ts script. | . cd server npx ts-node populate_db.ts &lt;your connection string&gt;/fake_so . You can find the connection string in the instructions from step 11. When you are done, go back to Compass and examine the connection you created. When you open that connection, you should see a database named fake_so, and in that database you should see collections named Answer, Comment, Question, and Tag with several documents in each of them, much like you got when running populate_db.ts locally. You have now completed setting up your MongoDB database. For simplicity, and since you’re not handling sensitive data, the Network Access is set to allow connections from anywhere. However, for projects involving sensitive data, you should restrict access to only the necessary range of IP addresses. You can connect your locally deployed server to the cloud-hosted MongoDB database. This is useful when developing a feature and testing it before deployment. To do this, update the .env created as part of the IP2 setup. MONGODB_URI=&lt;add your connection string here, without the trailing slash&gt; CLIENT_URL=http://localhost:3000 PORT=8000 . Note: The .env file is not required for the Render.com setup. The above instructions are only if you want to connect the cloud MongoDB to your local (laptop) server. Setup your Server . | Open the Render Dashboard. | Click on “Create new project”, and create a new project with a name such as “cs4530-f24-XYY” (where XYY is your group number). | From the top menu, click on the “+ New” button and click on “Web Service”. | For the Source Code, choose your project repository. In case you do not see your project repository, go to your GitHub account and authorize access to your project repository. | For the Name, you can EITHER choose an unique name OR use a name such as “cs4530-f24-XYY-API” or “cs4530-f24-XYY-backend”(where XYY is your group number). The “API” or “backend” in that name is important, because it will let you easily distinguish the “server” (what Render calls a “web service”) from the “client” (what Render calls a “static site”, which is the URL where you will find the user-facing application). | For the Project, select the project created earlier. For the environment, select Production or any default value. | For Language, select “Node”. | For Branch, select “main”. | For Region, keep the default value. | For Root Directory, type in “server”. | For Build Command, type in “npm install &amp;&amp; tsc”. | For Start Command, type in “npm run start:prod”. | For Instance Type, choose the “Free” option. | In the Environment Variables section, add a variable called MONGODB_URI. For the value, add the connection string of the MongoDB database created earlier. Make sure that you remove the trailing slash, if any. | If you need to change any of these, you can do so from the tab called “Settings” (or “Environment”) | . | Click “Deploy Web Service”. | The URL of the backend service will be displayed in purple just below near the top of the window in the “Logs” section. Make a copy of this; you will need it later. | Once the deployment is completed, visit the URL and check if you get a “hello world” response. | Append /question/getQuestion?order=newest&amp;search= to the URL and check if you get an successful response. A successful response should include the questions that are present in your MongoDB. If you get something like ` MongoDB connection error: MongooseServerSelectionError: connect ECONNREFUSED 127.0.0.1:27017, that indicates that your server is trying to connect to your local database. Check that the value of MONGODB_URI` is set correctly in the Render environment section. | You can check the server’s logs by going to the “Logs” section. | . You might see a warning like this after the server deployment: Your free instance will spin down with inactivity, which can delay requests by 50 seconds or more. In case your server is is not responding to requests after a long period of inactivity, visit the URL and wait till you get a “hello world” response. If the server is still not responsive, then check the logs. Setup your Client . | Open the Render Dashboard. | From the top menu, click on the “+ New” button and click on “Static Site”. | For the Git Provider, choose your project repository. In case you do not see your project repository, go to your GitHub account and authorize access to your project repository. | For the Name, you can either choose an unique name OR use a name such as “cs4530-f24-XYY” (where XYY is your group number). | For the Project, select the project created earlier. For the environment, select Production or any default value. | For Branch, select “main”. | For Root Directory, type in “client”. | For Build Command, type in “npm install &amp;&amp; npm run build”. | For Publish directory, type in “build”. | In the Environment Variables section, add a variable called REACT_APP_SERVER_URL. For the value, add the server URL from Setup your Server Step 5. | Click “Deploy Static Site”. | Once the site is deployed, copy the client URL. As before, you can find this in purple near the top of the “Logs” page. | Open the Render Dashboard again. Choose the project you have created, and go back to service called “Web Service”. | Click on the “Environment” tab. | Add a new environment variable called CLIENT_URL. For the value, add the client URL (make sure you are adding this env. variable in the server’s settings, not the client’s). You should now have two environment variables for your server: MONGDB_URI and CLIENT_URL. | Visit the client URL in your browser to run the application. | . ",
    "url": "/CS4530-Fall-2024/activities/continuous-deployment#steps",
    
    "relUrl": "/activities/continuous-deployment#steps"
  },"20": {
    "doc": "Continuous Deployment Pipeline for FakeStackOverFlow",
    "title": "Alternative Steps to Set Up Heroku Deployment for Your Backend Service",
    "content": "Step 1: Enroll in GitHub Student Developer Pack and Heroku for Students . | Enroll in GitHub Student Developer Pack . | Visit GitHub Education and select “Get student benefits”. Follow the instructions to apply. Approval can take up to 2 business days. | . | Set Up Heroku for Students . | Go to Heroku.com and create an account (use the same email as your GitHub account). | Enroll in the Heroku for Students offer, which requires the GitHub Student Developer Pack. | Note: You’ll need to add a credit card for the platform credits that Heroku provides for student use. | . | After approval, you should see these credits in the billing section of your Heroku account within a few hours. Wait to create an app until credits are available. | . | . Step 2: Create a New Application on Heroku . | Navigate to the Heroku Dashboard . | After logging into Heroku, go to your Dashboard. | . | Create a New App . | Select New -&gt; Create New App. | Choose a descriptive app name (this will form part of your app’s URL). | Click Create App to proceed. | . | . Step 3: Deploy the Server from a New Repository . | Create a New Private Repository . | You must create a new Private Repository on Github which will contain only your server code. | Create a new Private Repository on Github and copy paste your server folder. | Copy the .gitignore from the root of the original repository to the server repository. | . | Update Yaml file . | Once the client and server folders are separated into different repositories, update the .github\\workflows\\main.yml in each as the following: | . Client - GitHub Actions CI Workflow Configuration . name: FakeStackOverflow CI on: # Controls when the action will run. # Triggers the workflow on push or pull request events but only for the master branch. If you want to trigger the action on other branches, add here push: branches: [main] pull_request: branches: [main] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: build-and-test: # # The type of runner that the job will run on runs-on: ubuntu-20.04 # Steps represent a sequence of tasks that will be executed as part of the job steps: - name: Git Checkout uses: actions/checkout@v4 - name: Set up Node.js 20.x uses: actions/setup-node@v4 with: node-version: \"20.x\" - name: Build and lint frontend if: $ env: REACT_APP_SERVER_URL: http://localhost:8000 run: cd client; npm ci &amp;&amp; npm run build &amp;&amp; npm run lint . Server - GitHub Actions CI Workflow Configuration . name: FakeStackOverflow CI on: # Controls when the action will run. # Triggers the workflow on push or pull request events but only for the master branch. If you want to trigger the action on other branches, add here push: branches: [main] pull_request: branches: [main] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: build-and-test: # # The type of runner that the job will run on runs-on: ubuntu-20.04 # Steps represent a sequence of tasks that will be executed as part of the job steps: - name: Git Checkout uses: actions/checkout@v4 - name: Set up Node.js 20.x uses: actions/setup-node@v4 with: node-version: \"20.x\" - name: Launch MongoDB Server uses: supercharge/mongodb-github-action@1.11.0 with: mongodb-version: \"7.0\" - name: Build backend service if: $ run: npm ci - name: Test backend server if: $ env: # Pass the environmental variables for the backend tests to use MONGODB_URI: mongodb://localhost:27017 run: | npm run start &amp; sleep 10 echo \"Checking if the server is running...\" curl --fail 'http://localhost:8000/question/getQuestion?order=newest&amp;search=' || (echo \"Server failed to start\" &amp;&amp; killall node &amp;&amp; exit 1) echo \"Server started successfully. Now stopping...\" killall node npm run test - name: Lint backend if: $ run: npm run lint . | . Step 4: Connect to GitHub for Continuous Deployment . | Connect to GitHub Repository . | In your Heroku app dashboard, scroll to the Deployment method section and select GitHub. | Click Connect to GitHub and search for your repository. | Select the repository containing your backend service code. | . | Configure Required Files . | You need to make these changes to the package.json . | Move “dotenv” from the “devDependecies” to “dependencies”. | Change the “start” script in your server/package.json from “ts-node server.ts” to “node dist/server.js”. | Add a new script called “start:dev” with the value “ts-node server.ts”. You can use this for your local development. | . | The package.json file should look something like this: . | package.json - Should contain required dependencies and scripts, along with the dependencies you have added | . | You need to make these changes to the tsconfig.json . | Go to server/tsconfig.json and scroll to the end. Modify the “include” and “exclude” values, as specified in the tsconfig.json: \"include\": [\"./**/*.ts\"], \"exclude\": [\"node_modules\", \"dist\"] . | . | The tsconfig.json file should look something like this: . | tsconfig.json - TypeScript configuration | . | . | . Step 5: Deploy the Code . | Manual Deployment . | Configure the Manual deploy option in Heroku. Everytime you push a change to your main branch, you will have to login to Heroku and click on the Deploy Branch button. | In Heroku, scroll to the Manual deploy section. | Choose the main (or preferred deployment) branch. | Click Deploy Branch to deploy your application manually. | . | Automatic Deployment Option . | Configure the Automatic deploy option in Heroku. Everytime you push a change to your main branch, Heroku will automatically publish your changes. | In Heroku, scroll to the Automatic deploys section. | Choose the main (or preferred deployment) branch. | Click Enable Automatic Deploys to deploy your application automatically. | . | . Step 6: Environment Variables . | Set Up Environment Variables . | In your Heroku dashboard, go to Settings -&gt; Config Vars | Add your MongoDB connection string as a config var: Key: MONGODB_URI Value: &lt;Your MongoDB connection string&gt; Key: PORT Value: 8000 Key: CLIENT_URL Value: &lt;your Render Client URL&gt; . | Make sure your MongoDB connection matches the URI in your Mongo Cloud. | . | . Step 7: Update Client Environment Variables on Render.com . Update the server URL from the Render.com URL to the Heroku URL. | Open the Render Dashboard. | Choose the project you have created and go back to the service with type “Static Site” (your client deployment). | Click on the Environment tab. | Change the value of the REACT_APP_SERVER_URL environment variable to the Heroku URL (you can find this in your Heroku app’s Settings page, under the Domains section). | After the client finishes re-deploying, check if the client is sending queries to the new Heroku server deployment successfully. | (Optional) If the new Heroku server deployment is working correctly, delete the server deployment from Render. | . Step 8: (Optional) Update Dyno Type for Memory Issues . In case you are still running into memory issues in the Heroku deployment, you can update the “Dynos” type. | Follow the steps from Heroku Help - Change Dyno Types to adjust the dyno type for your application. | Choose the type carefully as selecting a higher type will result in a higher cost, which will reduce your Platform Credits. | . ",
    "url": "/CS4530-Fall-2024/activities/continuous-deployment#alternative-steps-to-set-up-heroku-deployment-for-your-backend-service",
    
    "relUrl": "/activities/continuous-deployment#alternative-steps-to-set-up-heroku-deployment-for-your-backend-service"
  },"21": {
    "doc": "Announcements",
    "title": "Announcements",
    "content": " ",
    "url": "/CS4530-Fall-2024/announcements/",
    
    "relUrl": "/announcements/"
  },"22": {
    "doc": "Announcements",
    "title": "Information about Project Final Deliverables, and Posters/Demos",
    "content": "Nov 4 &middot; 0 min read Please don’t forget to review final project deliverables page published on course website. This include grading rubrics and other details related to the submission of the final project (i.e., code/testing, report, posters and demos). Canvas assignments for these are also published now. In addition, each instructor has provided a list of expectations for the final demos / presentations. Please be sure to review these quickly. ",
    "url": "/CS4530-Fall-2024/announcements/",
    
    "relUrl": "/announcements/"
  },"23": {
    "doc": "Announcements",
    "title": "Team Repository Setup Now Available",
    "content": "Oct 22 &middot; 0 min read We have posted the instructions for setting up your team repository. You can find them in the start of the CI/CD Pipeline Activity. The repository will include the starter code for the final project. We recommend that you start this process as soon as possible to avoid any delays. ",
    "url": "/CS4530-Fall-2024/announcements/",
    
    "relUrl": "/announcements/"
  },"24": {
    "doc": "Announcements",
    "title": "Software Development Process",
    "content": "Oct 6 &middot; 1 min read As part of software development process, each team is expected to use a structured development process, including pull requests, code reviews, etc. Each team will also submit sprint reports, individual surveys, and have weekly meetings with TA Mentor. The development process started last week (as you started developing your project plan) and the required “process-related” submissions start this week. Here are important submissions to remember for week 6, 8-13: . | Every week all members of a team are expected to meet with their mentor for a regularly scheduled meeting. Weekly Canvas assignments will help track your attendance for these meetings. | Every week each student is expected to complete one (Confidential, Peer Evaluation) Survey by Wednesday noon. The link can be found under the Canvas assignment which will help track if you completed the survey or not. | At the end of each sprint, each team will submit a sprint report (and retrospective) through a Canvas assignment. | TAs will also review your github commits, PRs, code reviews regularly and will keep an eye on appropriate division of labor within the project team. They will also provide you a weekly assessment of your work. | . These assignments count towards “project process” part of the project which is worth 20% of the overall project grade. ",
    "url": "/CS4530-Fall-2024/announcements/",
    
    "relUrl": "/announcements/"
  },"25": {
    "doc": "Announcements",
    "title": "Individual Project 2 is Now Available + Project Teams Announced",
    "content": "Oct 2 &middot; 0 min read The second and (final!) individual project deliverable is now released, and will be due on Wednesday, Oct 16 at 12pm (noon) ET. We strongly encourage you to read through the assignment soon, so that you can begin to formulate a plan of attack to complete this assignment. Project Team Assignments are now posted on piazza. Please coordinate with your assigned TA Mentors to schedule a kick-off meeting. The first team deliverable will be the preliminary project plan due on Oct 9th . ",
    "url": "/CS4530-Fall-2024/announcements/",
    
    "relUrl": "/announcements/"
  },"26": {
    "doc": "Announcements",
    "title": "Team Formation Survey is Now Available",
    "content": "Sep 18 &middot; 0 min read Please complete this Team Formation Survey to help us organize you into a team for the term project. EVERY STUDENT must fill this form out by 12pm (Noon) on Wednesday 9/25/2024, or risk being placed in a random team. We would recommend that you check with other students in your section before filling out the survey. Withdrawal deadline is on Tuesday Sep 24th. ",
    "url": "/CS4530-Fall-2024/announcements/",
    
    "relUrl": "/announcements/"
  },"27": {
    "doc": "Announcements",
    "title": "Welcome to CS4530 - Fall 2024",
    "content": "Sep 3 &middot; 1 min read On behalf of the entire instructional team (all 2 instructors and 14 TAs), welcome to the Fall 2024 edition of CS 4530! This website will contain all of the lectures, assignments and tutorials for the class. Our Canvas site contains your gradebook as well as single-sign-on links to Piazza (for discussion), instructions for submitting assignments and replicates much of the material from the class website. In advance of the first week of class, we’ve shared the calendars for each section, the first two lectures, and tutorials on installing your IDE, Typescript, and unit testing with Jest. The schedule of office hours is also posted and we will start holding office hours from Thursday Sep 5th. The first individual project deliverable is now available. This deliverable is due by September 18th at 12pm (Noon) ET. Your work will be submitted through github Classroom. We would encourage you to start working on this assignment early. Feel free to use piazza to ask questions and use office hours if you need help. We have 70 hours of scheduled TA office hours per week. We are excited to meet you all this week! . ",
    "url": "/CS4530-Fall-2024/announcements/",
    
    "relUrl": "/announcements/"
  },"28": {
    "doc": "Announcements",
    "title": "Initial Website Launched",
    "content": "Aug 4 &middot; 0 min read Welcome to the course website for CS4530, Fall 2024! Over the coming weeks, we will be populating this website (and Canvas) with more information about the course. ",
    "url": "/CS4530-Fall-2024/announcements/",
    
    "relUrl": "/announcements/"
  },"29": {
    "doc": "Assignments",
    "title": "Assignments",
    "content": " ",
    "url": "/CS4530-Fall-2024/assignments/",
    
    "relUrl": "/assignments/"
  },"30": {
    "doc": "Debugging",
    "title": "Debugging",
    "content": "One of the objectives of this class is to provide students with experiences writing new code for large, existing codebases. We anticipate that you may run into difficulties debugging the project code: it is often difficult to build debugging skills until you have a problem in front of you that requires them. The course staff is happy to help you with debugging, with the specific goal of helping you learn to successfully apply scientific debugging. Andreas Zeller’s Debugging Book provides an excellent guide to scientific debugging. The short version is roughly: if you can’t debug an issue in the first few minutes “just by looking at it”, it will be hard to keep all of the relevant information in your head at once, and a formal process to help you generate and refine guesses for why something is wrong can be immensely useful. The key idea is to create a debugging note file, where you track information like: . | What was the input/application state that caused the bug? | What was the behavior that I expected? | What was the behavior that I observed? | What are possible hypotheses for that behavior? | How have I tested those hypotheses, and what was the result? | . The overall goal with hypothesis formulation is to come up with possible causes for why the bug exists. Then, as long as those hypotheses are testable, we can prove or disprove them. Most hypotheses will be along the lines of “did I make an incorrect assumption about how a library or API works.” The devil is in enumerating all of the possible incorrect assumptions that you might have made, and testing them. The best way to attack these kinds of problems is to start with testing some high-level, general assumptions, and then refine them. If you come to us for debugging help, we will ask you to answer these 5 questions, as our goal is to help you get better at debugging and not to simply point out bugs that we might have seen before. We are happy to discuss the problematic behavior that you are observing, possible hypotheses for why that behavior is occurring, and strategies to test those hypotheses. In the past, students have found that using a variety of strategies to test their hypotheses (e.g. using a debugger, creating a minimized test case, measured application of console.log statements, internet research) are useful, and we would be happy to demonstrate these. We may not be able to stay with you while you work on refining your hypotheses and fixing the bug, but would be happy to continue following up if you get stuck again. ",
    "url": "/CS4530-Fall-2024/policies/debugging/",
    
    "relUrl": "/policies/debugging/"
  },"31": {
    "doc": "Demos for Sections 1, 2, 5, 8",
    "title": "Specifications for Live Demos / Presentations (Sections 1, 2, 5, &amp; 8 - Prof. Bhutta)",
    "content": "Each group will present a live demo to show the feature that they have added for the final project. The schedule of these demos will be discussed/finalized during the lecture. You will have 6 minutes maximum (5 minutes to setup and present. 1 minute for questions and everything else). You will lose points if your demo goes over 6 minutes. Please rehearse it and time yourself (best to keep it to 5 minutes or less). Please note: . | The demo MUST be from hosted website, NOT from localhost. | Attendance is REQUIRED for these demos. Please email the instructor if you have extenuating circumstances | Each group will be required to submit copy of presentation (along with poster) | Each group will also be required to grade demos of other groups. | . Your presentation should include the following: . | {Required} Description of feature(s) implemented [no more than 1 slide] | {Required} Checklist of all user stories and COS (what was proposed vs what was implemented). Feel free to use percentages to show progress. [a list or table would be acceptable] | {Required} Discuss any deviations from the proposed plan (if any)? [no more than 1 slide] | {Optional} Discuss any challenges you faced and how did you resolve them. [no more than 1 slide] | {Required} Short summary of overall contributions made by each member [no more than 1 slide with 1-2 sentences per member]; | {Required} What percentage of overall contribution was made by each member and what are the estimated number of hours spent on the {overall} project by each member excluding research tasks or time spent on project plans [no more than 1 slide]; | . During your presentation, you might want to consider the following order: introduction of project idea (or features) followed by live demo, then present the remaining slides in the order they are listed above or in any order you find appropriate. You might want to include your email address and other related info (i.e., github repo link, pictures, hosted site link, etc). You will also submit a copy of your presentation (pptx/pdf file, not link) on Canvas. ",
    "url": "/CS4530-Fall-2024/assignments/sec-1258-demos#specifications-for-live-demos--presentationssections-1-2-5--8---prof-bhutta",
    
    "relUrl": "/assignments/sec-1258-demos#specifications-for-live-demos--presentationssections-1-2-5--8---prof-bhutta"
  },"32": {
    "doc": "Demos for Sections 1, 2, 5, 8",
    "title": "Grading Rubric:",
    "content": "Your final Poster and Demos are worth 4% of the overall course. Poster will be worth 1% and will be graded based on whether you submitted it on time or not. Demos will be worth 3% and will be graded using the following criteria: Each group will evaluate each others’ demos and will assign scores (Instructor and TAs will do the same). Your final demo score will be calculated by combining all of these scores (equally weighted). However, you will NOT receive points for the demo if your group fails to submit copy of the presentation on Canvas, your scores to instructor or if you are not present for all presentations/demos during class. ",
    "url": "/CS4530-Fall-2024/assignments/sec-1258-demos#grading-rubric",
    
    "relUrl": "/assignments/sec-1258-demos#grading-rubric"
  },"33": {
    "doc": "Demos for Sections 1, 2, 5, 8",
    "title": "Demos for Sections 1, 2, 5, 8",
    "content": " ",
    "url": "/CS4530-Fall-2024/assignments/sec-1258-demos",
    
    "relUrl": "/assignments/sec-1258-demos"
  },"34": {
    "doc": "Demos for Section 9",
    "title": "Specifications for Live Presentations (Sec 9, Prof. Wand)",
    "content": "Each group will present a live demo for the final project. You can imagine this as the live presentation that you would make if you were standing in front of your poster at a conference. Imagine your target audience as a recruiter for a software engineering role: your goal is to demonstrate that you have some experience working on some non-trivial software engineering project. We expect all students to attend the entire set of presentations. We will be taking attendance (via zoom logs). You will have 10 minutes maximum (9 minutes to setup and present. 1 minute for questions and everything else). You will lose points if your demo goes over 9 minutes. Please rehearse it and time yourself (best to keep it to 8 minutes)! . Your presentation may be a combination of narrated slides and live demonstration. Your slides may reuse materials from your poster. The live demonstration must be run on the hosted site, rather than on your local machine. Your presentation should include the following: . | A description of the feature you added | A live demonstration of your project, including all of the screenshots from your poster. | A summary of the technology stack and overall design decisions (this may also be taken from your poster) | Short summary of overall contribution by each member  | A summary of challenges were faced and how you overcame them (alternatively, how the project you delivered differed from the one you proposed). | . You should submit a copy of your pptx or pdf of your slides on Canvas. ",
    "url": "/CS4530-Fall-2024/assignments/sec-9-demos#specifications-for-live-presentationssec-9-prof-wand",
    
    "relUrl": "/assignments/sec-9-demos#specifications-for-live-presentationssec-9-prof-wand"
  },"35": {
    "doc": "Demos for Section 9",
    "title": "Grading Rubric:",
    "content": "Each of the elements above will be graded separately, with the following point value: . | A description of the feature you added (1pt) | A live demonstration of your project, including all of the screenshots from your poster. (5 pts) | A summary of the technology stack and overall design decisions (2 pts) | Short summary of overall contribution by each member (1 pt) | A summary of challenges were faced and how you overcame them (alternatively, how the project you delivered differed from the one you proposed). (1 pt) | . ",
    "url": "/CS4530-Fall-2024/assignments/sec-9-demos#grading-rubric",
    
    "relUrl": "/assignments/sec-9-demos#grading-rubric"
  },"36": {
    "doc": "Demos for Section 9",
    "title": "Demos for Section 9",
    "content": " ",
    "url": "/CS4530-Fall-2024/assignments/sec-9-demos",
    
    "relUrl": "/assignments/sec-9-demos"
  },"37": {
    "doc": "CS4530, Fall 2024",
    "title": "CS4530, Fall 2024: Fundamentals of Software Engineering",
    "content": " ",
    "url": "/CS4530-Fall-2024/#cs4530-fall-2024-fundamentals-of-software-engineering",
    
    "relUrl": "/#cs4530-fall-2024-fundamentals-of-software-engineering"
  },"38": {
    "doc": "CS4530, Fall 2024",
    "title": "Information about Project Final Deliverables, and Posters/Demos",
    "content": "Nov 4 &middot; 0 min read Please don’t forget to review final project deliverables page published on course website. This include grading rubrics and other details related to the submission of the final project (i.e., code/testing, report, posters and demos). Canvas assignments for these are also published now. In addition, each instructor has provided a list of expectations for the final demos / presentations. Please be sure to review these quickly. Announcements . ",
    "url": "/CS4530-Fall-2024/",
    
    "relUrl": "/"
  },"39": {
    "doc": "CS4530, Fall 2024",
    "title": "Overview",
    "content": "Building, delivering and maintaining successful software products requires more than being good at programming. Software engineering encompasses the tools and processes that we use to design, construct and maintain programs over time. Software engineering has been said to consider the “multi person development of multi version programs.” Development processes that work well for a single developer do not scale to large or even medium-sized teams. Similarly, development processes that work well for quickly delivering a one-off program to a client cause chaos when applied to a codebase that needs to be maintained and updated over months and years. This class will begin to explore these tradeoffs throughout the entire software development lifecycle, with a particular focus on how these decisions affect the quality of the resulting software. This class will serve as an introduction to the field of software engineering, covering key topics such as: . | Requirements gathering and specification How to make sure that you build the product that your customer really wants | Designing code for reuse, for readability, and for scale How to avoid reinventing the wheel? What makes code readable? Where does performance fit into designs? When do we decide when to revisit old design decisions, and how do we replace them? Can we avoid the mistakes that past developers have made? | How to organize your development process to collaborate effectively How do we communicate our designs with others? How do we structure and coordinate development activities? How do we measure the performance of these processes, and tweak them over time? | How to ensure that your code works, is secure, and broadly speaking, “does the right thing” How do we measure different quality attributes like usability, scalability and performance? How do we minimize the cost of defects? How do we automatically test complex systems? Can we automatically prove the absence of some kinds of defects? | . ",
    "url": "/CS4530-Fall-2024/#overview",
    
    "relUrl": "/#overview"
  },"40": {
    "doc": "CS4530, Fall 2024",
    "title": "Course Outcomes",
    "content": ". | Students will be able to define and describe the phases of the software engineering lifecycle (requirements, design, implementation, testing, deployment, maintenance) | Students will be able to explain the role of key processes and technologies in modern software development. | Students will be able to productively apply instances of major tools used in elementary SE tasks. | Students will design and implement a portfolio-worthy software engineering project in a small team environment that can be publicly showcased to recruiters. | . Course Delivery . The course will be delivered in a “traditional” lecture style. Prof Wand’s section will be entirely virtual, and the other sections will be entirely on-the-ground, with no virtual participation option. You must attend the section for which you have registered, and you may not partner with students in other sections for the term project. | Section | Instructor | Meeting Time | Meeting Place | . | 1 | Prof Bhutta | MR 11:45 am - 1:25 pm | West Village G 106 | . | 2 | Prof Bhutta | TF 9:50 am - 11:30 am | EXP 204 | . | 5 | Prof Bhutta | T 11:45 am - 1:25 pm &amp; R 2:50 pm - 4:30pm | Dodge Hall 230 | . | 8 | Prof Bhutta | TF 3:25 pm - 5:05 pm | Shillman Hall 425 | . | 9 | Prof Wand | W 6:00 pm - 9:20 pm | Online | . ",
    "url": "/CS4530-Fall-2024/#course-outcomes",
    
    "relUrl": "/#course-outcomes"
  },"41": {
    "doc": "CS4530, Fall 2024",
    "title": "Course Project",
    "content": "The assignments and project for this class are designed to mirror the experiences of a software engineer joining a new development team: you will be “onboarded” to our codebase, make several individual contributions, and then form a team to propose, develop and implement new features. The codebase that we’ll be developing on is a Fake Stack Overflow project. You will get an opportunity to work with the starter code which provides basic skeleton for the app and then additional features will be proposed and implemented by you! All implementation will take place in the TypeScript programming language, using React for the user interface. At the end of the semester, the instructors and TAs will evaluate all of the student projects, and select the best (in terms of usability, code quality, test suite quality, and overall design) to showcase on course website. The project will provide hands-on experience to complement the skills taught in this class, requiring students to be able to: . | Work effectively in a small team | Enumerate and prioritize development tasks | Propose, design, implement and test a new feature in an existing non-toy software application | Write code that their team members can read and review | Review teammates’ code | Analyze a proposed software architecture | Use relevant software tools, such as: . | TypeScript | Visual Studio Code (or similar IDE) | Git | Mocha and Jest | Postman | . | . Select projects from Spring 2024 are hosted in our project showcase. Acknowledgements . This class and its contents were inspired by Software Engineering courses at various institutions, including: . | Columbia’s Software Engineering Course, COMS W4156 | CMU’s Software Engineering Course, 17-313 | GMU’s Web App Development Course, SWE 432 | NCSU’s Software Engineering Course, CSC 326 and its iTrust term project, also Chris Parnin’s DevOps course. | Past iterations of CS4530 at Northeastern: Spring 2024, Fall 2023, Spring 2023, Fall 2022, Spring 2022, Spring 2021 | Past iterations of CS5500 at Northeastern, as prepared by Mike Weintraub, Mike Shah, Frank Tip and Joydeep Mitra (Spring 2024). | . This website is built using Kevin Lin’s Just the Class Jekyll template. ",
    "url": "/CS4530-Fall-2024/#course-project",
    
    "relUrl": "/#course-project"
  },"42": {
    "doc": "CS4530, Fall 2024",
    "title": "CS4530, Fall 2024",
    "content": " ",
    "url": "/CS4530-Fall-2024/",
    
    "relUrl": "/"
  },"43": {
    "doc": "Individual Project 1",
    "title": "Change Log",
    "content": ". | 9/6/2024: Added clarification to files required to modify in Task 1 | 9/6/2024: Added clarification/instruction for getTagByName in Task 2 | 9/7/2024: Moved tutorial on MongoDB and Mongoose to tutorials | 9/9/2024: With reference to Piazza post @38: Update handout to fix mocking request body used with ‘supertest’ in newQuestion.spec.ts. Involves changes at 4 places: in line 86, replace send(mockQuestion) with send({ ...mockQuestion, title: '' }); in line 95, replace send(mockQuestion) with send({ ...mockQuestion, text: '' }); in line 104, replace send(mockQuestion) with send({ ...mockQuestion, tags: [] }); in line 113, replace send(mockQuestion) with send({ ...mockQuestion, asked_by: '' }); | 9/12/2024: Updated typo regarding file to test for Task 1. Tests are to be added in questions.spec.ts instead of question.spec.ts | 9/18/2024: Updated typo in Task 3. sortQuestionsByMostViewed is the function to be added (NOT getMostViewedQuestion). | . ",
    "url": "/CS4530-Fall-2024/assignments/ip1#change-log",
    
    "relUrl": "/assignments/ip1#change-log"
  },"44": {
    "doc": "Individual Project 1",
    "title": "Objectives of this assignment",
    "content": "The objectives of this assignment are to: . | Get you familiar with the basics of TypeScript, VSCode, and the project codebase | Learn how to read and write code in TypeScript | Translate high-level requirements into code | Learn how to write unit tests with Jest | . ",
    "url": "/CS4530-Fall-2024/assignments/ip1#objectives-of-this-assignment",
    
    "relUrl": "/assignments/ip1#objectives-of-this-assignment"
  },"45": {
    "doc": "Individual Project 1",
    "title": "Getting started with this assignment",
    "content": "Start by accepting our invitation. It will create a Github repository for you which will include the starter code for this assignment. In case you have enrolled in the course recently (after 9/3), you may not find your name in the list. Please create a piazza post to contact us and we will add you to the Github Classroom roster. If you are new to Git, you may want to review this getting started page first! . 1. Prerequisites . 1.1 Install Node.js and npm . If you haven’t installed npm and node.js, follow the tutorial on setting up a development environment for this class . 1.2 Install MongoDB . We use MongoDB as the NoSQL database to store data related to this application. | Follow the instructions in the official MongoDB documentation to install the free community edition. | Choose ‘Install on Linux’, ‘Install on macOS’, or ‘Install on Windows’, depending on your system. (the following steps are for Windows) | Scroll down to the section labeled ‘Install MongoDB Community Edition.’ and click on MongoDB Download Center. | For Windows, in the Package dropdown, select msi. Then download and run the installer. | On Windows, select the “Install MongoDB as a Service” checkbox and install. This will start MongoDB as a background service. | Install “MongoDB Compass” if prompted. | Verify if the MongoDB server is running using the Windows Services app. | . Mongo offers several methods of interacting with your Mongo databases. | MongoDB Compass is an interactive application for creating, modifying, and querying MongoDB connections. It should be started as part of the installation process, showing a connection to mongodb://localhost:27017/. For Windows, install MongoDB Compass using the instructions above. For Mac: . | Download the dmg file from https://www.mongodb.com/try/download/compass. Once the application starts: . | Click on “Add new connection” in the left sidebar. | Make sure the URI field contains mongodb://localhost:27017 | Click on “Connect” - MongoDB will need to be running as a macOS service | . | . | Mongo shell (mongosh) provides a command-line interface that can be used to interact with databases in MongoDB. For Windows: . | Download it here using the msi package. You can also use mongosh to see if the MongoDB server is running. Try the MongoDB Community Edition and the command show dbs; you should see a list of existing databases in your local instance. | . For Mac: . | Mongo shell is automatically installed with MongoDB through the Mac installation instructions. To use it, make sure MongoDB is running as a macOS service, then type mongosh into the terminal. | . | Last and most important, you can use the Mongoose api to interact with MongoDB through your JavaScript or TypeScript programs. Mongoose will be installed as part of the installation process for the project starter code. | . 2. Install the starter code and its dependencies . The starter code package, of which this is a part, is divided into 3 main directories: client, server, and testing. | Navigate to the root directory of the repo. | Install the dependencies for each directory by running the following commands: | . cd client/ npm install cd ../server npm install cd ../testing npm install . Once you install the dependencies, you might see the following ESlint errors in some files. The linter error indicates that the code contains carriage return characters (\\r, represented as ␍) at the end of each line and usually happens when the file has Windows-style line endings (\\r\\n) instead of Unix-style line endings (\\n). To fix this, you can click on the “CRLF” icon on the lower right corner of VSCode and change it to “LF”. Note that this does not count as a linting error when grading. 3. Populate the initial database . | In the server directory, run npx ts-node populate_db.ts mongodb://127.0.0.1:27017/fake_so to populate the fake_so database with data that follows the schema definition. | . Note: Right now, you may run into errors regarding unknown properties. Once you finish implementing Task 2 and Task 4 and modify the schema, you should be able to populate the database correctly. 4. Familiarize Yourself with Project Dependencies . | Ensure the following packages are installed: mongoose, express, jest, eslint, axios, cors, and nodemon. | Refer to the documentation for the following packages: | . | Express is a framework to write server-side code. | The mongoose data modeling library. Mongoose provides JS/TS bindings to MongoDB, so we can manage and manipulate the data from our JS/TS programs. | nodemon accelerates the development by automatically restarting a node application when file changes in the directory are detected. | We use the axios library to send HTTP requests to our server from our client application. | We use cors to regulate the permissible connections between the clients and the server. The current cors configuration allows all connections to the server for convenience. This is fine for a development environment. In a production environment where the application is deployed on a cloud service, the CORS policy needs to be specified more strictly. Read more about CORS https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS. | We use mockingoose to mock Mongoose functions when testing. | . 5. Explore Useful Resources . | Express Tutorial: https://expressjs.com/en/guide/routing.html | MongoDB tutorial: A mini tutorial. | Mongoose Queries: https://mongoosejs.com/docs/queries.html | Mongoose Documents: https://mongoosejs.com/docs/documents.html | Jest Basics: https://jestjs.io/docs/getting-started | Mocking in Jest: https://jestjs.io/docs/mock-functions | Mocking Mongoose functions: https://github.com/alonronin/mockingoose | . ",
    "url": "/CS4530-Fall-2024/assignments/ip1#getting-started-with-this-assignment",
    
    "relUrl": "/assignments/ip1#getting-started-with-this-assignment"
  },"46": {
    "doc": "Individual Project 1",
    "title": "Server/Client Architecture",
    "content": "The schemas for the database are documented in the directory server/models/schema. A class diagram for the schema definition is shown below: . The starter code package, of which this is a part, is divided into 3 main directories: client, server, and testing. Client . Running npm run start will start a client on port 3000. The client code uses Axios to send HTTP method requests to the server. You should review the client code to understand how axios sends requests and how the response from the server is processed. You don’t need to make any changes to the client code. Server . The server is responsible for taking HTTP requests from the client and executing them on the database. The server code resides in the server/ directory. The server is responsible for all the data that is sent back and forth to the database. The main server script is in server/server.ts. Running npx ts-node server/server.ts will start an HTTP server, which will take HTTP requests on https://localhost:8000, and execute them on the running database instance. You can send requests to the server using a tool like Postman, or by writing scripts that use axios to send requests to localhost:8000, as you did in the Async activity. When the server is terminated (using CTRL+C), the message “Server closed.” should be displayed. However, the MongoDB service will still be running (You can run mongosh to confirm) . Testing . Unit tests for the server are in server/tests/*.spec.ts. These are written in Jest, which you are already familiar with. To run the entire set of server tests, go to the server directory and say npm run test. Please ensure that the MongoDB server is up and running for the tests to pass. If you want to run specific tests, we recommend that you install vsc-jest-runner in your VSC, and select the test or tests that you would like to run. Summary of the default host/port settings . |   |   | . | Client Instance | https://localhost:3000/ | . | Server Instance | https://localhost:8000/ | . | Database Instance | mongodb://127.0.0.1:27017/fake_so | . ",
    "url": "/CS4530-Fall-2024/assignments/ip1#serverclient-architecture",
    
    "relUrl": "/assignments/ip1#serverclient-architecture"
  },"47": {
    "doc": "Individual Project 1",
    "title": "Recommendations when working on the project",
    "content": ". | Open the client application in a browser and interact with it. While interacting, monitor the application tab in the browser’s developer tools. The application tab will give you information about the HTTP requests the client sends to the server. The HTTP requests will contain URIs in their headers. You can use this information to understand the endpoints in the server. | Read the Jest tests. The Jest tests list all the endpoints the server should have, and the types of HTTP method associated with them. Further, the tests also have information about the Mongoose functions that need to be invoked for the service to send a successful response. | Start by defining the schemas in the server/models/schema directory to ensure the data structure is consistent. | Ensure that you run all Jest tests. These tests are designed to catch issues early. Once all Jest tests pass, the Cypress tests should also pass, assuming no significant changes have been made to the client’s implementation. | Follow the debugging policy to help in the debugging process. | . ",
    "url": "/CS4530-Fall-2024/assignments/ip1#recommendations-when-working-on-the-project",
    
    "relUrl": "/assignments/ip1#recommendations-when-working-on-the-project"
  },"48": {
    "doc": "Individual Project 1",
    "title": "Implementation Tasks",
    "content": "This deliverable has four parts; each part will be graded on its own rubric. You should complete the assignment one part at a time, in the order presented here. Task 1: Implement Filtering by asked_by Field . The asked_by field in the questions schema represents the username of the user who asked the question, essentially identifying the author of the question. The objective of this task is to enhance the current functionality by adding the capability to filter questions based on the asked_by field. This will allow users to retrieve questions posted by a specific user. Make sure you follow TDD, so work your way up by making sure your code passes the tests in application.spec.ts. Steps to Achieve This . | Add the filterQuestionsByAskedBy function Create a new function called filterQuestionsByAskedBy in the application.ts file. This function will accept a list of questions and the name of a user as arguments and filter the given list of questions, returning only those asked by the specified user. | Update the getQuestionsByFilter function Modify the getQuestionsByFilter function within the questions controller (question.ts) to incorporate the new filtering functionality based on the asked_by field. This involves integrating the filterQuestionsByAskedBy function to ensure that the questions are filtered by the specified user before any other filtering operations. Hint: you may need to look into FindQuestionRequest and make necessary changes. | Testing the implementation After implementing these changes, it’s crucial to thoroughly test the new functionality. Ensure that questions are correctly filtered by the asked_by field and that the existing filtering mechanisms (by search keywords and tags) remain unaffected. To ensure accuracy in your implementation, please add additional tests to application.spec.ts and questions.spec.ts and make sure that the code coverage is as comprehensive as possible for the chunks of code you have added or updated as part of this feature. | . Grading for implementation tasks: . | Adding filterQuestionsByAskedBy: 5 points | Updating getQuestionsByFilter: 5 points | Testing: 3 points | . Task 2: Enhancing the Tags Model by Adding a Description Field . The goal of this task is to enhance the existing Tags model by introducing a description field. Tags appear as attributes below questions, acting as labels or keywords used to organize and identify information. For example, the question “How to navigate using React Router?” might have tags like “REACT” and “JAVASCRIPT” to emphasize the languages and frameworks used. This new field will provide users with a descriptive overview of each tag, improving the user experience by clarifying the meaning of tags. For instance, a tag like “ROUTER” might have different meanings depending on the context, such as “a hardware device” or “a file to organize website navigation links.” . The following steps outline the modifications required in the server to accommodate this new field. Steps to Achieve This . | Update the getTags Function The current getTags function in application.ts accepts an array of tag objects, which is only defined to have _id and name. You will first need to change Tag to also include description. Then, this function needs to be modified to do the following: . | Remove duplicate tags, ensuring that if the incoming array of tag objects contains objects with the same name, only the first tag object is used and others are discarded. | Check the database for existing tags. | Create new tags if they do not already exist. | Return the modified tags. | . | Create the getTagByName Function and Endpoint You need to create a new function getTagByName in server/controller/tag.ts. Its expected behavior can be found in server/tests/newTags.spec.ts. You need to ensure that your implementation passes the tests. Hint: see getQuestionById in server/controller/question.ts and addTag in application.ts for how some of the behaviors can be achieved. | Test the Implementation To ensure the accuracy of your implementation, conduct the following tests: . | Test the getTags function correctly handles the creation of new tags, removal of duplicates, and retrieval of existing tags. | Test the getTagByName function to ensure it accurately returns the correct tag data based on the provided name. Consider the case where it cannot find a tag given the name. | . Your implementation needs to pass existing tests. If existing tests are not fully covering every case of your implementation, you need to add additional tests to achieve full coverage in the coverage report. | . Grading for implementation tasks: . | Update getTags: 3 points | Create getTagByName 4 points | Testing: 3 points | . Task 3: Implement Sorting by Most Views . As part of this task, you will be working on a function to retrieve questions based on their view count. You are provided with the getQuestionsByOrder function, which is currently designed to fetch questions from a database and sort them based on the specified order. The function currently supports fetching active, unanswered, and newest questions. Your task is to implement the logic for fetching the most viewed questions. Make sure you follow TDD, so work your way up by understanding and making sure your code passes the tests in application.spec.ts. Steps to Achieve This . | Add the sortQuestionsByMostViewed Function Create a new function called sortQuestionsByMostViewed in the application.ts file. This function should take a list of questions as input and return the questions sorted by their view count in descending order. | Update the getQuestionsByOrder Function Modify the getQuestionsByOrder function within the same file (application.ts) to incorporate the new sorting functionality. This involves utilizing the function implemented in Step 1. | Testing the Implementation After implementing these changes, it’s crucial to thoroughly test the new functionality. Ensure that questions are correctly sorted by most views, and that the existing sorting features (active, unanswered, and newest) remain unaffected. To ensure your implementation is accurate, please add tests in application.spec.ts and ensure the code coverage is as thorough as possible for the portions of code you have added or updated as part of this feature. | . Grading for implementation tasks: . | Add sortQuestionsByMostViewed: 5 points | Update getQuestionsByOrder: 5 points | Testing: 3 points | . Task 4: Implement Upvoting and Downvoting Functionality . Upvoting and downvoting features allow users to express their opinions on questions by adding or removing their votes. This functionality is crucial for a community-driven platform where user engagement and feedback are important. Make sure you follow TDD, so work your way up by understanding and making sure your code passes the tests in application.spec.ts and question.spec.ts. Upvoting a Question . When a user upvotes a question, the following actions take place: . | Update Upvotes List: The user’s username is added to the up_votes field of the question. This field is an array that tracks all the users who have upvoted the question. | Remove Downvote (if present): If the user had previously downvoted the question, their username is removed from the down_votes list to prevent contradictory actions by the same user. | Success and Cancellation: If the user has already upvoted the question, their vote is cancelled, which involves removing their username from the up_votes list. | . Downvoting a Question . Similarly, when a user downvotes a question: . | Update Downvotes List: The user’s username is added to the down_votes field of the question. This field is an array that records all the users who have downvoted the question. | Remove Upvote (if present): If the user had previously upvoted the question, their username is removed from the up_votes list. | Success and Cancellation: If the user has already downvoted the question, their vote is cancelled, which involves removing their username from the down_votes list. | . Key Points . | Each question maintains two separate lists: up_votes and down_votes, which are updated based on user interactions. | Users can toggle their vote on a question, which means they can switch from upvoting to downvoting or vice versa. | Proper error handling ensures that issues like missing fields in requests or database errors are managed appropriately, providing a smooth user experience. | . Steps to Achieve This . | Add Upvote and Downvote Functions Implement two functions, addUpvoteToQuestion and addDownvoteToQuestion, in server/models/application.ts to handle upvoting and downvoting of questions. These functions will: . | Check if the question exists. | Add or remove the user’s vote (upvote or downvote) as appropriate. | Update the question’s upvote and downvote counts. | . | Update Routes to Handle Voting Add two new routes, \"/upvoteQuestion\" and \"/downvoteQuestion\", in server/controller/question.ts to handle upvote and downvote requests. These routes will use the newly created functions to update the question’s votes. | Test the Voting Functionality To verify the behavior of the upvote and downvote features, make sure your code passes the tests in application.spec.ts and question.spec.ts files. For your reference, test the following functionalities: . | Successful upvoting and downvoting. | Cancelling an upvote or downvote. | Handling edge cases such as missing parameters in requests. Specifically, ensure the functionality handles scenarios where a user who previously upvoted now intends to downvote. The expected behavior in this case is that the user should be removed from the up_votes array and added to the down_votes array. Additionally, consider the reverse scenario where a user who previously downvoted now intends to upvote. | . Ensure that the code coverage is as thorough as possible for the portions of code you have added or updated as part of this feature. | . Grading for implementation tasks: . | addUpvoteToQuestion and addDownvoteToQuestion: 30 points | Updating routes: 20 points | Testing: 4 points | . ",
    "url": "/CS4530-Fall-2024/assignments/ip1#implementation-tasks",
    
    "relUrl": "/assignments/ip1#implementation-tasks"
  },"49": {
    "doc": "Individual Project 1",
    "title": "Submission Instructions &amp; Grading",
    "content": "You will submit your assignment using GitHub Classroom. This submission will be scored out of 100 points, 90 of which will be awarded for implementation of tasks and accompanying tests, and the remaining 10 for following style guidelines. Testing . You will be provided with starter code that includes a set of tests. Your task is to ensure that all existing tests pass and to create additional tests to cover any new functionality or edge cases. Your code will be evaluated for linting errors and warnings. Submissions that have any linter errors will automatically receive a grade of 0. Do not wait to run the linter until the last minute. To check for linter errors, run the command npm run lint from the terminal. The handout contains the same ESlint configuration that is used by our grading script. Manual Grading . Your code will be manually evaluated for conformance to our course style guide. This manual evaluation will account for 10% of your total grade on this assignment. We will manually evaluate your code for style on the following rubric: . To receive all 10 points: . | All new names (e.g. for local variables, methods, and properties) follow the naming conventions defined in our style guide | There are no unused local variables | All public properties and methods (other than getters, setters, and constructors) are documented with JSDoc-style comments that describe what the property/method does, as defined in our style guide | The code and tests that you write generally follows the design principles discussed in week one. In particular, your design does not have duplicated code that could have been refactored into a shared method. | . We will review your code and note each violation of this rubric. We will deduct two points for each violation, up to a maximum of deducting all 10 style points. Debugging : . If you need help troubleshooting a problem, be sure to follow all the steps outlined in the course’s debugging policy. This will ensure you have exhausted all initial debugging strategies before reaching out for assistance from the TAs. ",
    "url": "/CS4530-Fall-2024/assignments/ip1#submission-instructions--grading",
    
    "relUrl": "/assignments/ip1#submission-instructions--grading"
  },"50": {
    "doc": "Individual Project 1",
    "title": "Individual Project 1",
    "content": "Welcome aboard to the Stack Overflow team! We’re glad that you’re here and ready to join our development team as a new software engineer. We’re building an interactive application for an online community to share their knowledge and experience, and are very happy to see that we have so many new developers who can help make this application a reality. By the end of the semester, you’ll be able to propose, design, implement, and test new features for our project. We understand that some of you may have some web development experience, but don’t expect that most of you do, and hence, we have created an individual project to help you get up to speed with our existing codebase and development environment. FakeStackOverFlow is a web application that consists of some code that runs in each client’s web browser, and also code that runs on a server. This implementation effort will be split across two deliverables. In this first deliverable, you will implement and test the core backend components for this feature, and in the second deliverable, you will implement and test the frontend components. ",
    "url": "/CS4530-Fall-2024/assignments/ip1",
    
    "relUrl": "/assignments/ip1"
  },"51": {
    "doc": "Individual Project 2",
    "title": "Change Log",
    "content": ". | 10/3/2024: Modified the directory of the main component to ./client/src/components/main/index.tsx | 10/5/2024: Added a note about deleting outdated entries | 10/10/2024: Fixed a typo about tag’s path | . ",
    "url": "/CS4530-Fall-2024/assignments/ip2#change-log",
    
    "relUrl": "/assignments/ip2#change-log"
  },"52": {
    "doc": "Individual Project 2",
    "title": "Objectives of this assignment",
    "content": "The objectives of this assignment are to: . | Investigate and understand a large, existing codebase | Write new TypeScript code that uses asynchronous operations | Write test cases that utilize mocks and spies | Write React components and hooks that make use of state | . ",
    "url": "/CS4530-Fall-2024/assignments/ip2#objectives-of-this-assignment",
    
    "relUrl": "/assignments/ip2#objectives-of-this-assignment"
  },"53": {
    "doc": "Individual Project 2",
    "title": "Getting started with this assignment",
    "content": "Start by accepting our invitation. It will create a Github repository for you which will include the starter code for this assignment. Run npm install within ./client and ./server to fetch the dependencies. System-level dependencies: The libraries used for React require some native binaries to be installed – code written and compiled for your computer (not JavaScript). If you run into issues with npm install not succeeding, please try to delete the node_modules directory and re-run npm install. If the issue still persists, please leave a post on Piazza or come to Office Hours for assistance. Configuring Jest and VSCode: If you would like to use the built-in Jest test runner for VSCode (where it shows the tests and their status in the sidebar), the easiest way to accomplish this for this project is to open just the client directory or just the server directory in VSCode - not the top-level directory. If you have a quick-fix to make it work with the whole project at once, please feel free to share on Piazza, and we will incorporate that here. Otherwise, you can use the Jest Runner extension to run each test individually. Running the app: We strongly encourage you to interactively experiment as you develop by running the entire application in your development environment. ",
    "url": "/CS4530-Fall-2024/assignments/ip2#getting-started-with-this-assignment",
    
    "relUrl": "/assignments/ip2#getting-started-with-this-assignment"
  },"54": {
    "doc": "Individual Project 2",
    "title": "Grading",
    "content": "This submission will be scored out of 200 points, 180 of which will be awarded based on the correctness of your implementation, with the remaining 20 awarded based on your code style. Your code will be manually evaluated for conformance to our course style guide. This manual evaluation will account for 10% of your total grade on this assignment. We will manually evaluate your code for style on the following rubric: . To receive all 20 points: . | All new names (e.g. for local variables, methods, and properties) follow the naming conventions defined in our style guide | There are no unused local variables | All public properties and methods (other than getters, setters, and constructors) are documented with JSDoc-style comments that describe what the property/method does, as defined in our style guide | The code and tests that you write generally follows the design principles discussed in week one. In particular, your design does not have duplicated code that could have been refactored into a shared method. | No duplicate code is allowed. | . We will review your code and note each violation of this rubric. We will deduct 4 points for each violation, up to a maximum of deducting all 20 style points. Your code will automatically be evaluated for linter errors and warnings. | Each lint error or warning will result in a deduction of -3 points (up to a maximum of 30 points). | This will not affect the 20 style points. | Line endings will not be counted as errors. | . The starter code comes with some lint problems, You are expected you to fix these linter problems, many of them will be fixed as you implement the tasks. You can run the following command within the client or server to fix some common lint errors . npm run lint:fix . ",
    "url": "/CS4530-Fall-2024/assignments/ip2#grading",
    
    "relUrl": "/assignments/ip2#grading"
  },"55": {
    "doc": "Individual Project 2",
    "title": "Implementation Tasks",
    "content": "This deliverable has three parts; each part will be graded on its own rubric. You should complete the assignment one part at a time, in the order presented here. General Requirements: Implement your code only in the files specified. You should not install any additional dependencies. ‘package.json’ must be unchanged. Refer to IP1 for instructions related to setting up MongoDB and running the client and server. GitHub Copilot: If you haven’t yet used GitHub Copilot, this might be a good time to set it up. It can be very helpful for writing boilerplate code, and especially for proposing implementations of very simple methods. You likely will find it very useful for many of these implementation tasks. To get it for free: 1. Sign up for GitHub’s Student Pack and wait for your student status to be verified, then 2. Install the GitHub Copilot extension for VSCode. The fields of the Schemas were changed. As a result, features such as upvoting will not work on database entries that were made in IP1. If you want to test features, delete old database entries and make new questions either through manually making it in the client, or run populate_db.ts after you finish implementing the tasks. Task 0: Setup Environment Variables . | Create a file called .env in ./client. In ./client/.env ensure the following lines: REACT_APP_SERVER_URL=http://localhost:8000 . | Create a file called .env in ./server. In ./server/.env ensure the following lines: MONGODB_URI=mongodb://127.0.0.1:27017 CLIENT_URL=http://localhost:3000 PORT=8000 . | . Task 1: Implement refactoring of main components using custom hooks (32 points) . We are going to refactor a few components to extract its state and business logic into a reusable custom hook, improving separation of concerns and keeping the presentation layer clean. Steps to Achieve This . In Client . | Create hooks folder under src In ./client/src, create a folder with name hooks. You will be storing all the custom hooks files in this folder. | Create useAnswerForm custom hook for NewAnswer component Create a new file ./client/src/hooks/useAnswerForm.ts. In this file, you would be implementing the useAnswerForm custom hook, which manages the state and logic for submitting an answer. The postAnswer function should validate the input fields and submit the answer using the addAnswer service. | Update and remove the state management from NewAnswer component In ./client/src/components/main/newAnswer/index.tsx, update the component to use the useAnswerForm hook. Remove the state management and form submission logic from the component. Use the returned values from the useAnswerForm hook to manage the form’s input fields and error messages. Ensure that the form submission now uses the postAnswer function from the hook. | Create useHeader custom hook for component Header Create a new file ./client/src/hooks/useHeader.ts. In this file, you would be implementing the useHeader custom hook, which manages the state and logic for input changes and triggers a search action on ‘Enter’ key press. This hook will accept the same props as that of Header component. Check the next step to know what it should return and the logic to handle the input changes. | Update and remove the state management from component Header In ./client/src/components/header/index.tsx, update the component to use the useHeader hook. Remove the state and the input handling logic present and use the useHeader custom hook without breaking any existing functionality. | Create useTagSelected custom hook for component Tag Create a new file ./client/src/hooks/useTagSelected.ts. In this file, you would be implementing the useTagSelected custom hook, which will handle fetching tag details by tag name from the server. It should also be responsible for fetching the tag from the server in case the value of the name field changes in the supplied object of type TagData. For this take a look at index.tsx in ./client/src/components/main/tagPage/tag/index.tsx. | Update and remove the state management from component Tag In ./client/src/components/main/tagPage/tag/index.tsx, update the component to use the useTagSelected hook. Remove any state management logic present along with any logic that interacts with an external system. Now use the useTagSelected custom hook in a way that the component works the same way as before. | Create useVoteStatus custom hook for component VoteComponent Create a new file ./client/src/hooks/useVoteStatus.ts. In this file, you would be implementing the useVoteStatus custom hook, to handle voting logic for a question. It will manage the current vote count user vote status (upvoted, downvoted), and handles real-time vote updates via socket events. | Update and remove the state management from component VoteComponent In ./client/src/components/voteComponent/index.tsx, update the component to use the useVoteStatus hook. Remove any state management logic present along with any logic that interacts with an external system. Now use the useVoteStatus custom hook and make sure the component works the same as before. | Create useNewQuestion custom hook for component newQuestion Create a new file ./client/src/hooks/useNewQuestion.ts. In this file, you would be implementing the useNewQuestion custom hook, which manages the state and logic for posting a question. The postQuestion function should validate the input fields and submit the question using the addQuestion service. | Use the useNewQuestion custom hook In ./client/src/components/main/newQuestion/index.tsx, update the component to use the useNewQuestion hook. Remove the state management and form submission logic from the component. Use the returned values from the useNewQuestion hook to manage the form’s input fields and error messages. Ensure that the form submission now uses the postQuestion function from the hook. | Create useMainPage custom hook for index.tsx in Main component Create a new file ./client/src/hooks/useMainPage.ts. In this file, you would be implementing the useMainPage custom hook, which manages the page rendering logic for components such as HomePageClass, TagPageClass, AnswerPageClass, NewQuestionPageClass, and NewAnswerPageClass. | Use the useMainPage custom hook Refactor the Main component located at ./client/src/components/main/index.tsx to use the useMainPage custom hook for managing page switching and states. This will simplify the logic in Main and allow centralized page management within the useMainPage hook. | Create useLoginContext custom hook Create a new file ./client/src/hooks/useLoginContext.ts. In this file, you would be implementing the useLoginContext custom hook, which will access the LoginContext using the useContext hook and return it. | Update and remove the state management from component Login In ./client/src/components/login/index.tsx, update the component to use the useLoginContext hook. Remove the line that uses the useContextHook to access the LoginContext and instead use the useLoginContext hook to access the LoginContext making sure that the Login component works the same as before. | Create useUserContext custom hook for component Login Create a new file ./client/src/hooks/useUserContext.ts. In this file, you would be implementing the useUserContext custom hook, which will access the UserContext using the useContext hook and return it. | Use the useUserContext custom hook Identify the components that are using the the UserContext. Use useUserContext custom hook in them to get the UserContext instead of directly accessing it using the useContext hook. | . You do not need to write tests for this task, but after completing this task, your frontend should run without any issue. Grading for implementation tasks: . | useAnswerForm: 4 points | useHeader: 4 points | useLoginContext: 4 points | useMainPage: 4 points | useNewQuestion: 4 points | useTagSelected: 4 points | useVoteStatus: 4 points | useUserContext: 4 points | . Task 2: Implement Comment feature (108 points) . In our current software, a missing feature from StackOverflow is the ability to comment on questions and answers. We are going to add Comment feature in this task . Steps to Achieve This . In Server . | Create Schema and Model for Comment Follow the documentation in ./server/models/schema/comment.ts to add fields to the schema. Then, add the comments field in both ./server/models/schema/question.ts and ./server/models/schema/answer.ts. Next, in ./server/models/comments.ts, create and export CommentModel. | Define types for Comment In ./server/types.ts, follow the documentation to create the Comment interface and CommentResponse type. A CommentResponse can be either a Comment or an error message. Next, modify existing interfaces for Question and Answer to add a property for comments. You may also need to modify existing instances of Question and Answer after the change. | Implement saveComment and addComment In ./server/models/application.ts, follow the documentation to implement saveComment and addComment. For addComment, follow existing tests in ./server/tests/application.spec.ts for how to handle errors. Add additional tests for addComment. Make sure that the tests pass before moving on to the next step. | Modify populateDocument and fetchAndIncrementQuestionViewsById In ./server/models/application.ts, modify populateDocument and fetchAndIncrementQuestionViewsById to also populate comments. Make sure that the tests pass before moving on to the next step. | Create AddCommentRequest In ./server/types.ts follow the documentation to create the AddCommentRequest interface. | Create the controller for Comment Follow the documentation to implement all the functions used in the endpoint in ./server/controller/comment.ts. Then, write tests in ./server/tests/comment.spec.ts to test the newly implemented endpoint. Make sure that the tests pass before moving on to the next step. | . After completing the above steps, the backend functionality of Comment should be working. In addition to automated tests, you should also manually test your route using Postman and MongoDBCompass to ensure that your query is correct. In Client . | Define types for Comment In ./client/src/types.ts, follow the documentation to create the Comment interface, then add the comments property for Question and Answer. You may also need to modify existing instances of Question and Answer after the change. | Implement addComment in commentService.ts In ./client/src/services/commentService.ts, implement addComment. It should call the COMMENT_API_URL/addComment to add the comment to the backend database. | Create component for Comment In ./client/src/components/main/commentSection/index.tsx, implement the CommentSection component following the documentation. | Use CommentSection in Answer component ./client/src/components/main/answerPage/answer/index.tsx is the component for an answer. Modify AnswerProps and add CommentSection to the HTML return statement. | Use CommentSection in the Answer Page ./client/src/components/main/answerPage/index.tsx is the page for a question with detailed information. Implement handleNewComment that will be used as the handler in CommentSection. Add error handling as you see fit. Then, update the HTML code to include CommentSection component and the updated Answer component. | . Grading for implementation tasks: Backend: 42 points . | Schema and Model: 4 points | types.ts: 10 points | saveComment: 2 point | addComment: 8 points | populateDocument: 2 point | fetchAndIncrementQuestionViewsById: 2 point | isRequestValid: 2 point | isCommentValid: 2 point | addCommentRoute: 10 points | . Frontend: 40 points . | CommentSection: 28 points | answer: 4 points | answerPage: 8 points | . Testing: 26 points . | addComment: 6 points | addComment route: 20 points | . You can begin to implement these steps in whatever order you see fit, but we would suggest completing them in the order shown in the specification. Task 3: Implement Communications using Socket.IO (40 points) . We are using Socket.IO for some specific communication between the client and the server. For instance, in ./client/src/components/main/questionPage/index.tsx, it is used to listen for real-time updates on questions and answers, allowing the client to automatically update the UI without requiring a manual refresh. Explore the codebase to get familiar with this concept. For this task, you need to implement the missing code in ./client/src/hooks/useVoteStatus.ts and ./server/controller/question.ts for the ability to update votes, and ./client/src/components/main/answerPage/index.tsx and ./server/controller/comments.ts for the ability to update comments. If one of these files is missing, you need to revisit previous tasks to make sure that you create files correctly. Otherwise, search for “TODO: Task 3” in the entire codebase to find all places you need to implement code for this task. You do not need to write tests for this task, but after the implementation, you should be able to view votes and comments changing in real time if you open two webpages at once. Grading for implementation tasks: . | useVoteStatus: 14 points | question.ts: 4 points | answerPage: 14 points | comment.ts: 8 points | . ",
    "url": "/CS4530-Fall-2024/assignments/ip2#implementation-tasks",
    
    "relUrl": "/assignments/ip2#implementation-tasks"
  },"56": {
    "doc": "Individual Project 2",
    "title": "Submission Instructions",
    "content": "Submit your assignment in GitHub classroom, all commits must be visible on the main branch on GitHub classroom to receive credit. Once your submission is pushed to your main branch, GitHub will automatically run the grading script on your submission. Check the Actions tab on GitHub classroom to see the output of the grading script. Refer to the grading section for a detailed breakdown of how your assignment grade will be calculated. ",
    "url": "/CS4530-Fall-2024/assignments/ip2#submission-instructions",
    
    "relUrl": "/assignments/ip2#submission-instructions"
  },"57": {
    "doc": "Individual Project 2",
    "title": "Individual Project 2",
    "content": "Welcome back to the Stack Overflow team! In this second deliverable, you will be implementing new and exciting features to enhance the frontend interface and bring the web application to life. This assignment builds on the foundation you laid in the first project and will deepen your skills in frontend development with TypeScript and React. ",
    "url": "/CS4530-Fall-2024/assignments/ip2",
    
    "relUrl": "/assignments/ip2"
  },"58": {
    "doc": "1 - Orientation & Requirements",
    "title": "1 - Orientation & Requirements",
    "content": "Learning Objectives: . In this lecture, you will learn . | a little about the scope of Software Engineering and how it differs from programming | how this course will be organized, and what will be expected from you each week. | two different ways to solicit and document our users’ requirements | . Important Dates: . | Individual Project 1 Due Wednesday, September 18 by 12pm (Noon) | . Lecture Slides: . | Course Introduction Slides PDF, PPT | Requirements Gathering Slides PDF, PPT | . Activity . | Working with User Stories | . Tutorials . | Installing a Development Environment | Getting Started with TypeScript | User Stories and Conditions of Satisfaction | MongoDb tutorial | Guide to API Requests and Installing Postman | . Resources . | Class Syllabus | Project Overview | . ",
    "url": "/CS4530-Fall-2024/modules/1-requirements-testing",
    
    "relUrl": "/modules/1-requirements-testing"
  },"59": {
    "doc": "10 - Distributed Systems Architectures (Part 1)",
    "title": "10 - Distributed Systems Architectures (Part 1)",
    "content": "Learning Objectives: . In this module, you will learn to: . | Describe 5 key goals of distributed systems | Understand the fundamental constraints of distributed systems | Understand the roles of replication and partitioning in distributing data | . Lecture Slides: . | Distributed Systems: Goals and Challenges Slides PDF, PPT | Distributing Data Slides PDF, PPT | . Important Dates: . | Preliminary Project Plan Due Wednesday, Oct 9 by 12pm (noon) | . Resources . | “Distributed Systems for Fun and Profit” by Mikito Takada | “The CAP FAQ - The Paper Trail” | . ",
    "url": "/CS4530-Fall-2024/modules/10-ds-1",
    
    "relUrl": "/modules/10-ds-1"
  },"60": {
    "doc": "11 - Distributed Systems (Part 2)",
    "title": "11 - Distributed Systems (Part 2)",
    "content": "Learning Objectives: . In this module, you will learn to: . | Recognize common software architectures | Understand tradeoffs of scalability, performance, and fault tolerance between these architectures | Explain the basic principles of the REST and WebSocket communication patterns | . Lecture Slides: . | Distributing Processing Slides PDF, PPT | Case Studies Slides PDF, PPT | Communicaton Patterns Slides PDF, PPT | . Activity . | Activity: Transcript REST Server | . Tutorials . | Tutorial: Socket IO | . Resources . | “Distributed Systems for Fun and Profit” by Mikito Takada | Online book chapter: “Thinking Like a Software Architect” by Christian Kästner | Podcast: “Chris Richardson on Microservice Patterns” - SE Radio | Counterpoint podcast: “Roberta Arcoverde on Stack Overflow’s Monolith” | On NFS: “Operatign Systems, Three Easy Pieces” Chapter 49 by Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau | On GFS: “The Google File System” by Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung, SOSP 2003 | “What is a REST API?” | Socket.io - a library for real-time web applications | . ",
    "url": "/CS4530-Fall-2024/modules/11-distributed-systems-2",
    
    "relUrl": "/modules/11-distributed-systems-2"
  },"61": {
    "doc": "12 - Tests With Larger Scope",
    "title": "12 - Tests With Larger Scope",
    "content": "Learning Objectives: . In this module, you will learn to: . | Design test cases for code using fakes, mocks and spies | Explain why you might need a test double in your testing | Explain why you might need tests that are larger than unit tests | Explain how large, deployed systems lead to additional testing challenges | . Lecture Slides: . | Testing Larger Things Slides PDF, PPT | . Important Dates: . | Individual Project 2 Due Wednesday, Oct 16 by 12pm (noon) | . Tutorials . | Tutorial: Cypress | . Resources . | Software Engineering at Google: “Larger Testing” | Code example from lecture | jest-mock-extended | Aye Spy, visual regression testing | End to End Testing with Cypress | . ",
    "url": "/CS4530-Fall-2024/modules/12-larger-tests",
    
    "relUrl": "/modules/12-larger-tests"
  },"62": {
    "doc": "13 - Continuous Development",
    "title": "13 - Continuous Development",
    "content": "Learning Objectives: . In this module, you will learn to: . | Describe how continuous development helps to catch errors sooner in the software lifecycle | Describe strategies for performing quality-assurance on software as and after it is delivered | Compare and contrast continuous delivery with test driven development as a quality assurance strategy | . Lecture Slides: . | Continuous Development Slides PDF, PPT | . Activity . | Activity: CI/CD Pipeline for FakeStackOverFlow | . Important Dates: . | Revised Project Plan Due Wednesday, Oct 23 by 12pm (noon) | . Resources . | Kent Beck on Software Engineering Daily discussing Facebook Engineering and TDD | “Case Study 4: The $440 Million Software Error at Knight Capital”, Henrico Dolfing | Software Engineering at Google especially the following chapters . | Chapter 23: Continuous Integration | Chapter 24: Continuous Delivery | . | “Rapid release at massive scale” by Chuck Rossi | “Continuous Deployment of Mobile Software at Facebook”, Chuck Rossi et al | . ",
    "url": "/CS4530-Fall-2024/modules/13-continuous-development",
    
    "relUrl": "/modules/13-continuous-development"
  },"63": {
    "doc": "14 - Cloud Infrastructure",
    "title": "14 - Cloud Infrastructure",
    "content": "Learning Objectives: . In this module, you will learn to: . | Explain what “cloud” computing is and why it is important | Explain why multi-tenancy is important in cloud computing | Describe the difference between virtual machines and containers | Discuss trade-offs that you might consider for self or vendor-managed platforms | . Lecture Slides: . | Cloud Infrastructure Slides PDF, PPT | . Resources . | Paper: Large-scale cluster management at Google with Borg (2015) | Heroku | Public Cloud Services Comparison | . ",
    "url": "/CS4530-Fall-2024/modules/14-cloud-infrastructure",
    
    "relUrl": "/modules/14-cloud-infrastructure"
  },"64": {
    "doc": "15 - Security",
    "title": "15 - Security",
    "content": "Learning Objectives: . By the end of this module, you should be able to: . | Define key terms relating to software/system security | Describe some of the tradeoffs between security and other requirements in software engineering | Explain 5 common vulnerabilities in web applications and similar software systems, and describe some common mitigations for each of them. | Explain why software alone isn’t enough to assure security | . Lecture Slides: . | Software Engineering + Security Slides PDF, PPT | . Resources: . | “OWASP Top 10 Web Security Risks” | Try the XSS example on the transcript server (Try it in Edge!) This link might be annoying, but is not malicious. | “Bypassing Airport Security via SQL Injection” | A good video on public and private keys | Report on the eslint 2018 Attack | “Reflections on Trusting Trust” (1984) | “Running the “Reflections on Trusting Trust” Compiler” (2023) | “What are Weak Links in the npm Supply Chain?” | “Why secret detection tools are not enough: It’s not just about false positives - An industrial case study” | “A comparative study of vulnerability reporting by software composition analysis tools” | “Practical Automated Detection of Malicious npm Packages” | Podcast on SolarWinds attack | Security awareness/training activity: OWASP Juice Shop, online demo | . ",
    "url": "/CS4530-Fall-2024/modules/15-security",
    
    "relUrl": "/modules/15-security"
  },"65": {
    "doc": "16 - Open Source",
    "title": "16 - Open Source",
    "content": "Learning Objectives: . In this module, you will learn to: . | Understand the terminology “free software” and explain open source culture and principles. | Express an educated opinion on the philosophical/political debate between open source and proprietary principles. | Reason about the tradeoffs of different open source licenses and business models. | . Lecture Slides: . | Open Source Slides PDF, PPT | . Resources . | Open Sources: Voices from the Open Source Revolution | Why Open Source Misses the Point of Free Software | How Open Source Ate Software: Understand the Open Source Movement and So Much More | MongoDB Licensing FAQ | MongoDB Removed from Debian due to incompatible license | . ",
    "url": "/CS4530-Fall-2024/modules/16-open-source",
    
    "relUrl": "/modules/16-open-source"
  },"66": {
    "doc": "16A - Dependencies",
    "title": "16A - Dependencies",
    "content": "Learning Objectives: . By the end of this module, you should be able to: . | Explain why you need dependencies | Explain the major risks of dependencies | Explain the principles of semantic versioning | Explain what a package manager does | Understand that different package managers may solve dependencies differently | . Lecture Slides: . | Managing Dependencies v1 Slides PDF, PPT | . Resources: . | Semantic Versioning Specification . | | . ",
    "url": "/CS4530-Fall-2024/modules/16a-dependencies",
    
    "relUrl": "/modules/16a-dependencies"
  },"67": {
    "doc": "17 - Ethics and Equity in SE",
    "title": "17 - Ethics and Equity in SE",
    "content": "Learning Objectives: . During this week of the course, you will learn about ethical problems in Software Engineering. You will learn about some of the many unintended consequences of the software we build, and about ways to analyze the ethical problems that are associated with that software. We will also discuss how we can consider human values in the design process to build equitable software. Lecture Slides: . | Engineering Software for Equity Slides PDF, PPT | . Resources . | Software Engineering @ Google, Chapter 4 (Engineering for Equity) | Coverage of Google Photos auto-tagging bug WSJ, and more recent from Wired | COMPAS coverage: The Atlantic, ProPublica, ProPublica data | Price discrimination: WSJ, FairTest | Climate considerations: in NLP, in content delivery networks | Robles v Domino’s Pizza coverage: Eater, Columbia Journal of Law &amp; Social Problems | Citicorp Center Design case study | Therac-25 case study | Value Sensitive Design @ Khoury | ACM software engineering code of ethics, IEEE code of ethics | Web accessibility resources from W3C: WCAG 2.0 specification, evaluating web accessibility | On the origins of the ADA: Judy Heumann memoir, Crip Camp: A Disability Revolution (Netflix) | Podcast: Margaret Burnett on Gender, Cognitive Styles, and Usability Bugs | Solutions to AI image bias raise their own ethical questions | . ",
    "url": "/CS4530-Fall-2024/modules/17-ethics",
    
    "relUrl": "/modules/17-ethics"
  },"68": {
    "doc": "2 - From Requirements to Code",
    "title": "2 - From Requirements to Code",
    "content": "Learning Objectives: . In this lecture, you will learn to: . | Explain the basics of Test-Driven Design | Develop simple applications using Typescript and Jest | Learn more about Typescript and Jest from tutorials, blog posts, and documentation | . Important Dates: . | Individual Project 1 Due Wednesday, September 18 by 12pm (Noon) | . Lecture Slides: . | From Requirements to Code Slides PDF, PPT | . Activity . | TDD Activity Handout | . Tutorials . | Writing Tests with Jest | . Resources . | Podcast: Kent Beck on Software Engineering Daily - An interview with Kent Beck (creator/evangelizer of TDD) about his time at Facebook and the relationship between Facebook and TDD | . ",
    "url": "/CS4530-Fall-2024/modules/2-requirements-to-code",
    
    "relUrl": "/modules/2-requirements-to-code"
  },"69": {
    "doc": "3 - Test Adequacy",
    "title": "3 - Test Adequacy",
    "content": "Learning Objectives: . By the end of this lesson, you should be able to: . | Explain different reasons why you might want to test | Design a TDD test suite by identifying equivalence classes of inputs | Explain the following measures of code coverage, and how they differ: . | Statement or line coverage | Branch coverage | Path coverage | . | Use mutation testing to judge the completeness of a test suite | . Lecture Slides: . | When have I written enough tests? Slides PDF, PPT | . Activity . | Activity: Transcript Server Test Adequacy | . Resources . | Software Engineering at Google: “Testing” | ComAir crew scheduling example | A Decade of Software Model Checking with SLAM | StrykerJS - Mutation Testing Tool | Are mutants a valid substitute for real faults in software testing? | . ",
    "url": "/CS4530-Fall-2024/modules/3-test-adequacy",
    
    "relUrl": "/modules/3-test-adequacy"
  },"70": {
    "doc": "4 - Code-Level Design Principles",
    "title": "4 - Code-Level Design Principles",
    "content": "Learning Objectives: . This lecture is about writing code that other people will be able to understand, reuse, and modify. We’ve distilled this down to five general program-design princples which should be best practices for effective programmers: . | Use Good Names | Make Your Data Mean Something | One Method/One Job | Don’t Repeat Yourself | Don’t Hardcode Things That Are Likely To Change | . In this lecture, you will learn to: . | Describe the purpose of our best practices for code-level design | List 5 principles for designing readable code, with examples | Identify some violations of the practices and suggest ways to mitigate them | . Important Dates: . | Individual Project Deliverable 1 Due Wednesday, September 18 at noon | . Lecture Slides: . | Code-Level Design Principles Slides PDF, PPT | . Activity . | Traffic Light Activity: (Handout) | . Resources . | Code Style Policy for this class | Book: “The Programmer’s Brain” by Felienne Hermans | Resource: “What is cognitive load” | Research paper: I know what you did last summer: an investigation of how developers spend their time, Minelli, Mocci and Lanza | Research paper: A metric for software readability, Buse and Weimer | Research paper: To camelcase or under_score, Dave Binkley et al | . ",
    "url": "/CS4530-Fall-2024/modules/4-code-level-design",
    
    "relUrl": "/modules/4-code-level-design"
  },"71": {
    "doc": "5 - Interaction-Level Design Patterns",
    "title": "5 - Interaction-Level Design Patterns",
    "content": "Learning Objectives: . This lecture is about common patterns for organizing the communication between classes. These are what are often called “OO Design Patterns”. We will see that using such patterns makes OO code more readable and modifiable. By the end of this lesson, you should be able to . | Explain how patterns capture common solutions and tradeoffs for recurring problems. | Give 3 examples of interaction patterns and describe their distinguishing characteristics | Draw a picture or give an example to illustrate each one | . Important Dates: . | Individual Project 1 Due Wednesday, September 18 by 12pm (Noon) | . Lecture Slides: . | Interaction-Level Design Patterns Slides PDF, PPT | . Activities: . | Weather Station Activity Handout | . Resources . | Code Examples from Lecture (zip file) | Design Patterns: Elements of Reusable Object-Oriented Software (1994) This book is quite dated, but it is a foundational text for object-oriented design. It is available from many sources. You could look it up. | Freeman &amp; Robson Head First Design Patterns, 2nd Edition This should be available free to you with your student O’Reilly subscription. | . ",
    "url": "/CS4530-Fall-2024/modules/5-interaction-level-design-patterns",
    
    "relUrl": "/modules/5-interaction-level-design-patterns"
  },"72": {
    "doc": "6 - Concurrency Patterns in Typescript",
    "title": "6 - Concurrency Patterns in Typescript",
    "content": "Learning Objectives: . A 1 GHz CPU executes an instruction every 1 ns. Almost anything else takes approximately forever. Rather than waste time waiting for a long-running operation to complete, we want our programs to make progress on other tasks. This is called “masking latency with concurrency”. In this lecture, we will study some common patterns for organizing concurrency in Typescript/Javascript. By the end of this lesson, you should be prepared to: . | Explain the difference between JS run-to-completion semantics and interrupt-based semantics. | Given a simple program using async/await, work out the order in which the statements in the program will run. | Write simple programs that create and manage promises using async/await | Write simple programs to mask latency with concurrency by using non-blocking IO and Promise.all in TypeScript. | . Important Dates: . | Team Formation Due September 25, 2024 by 12pm (noon) | . Lecture Slides: . | Concurrency Patterns in Typescript Slides PDF, PPT | . Activities: . | Async Activity | . Resources . | Code Examples from Slides | Understanding the Event Loop, Callbacks, Promises, and Async/Await in JavaScript | JavaScript Visualized - Event Loop, Web APIs, (Micro)task Queue | Visualize EventLoop | . ",
    "url": "/CS4530-Fall-2024/modules/6-concurrency-patterns-in-typescript",
    
    "relUrl": "/modules/6-concurrency-patterns-in-typescript"
  },"73": {
    "doc": "7 - Software Process",
    "title": "7 - Software Process",
    "content": "Learning Objectives: . The overall theme of this week’s lessons is software engineering processes: how do we organize our (non-programming) activities so that we can build some software project as efficiently as possible? The lessons will center on these three themes: . | How do we build an effective team? | How do we organize our development activities? | How do we estimate how long a software project will take? | . Important Dates: . | Team Formation Due Sep 25 by 12pm (noon) | . Lecture Slides: . | Teams Slides PDF, PPT | Software Process Slides PDF, PPT | Agile Planning and Estimation Slides PDF, PPT | . Resources . | Postmortem Exercise | . Additional Readings: . The following books provide additional depth on the topics in this week’s lessons: . | Expectations, Outcomes, and Challenges of Modern Code Review | Modern Code Review: A Case Study at Google | Peer interaction effectively, yet infrequently, enables programmers to discover new tools | Do Developers Discover New Tools On The Toilet? | How Social and Communication Channels Shape and Challenge a Participatory Culture in Software Development | The Mythical Man-Month | Head First Agile | eXtreme Programming eXplained | Debugging Teams | . For more reflections on software processes in the 1980’s, David Parnas’ article: “Software Aspects of Strategic Defense Systems”. For a discussion of various xDD approaches, see Rebecca Wirfs-Brock on What Drives Design?. Chuck Rossi’s 2014 Release Engineering Keynote includes some great discussion of Facebook’s mobile release process, now outdated, but quite interesting; there is a discussion of team structure around 18 minutes in. Sarah Mei’s 2018 Power of Agile talk provides a great discussion of embracing agile values that work for your team, while leaving behind toxic practices. Miscellaneous: Investigating the origins of the tire swing meme . ",
    "url": "/CS4530-Fall-2024/modules/7-software-process",
    
    "relUrl": "/modules/7-software-process"
  },"74": {
    "doc": "8 - React",
    "title": "8 - React",
    "content": "Learning Objectives: . This module will provide an introduction to UI development using React. By the end of this module you should be able to: . | Understand how the React framework binds data (and changes to it) to a UI | Create simple React components that use state and properties | . Lecture Slides: . | React Basics Slides PDF, PPT | . Activities . | Activity: Enhancing a TODO Tracker in React | . Tutorials . | Tutorial: Basics of React | . Resources . | Code examples from lecture (zip) | Official documentation for React | Official tutorial materials on React (exhaustive, but really good) | Official tutorial materials on useState | More official tuorial material on useState and arrays | . ",
    "url": "/CS4530-Fall-2024/modules/8-react",
    
    "relUrl": "/modules/8-react"
  },"75": {
    "doc": "9 - React Hooks",
    "title": "9 - React Hooks",
    "content": "Learning Objectives: . Building on Module 8, we will have a deeper discussion of common patterns of programming with React. By the end of this module you should be able to: . | Explain the basic uses of useEffect | Explain when a useEffect is executed, and when its return value is executed | Construct simple custom hooks and explain why they are useful | Be able to map the three core steps of a test (assemble, act, assess) to UI component testing. | . Lecture Slides: . | React Hooks Slides PDF, PPT | . Activity . | No activity this week | . Resources . | Code examples from lecture (zip) | React reference for useEffect | Your First Test With Cypress | testing-library for React | . ",
    "url": "/CS4530-Fall-2024/modules/9-patterns-of-react",
    
    "relUrl": "/modules/9-patterns-of-react"
  },"76": {
    "doc": "Modules",
    "title": "Modules",
    "content": " ",
    "url": "/CS4530-Fall-2024/modules/",
    
    "relUrl": "/modules/"
  },"77": {
    "doc": "Policies",
    "title": "Grading",
    "content": "There will be individual projects (previously known as assignments) and a team project (in a group of 3-4 members). The overall grading breakdown is: . | 30% Individual project (10% for deliverable 1, 20% for deliverable 2) | 40% Team project (including peer evaluations / surveys) | 10% Participation in synchronous, in-class activities | 20% Exam | . Assignment of team project grades: In cases where team members do not equally contribute to the project, we may assign different grades to different individuals, up to an extreme of deducting 50% of the team project grade for a student (which might arise to 100% deduction for not contributing to the project at all). We will evaluate each individual’s contribution on the basis of a variety of factors, including progress reports at weekly meetings, through inspecting version control history, through each students’ self-reflection, and through each students’ peer evaluation {during and/or} at the end of the project. We will make regular efforts to collect and distribute this feedback throughout the project — our ultimate goal is for all students to participate and receive full marks. Assignment of final grades: Although each instructor will use the same lesson plans and assignments, we expect that there may be variation in grades when compared between sections. Hence, each instructor will assign final grades to students in their sections, and reserve the right to apply different curves than are used by the other instructors. With each graded assignment, students will be provided with the distribution of all grades in their section. Grading grievances: If you have concerns regarding the grading of your work, please let us know right away by opening a regrade request. All regrade requests must be submitted within 7 days from your receipt of the graded work. If your regrade request is closed and you feel that the response was not satisfactory, you may appeal to the instructor via email within 48 hours. ",
    "url": "/CS4530-Fall-2024/policies/#grading",
    
    "relUrl": "/policies/#grading"
  },"78": {
    "doc": "Policies",
    "title": "Homework policy",
    "content": "Students must work individually on all homework assignments. We encourage you to have high-level discussions with other students in the class about the assignments, however, we require that when you turn in an assignment, it is only your work. That is, copying any part of another student’s assignment is strictly prohibited, and repercussions for doing so will be severe (up to and including failing the class outright). You are free to reuse small snippets of example code found on the Internet (e.g. via StackOverflow) provided that it is attributed. If you are concerned that by reusing and attributing that copied code it may appear that you didn’t complete the assignment yourself, then please raise a discussion with the instructor. Your work is late if it is not turned in by the deadline. | 10% will be deducted for late assignments turned in within 24 hours after the due date. | Assignments submitted more than 24 hours late will receive a zero. | . If you’re worried about being busy around the time of a HW submission, please plan ahead and get started early. Homework that does not compile or run will receive at most 50% credit. For fairness to all, there are no exceptions to the above rules. ",
    "url": "/CS4530-Fall-2024/policies/#homework-policy",
    
    "relUrl": "/policies/#homework-policy"
  },"79": {
    "doc": "Policies",
    "title": "In Class Activities and Attendance:",
    "content": "Most lectures will feature interactive activities and/or polls that support the material being presented. You must be present in class to participate in the activity or take the poll (participating in an online activity while not attending the synchronous session will be considered academic dishonesty and will be treated harshly). Each instructor may have a different style for assigning participation grades, but historical grading information suggests that each style results in a similar overall grade distribution. Participation grades will be posted on Canvas, and regularly updated. Attendance in the synchronous meetings is expected. Sometimes you cannot avoid missing a class. If you need to be away from class, it is your responsibility to catch up on the materials discussed in the class and inform the instructor to receive credit for any participation. If you join class in person, you are strongly encouraged to bring your laptop or phone to class so that you can participate in the activities. Policy on remote attendance . If you are registered for an on-the-ground section but do not feel comfortable or are unable to attend in person, please contact your instructor in advance of class. We would like to provide the best and most comfortable learning experience, and encourage you to stay at home if advised by a medical professional. ",
    "url": "/CS4530-Fall-2024/policies/#in-class-activities-and-attendance",
    
    "relUrl": "/policies/#in-class-activities-and-attendance"
  },"80": {
    "doc": "Policies",
    "title": "Classroom Environment",
    "content": "To create and preserve a classroom atmosphere that optimizes teaching and learning, all participants share a responsibility in creating a civil and non-disruptive forum for the discussion of ideas. Students are expected to conduct themselves at all times in a manner that does not disrupt teaching or learning. Your comments to others should be constructive and free from harassing statements. You are encouraged to disagree with other students and the instructor, but such disagreements need to respectful and be based upon facts and documentation (rather than prejudices and personalities). The instructors reserve the right to interrupt conversations that deviate from these expectations. Repeated unprofessional or disrespectful conduct may result in a lower grade or more severe consequences. Part of the learning process in this course is respectful engagement of ideas with others. Please don’t be late. You are an essential part of the class. Your participation is an essential part of the class. If you are late, please be courteous to others when entering. BE PRESENT WHEN YOU ARE ATTENDING CLASS. Please do not distract yourself from the class by doing other activities such as phone calls, email, facebook, chat/IM/texting, games, web surfing – unless it has a direct bearing on the course. Then, by all means, surf away! . ",
    "url": "/CS4530-Fall-2024/policies/#classroom-environment",
    
    "relUrl": "/policies/#classroom-environment"
  },"81": {
    "doc": "Policies",
    "title": "Academic Integrity",
    "content": "Students must work individually on all homework assignments. We encourage you to have high-level discussions with other students in the class about the assignments, however, we require that when you turn in an assignment, it is only your work. That is, copying any part of another student’s assignment is strictly prohibited. If you steal someone else’s work, you fail the class. You are responsible for protecting your work. If someone uses your work, with or without your permission, you fail the class. You are free to reuse small snippets of example code found on the Internet (e.g., via StackOverflow) provided that it is attributed. Use of co-pilot is also enrouraged. Use of other generative AI technologies such as ChatGPT is not allowed. If you are concerned that by reusing and attributing that copied code it may appear that you didn’t complete the assignment yourself, then please raise a discussion with the instructor. If you are in doubt whether using others’ work is allowed, you should assume that it is NOT allowed unless the instructors confirm otherwise. To ensure that students have completed the work themselves, instructor might require students to explain the work they have submitted. We will consider adjusting grades based on your understanding of the course material. ",
    "url": "/CS4530-Fall-2024/policies/#academic-integrity",
    
    "relUrl": "/policies/#academic-integrity"
  },"82": {
    "doc": "Policies",
    "title": "Accommodations for Disabilities",
    "content": "Students who have disabilities who wish to receive academic services and/or accommodations should visit the Disability Access Services at 20 Dodge Hall or call (617) 373-2675 (previously known as DRC) Please be sure to provide your instructor with DAS’s accommodations letter early in the semester in order to avoid logistical challenges. This course includes a significant group work including project, and providing extensions for group work can be complex. DAS accomodations often do not apply to group submissions but we encourage you to work with your instructors to see how course staff can provide the support you might need. As-per the DAS’s policy, it is the student’s responsibility to coordinate with the instructor in order to request suitable accommodations. ",
    "url": "/CS4530-Fall-2024/policies/#accommodations-for-disabilities",
    
    "relUrl": "/policies/#accommodations-for-disabilities"
  },"83": {
    "doc": "Policies",
    "title": "Title IX Notice",
    "content": "Title IX of the Education Amendments of 1972 protects individuals from sex or gender-based discrimination, including discrimination based on gender-identity, in educational programs and activities that receive federal financial assistance. Northeastern’s Title IX Policy prohibits Prohibited Offenses, which are defined as sexual harassment, sexual assault, relationship or domestic violence, and stalking. The Title IX Policy applies to the entire community, including students, faculty and staff of all gender identities. Faculty members are considered “responsible employees” at Northeastern University, meaning they are required to report all allegations of sex or gender-based discrimination to the Title IX Coordinator. If you or someone you know has been a survivor of a Prohibited Offense, confidential support and guidance can be found through University Health and Counseling Services staff and the Center for Spiritual Dialogue and Service clergy members. By law, those employees are not required to report allegations of sex or gender-based discrimination to the University. Alleged violations can be reported non-confidentially to the Title IX Coordinator within The Office for Gender Equity and Compliance at: titleix@northeastern.edu and/or through NUPD (Emergency 617.373.3333; Non-Emergency 617.373.2121). Reporting Prohibited Offenses to NUPD does NOT commit the victim/affected party to future legal action. In case of an emergency, please call 911. Please visit www.northeastern.edu/ouec for a complete list of reporting options and resources both on- and off-campus. ",
    "url": "/CS4530-Fall-2024/policies/#title-ix-notice",
    
    "relUrl": "/policies/#title-ix-notice"
  },"84": {
    "doc": "Policies",
    "title": "Policies",
    "content": " ",
    "url": "/CS4530-Fall-2024/policies/",
    
    "relUrl": "/policies/"
  },"85": {
    "doc": "Project Final Deliverable",
    "title": "Project: Final Deliverable Due Tuesday 11/26/2024 12pm (noon) ET",
    "content": "The final project deliverable is the implementation, available in github and deployed on render.com, and the documentation turned in to Canvas. It also includes poster and/or demos. ",
    "url": "/CS4530-Fall-2024/assignments/project-deliverable#project-final-deliverable-due-tuesday-11262024-12pm-noon-et",
    
    "relUrl": "/assignments/project-deliverable#project-final-deliverable-due-tuesday-11262024-12pm-noon-et"
  },"86": {
    "doc": "Project Final Deliverable",
    "title": "Project Implementation and Documentation",
    "content": "Your final team deliverable will be a “release” of your new feature on GitHub (with tests), and will be accompanied by a demo. You will submit the link of your hosted app on Canvas. Contents . Your final team deliverable will include: . | The implementation of your new features, deployed to Render.com / Heroku | Automated tests for your new features | A report that describes how to use your new feature and what was completed vs proposed | A poster and/or demo | . Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own which will include your reflections on the evolution of your project concept, on the software engineering processes you used, and on your team’s dynamics and collaboration. Submission Instructions . Code, documentation and Link . All apps will be deployed on Render/Heroku (instructions for CI/CD pipeline setup are provided separately). After you have pushed all of your code (and documentation) to your team’s GitHub repository, create a release on GitHub, and apply the tag version final-submission. After your release is created, you’ll find that there is now a .zip that can be downloaded from GitHub that contains a snapshot of your entire repository. Download this zip file, unpack it, and follow the instructions that you provided in your README to double-check that the course staff will be able to run your project (this step is handy to make sure that you didn’t forget to include some key files in git). If needed, you can delete the release, make some changes, and re-release up until the deadline. Submit this zip file to Canvas under the assignment “Project: Code Submission” along with the link of your hosted app (in comments or a text file). Submit your report separately to Canvas, under the assignment “Project: Report”. Project Poster &amp; Demo . Each team will submit a poster. Your poster will be a single-page document, that will include the following aspects: . | Short description of the project (OK to reuse text from the project plan/report) | Link to public demo site, link to source repo (OK to make the repo public now, or OK to leave as private) | Short description of the technology stack and overall design decisions | Short description of future work that could build on your project - additional features that you think could be interesting, or ideas for refactoring the code. | Screenshots of the feature, visually demonstrating the main functionality that you implemented. | . We’ve created a sample poster for the “Conversation Areas” feature of Covey.Town, which you might find useful in deciding how to format your poster. It’s fine to use a different aspect ratio (e.g. portrait instead of landscape), and there are no specific requirements for font size or amount of text. Please try to create a document that you feel represents your project, imagine your target audience as a recruiter for a software engineering role: your goal is to demonstrate that you have some experience working on some non-trivial software engineering project. Each Poster must include your group number, names of team members and link to hosted app. In addition, some sections will have live (in-person) demos and others may ask you to record a demo video. Details for project demos and/or presentations are provided separately by each instructor with grading rubric (and may vary from section to section). Posters and/or demo videos and/or presentations will be submitted on Canvas, under the assignment “Project: Poster / Demo”. Project Showcase . We will create a project showcase page for this semester (similar to the one from Spring 2024 semester). You will be asked to indicate your preference (whether you want your project to be posted there or not) by completing a survey (a link will be provided in Canvas assignment “Project: Permission for Showcase Page”). We often direct recruiters to that page. Individual Reflection . Create a PDF of your reflection, and submit it to Canvas, under the assignment “Project: Individual Reflection”. ",
    "url": "/CS4530-Fall-2024/assignments/project-deliverable#project-implementation-and-documentation",
    
    "relUrl": "/assignments/project-deliverable#project-implementation-and-documentation"
  },"87": {
    "doc": "Project Final Deliverable",
    "title": "Grading",
    "content": "Details on grading may be found at Project Grading . ",
    "url": "/CS4530-Fall-2024/assignments/project-deliverable#grading",
    
    "relUrl": "/assignments/project-deliverable#grading"
  },"88": {
    "doc": "Project Final Deliverable",
    "title": "Project Final Deliverable",
    "content": " ",
    "url": "/CS4530-Fall-2024/assignments/project-deliverable",
    
    "relUrl": "/assignments/project-deliverable"
  },"89": {
    "doc": "Final Project Grading",
    "title": "Grading",
    "content": "Each project will be graded by the team’s assigned TA mentor and the instructor. For most of the submission components below, we provide two benchmark rubrics: one for a submission that is satisfactory (full marks), and one that would be meeting our minimum expectations (a pass). In practice, when grading projects we will usually assign numeric grades and provide partial credit, using these rubrics as guidelines for those two extremes. A rubric for the remaining components will be provided by individual instructors. Adjustments in project scope . We are hopeful that all teams will deliver all essential AND desired features proposed in their revised project plans. However, it is possible that there might be some minor deviations from the origional plan - in the five-week implementation period, there are sure to be some teams that encounter unexpected technical hurdles. As described in greater detail in the rubrics below, teams that have regular communication with their TA regarding their project status may have the opportunity to request variances to their project scope. Individual Contributions to the project . In cases where team members do not equally contribute to the project, we may assign different grades to different individuals, up to an extreme of deducting 50% of the marks from a student. In the event that a group member does not contribute at all to the project, student might receive 0. We will evaluate each individual’s contribution on the basis of a variety of factors, including progress reports at weekly meetings, through inspecting version control history, through each team’s (or student’s) peer evaluations during and/or at the end of the project, and through each student’s self-reflection. We will make regular efforts to collect and distribute this feedback throughout the project. Our ultimate goal is for all students to participate and receive full marks. ",
    "url": "/CS4530-Fall-2024/assignments/project-grading#grading",
    
    "relUrl": "/assignments/project-grading#grading"
  },"90": {
    "doc": "Final Project Grading",
    "title": "Summary of grading",
    "content": "From Project Overview . | Planning (20%) . | This includes the Preliminary Project Plan and the Revised Project Plan. | . | Process (20%) . | This includes: use of a structured development process, including code reviews, timely completion of sprint progress reports and individual/team surveys, and weekly meetings with TA Mentor. | This also includes appropriate division of labor within the project. For full credit, each member of the team must have at least 4 commits in the final delivered code. | . | Product (40%) . | 20% Successful delivery of your Minimum Viable Product as defined in your project plan | 10% Additional desirable features | 10% Test suite of your features. | . | Reports (20%) . | 10% Final Report | 10% Poster and Demo | . | Individual Reflection (required to receive an ‘A’) | . This adds up to 100%; this sum is worth 40% of the course grade. ",
    "url": "/CS4530-Fall-2024/assignments/project-grading#summary-of-grading",
    
    "relUrl": "/assignments/project-grading#summary-of-grading"
  },"91": {
    "doc": "Final Project Grading",
    "title": "Detailed Rubrics",
    "content": "Here are the detailed rubrics for the final deliverables: . Minimum Viable Product (20%) . Additional Desirable Features (10%) . We will grade each of these using the following rubric: . Satisfactory: . | Implemented features satisfy the conditions of satisfaction as proposed by the team and as agreed to by the course staff. If technical difficulties resulted in features being dropped, the project may still earn full marks on “delivered features,” but these difficulties must have been documented with the course staff as you encountered them during development. | Implemented features are deployed to a publicly-accessible URL, using Render and/or Heroku for hosting (or as per deployement instructions provided). | Implemented features contain no ESLint warnings or errors; do not include any eslint-disable or ts-ignore flags | . Meets minimum requirements: . | Implemented features largely satisfy acceptance criteria as proposed by the team, but may not meet the course staff’s interpretation of those criteria. | Implemented features are deployed to a publicly-accessible URL, using Render.com and/or Heroku for hosting (or as per deployement instructions provided). | The implementation may have some obvious flaws, but largely works without crashing. | Implemented features do not include any eslint-disable or ts-ignore flag | . Testing (10%) . The project must include evidence of testing (both for front-end and back-end). Ideally, all new features will be accompanied by fully automated tests, but in some circumstances, this may not be feasible. If automated tests are not possible, include a discussion of your manual testing strategy. There is no explicit requirement to make use of any specific testing technology (e.g. mocks, spies, etc.) or library (e.g., cypress). Satisfactory: . | Any new or modified backend features include tests that validate that the feature works as intended. These tests cover the changed code, and also contain well-written assertions that thoroughly check the expected behaviors. | Any new or modified frontend features should be thoroughly tested to validate that the feature works as intended. These tests may be manual. | Tests contains no ESLint warnings or errors; do not include any eslint-disable or ts-ignore flags | . Meets minimum requirements: . | Any new or modified backend features include at least one test, which may or may not be an effective test. | Any new or modified frontend features should be minimally tested. | Tests may contain ESlint warnings (but no errors); does not include any eslint-disable or ts-ignore flags | . Process (20%) . The Process grade includes: use of a structured development process, including code reviews, timely completion of sprint progress reports/retrospectives, individual/team surveys, peer evaluations and weekly meetings with TA Mentor (for Week 6, 8-13). It also includes appropriate division of labor within the project. For full credit, each member of the team must have at least 4 commits in the final delivered code. | Ongoing development progress including code reviews, github commits, issue tracker activity, etc. count 10% of the grade | Peer evaluations, TA meeting, submission of surveys/reports counts 10% of the project grade. These items will be evaluated using the rubrics below. | . Satisfactory: . | There is a clear development history visible from the git repository: features were delivered incrementally, and not in a single (or several) commits at the end of the project | There is evidence of code review - for example, pull requests that have comments on them. Teams are expected to merge their development branches to main only after code review. | There is a correspondence between commit messages and the technical tasks that they are associated with; there are few (if any) commits with meaningless commits messages like . or Add files via upload. | Each team member has made at least 4 commits over the lifespan of the project | The team meets regularly with the TA mentor. All or most members attend all meetings. Members who are absent from a TA Meeting send an excuse in advance. | Progress reports and other weekly reports and surveys are submitted in a timely fashion, not filled in later. | TA Meetings include demos or other evidence of progress. | . Meets minimum requirements: . | There is a clear development history visible from the git repository: features were delivered incrementally, and not in a single (or several) commits at the end of the project | Each team member has made at least 2 commits over the lifespan of the project | Attendance at TA meetings may be irregular, but enough to give the TA a sense of the the team’s progress. | . Individual grading for Process component . Team members with unexcused absences from TA Meetings, or with fewer than 4 commits during the lifespan of the project, may receive a lowered grade for the Process component. Final Report (10%) . The final report should consist of three sections: . | Feature Overview and User Manual | Technical Overview | Process Overview | . The allocation of the 10% credit will be as follows: Overview and manual will be worth 3%, technical and process overviews will be worth 4% and 3% respectively. * Feature Overview and User Manual . Satisfactory: . | The Feature section contains sufficient documentation for a user to build and interact with your updated version of FakeStackOverFlow. | The documentation covers all the steps that a user would need to build a working version of your project. | The documentation includes a link to the deployed version of your project | . | The documentation covers all steps that the user would need to take to exercise all of your user stories. | Screenshots are included that capture the key interactions between a user and your new feature. | Course staff were able to follow these instructions to successfully interact with your project implementation. | URL of the deployed app. | The section is at most 4 pages (roughly 2,000 words maximum), NOT including figures. Fewer pages are absolutely acceptable; consider this a rough limit | . Meets minimum requirements: . | The Feature contains documentation for a user to interact with your updated version of FakeStackOverFlow, but perhaps does not fully describe how. | The documentation includes at least one or two screenshots, but screenshots do not capture interactions with all of the user stories. | The course staff were able to figure out how to use it through trial and error. | URL of the deployed app. | The section is at most 4 pages, NOT including figures. Fewer pages are absolutely acceptable; consider this a rough limit | . * Technical Overview . Satisfactory: . | Technical Overview contains a description of any substantive changes to the existing FakeStackOverFlow codebase, and of the architecture of your new code. | When appropriate, it uses diagrams and/or figures to illustrate a design (there is no requirement to use a specific tool or format for this - students often use lucidchart, draw.io, mermaid or even hand-drawn diagrams). | It provides a well-reasoned rationale for why this is the “right” design. | It provides a table showing the status of all proposed user stories and conditions of satisfaction (proposed vs completed). The status could be fully implemented, partially implementted (feel free to add percentages), not completed. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) excluding the table. | . Meets minimum requirements: . | Technical Overview includes a description of all major changes to the code compared to our existing FakeStackOverFlow codebase. | It provides a table showing the status of all proposed user stories and conditions of satisfaction (proposed vs completed). The status could be fully implemented, partially implementted (feel free to add percentages), not completed. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) excluding the table. | . * Process Overview . Satisfactory: . | Process overview contains a detailed description of the manner in which agile project management processes were used during the project (i.e., sprints, sprint reviews, retrospectives and blameless reviews). | It provides a summary of what was planned to happen in each sprint vs what actually happened, with a discussion of what was revised as a result. | It provides a short list of best practices for the project that you would suggest to future teams. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) | . Meets minimum requirements: . | It provides a summary of what was planned to happen in each sprint vs what actually happened, with a discussion of what was revised as a result. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) | . Posters and Demo (10%) . Each team is required to submit a poster. In addition, some sections may have a demo (live in-person, via zoom or by recorded video). Each instructor has provided details regarding expectations for the demo and/or presentation below. The schedule and manner of these demos might also vary from section to section. The specifications for the different sections are listed below: . | Sections 1, 2, 5, 8 - Prof. Bhutta | Section 9 - Prof. Wand | . Select projects may be hosted in our project showcase. Here are selected projects from the Fall 2022 project showcase, Fall 2023 project showcase and Spring 2024 project showcase. Posters will only be included in the showcase with the team’s permission. ",
    "url": "/CS4530-Fall-2024/assignments/project-grading#detailed-rubrics",
    
    "relUrl": "/assignments/project-grading#detailed-rubrics"
  },"92": {
    "doc": "Final Project Grading",
    "title": "Individual Reflection",
    "content": "Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own. Satisfactory completion of all parts of this reflection is required to receive an “A” grade in the course, and may be used to calibrate project scores across multiple team members. The individual reflection also provides an opportunity for students to provide confidential feedback on the performance of their teammates. Project Concept . Reflect on the evolution of your project concept: How does the project that you delivered compare to what you originally planned to deliver? What caused these deviations? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph describing all variances from original project concept; | Includes at least 1 paragraph of personal reflection on the cause of any variances from the project concept. | . Project Process . Reflect on the evolution of your development process: How did the process by which you designed and implemented evolve from your original project plan? Were there any processes that in hindsight, you wish that you followed, or wish that you followed better? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph describing all variances from the software development processes envisioned in your original project plan; | Includes at least 1 paragraph describing software processes (described in class or not) that you wish you had followed, or wish you had followed better, supported by evidence from your personal experience working on the project. | . Project Team . Reflect on your team dynamic: Provide a frank (and ideally, blameless) postmortem of your and your teammates collaborative performance and participation. If you had to do this same project over with the same teammates, what would you have done differently (or not) to improve your team’s overall performance? Do you think that each of your teammates are deserving of the same grade as you? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph reflecting on your own performance as a team member on this project, including what you would have done differently, given what you know now; | Includes at least 1 paragraph reflecting on your overall team dynamic, including strengths and weaknesses. Reflect on how you might have organized your team differently given what you know now. | . ",
    "url": "/CS4530-Fall-2024/assignments/project-grading#individual-reflection",
    
    "relUrl": "/assignments/project-grading#individual-reflection"
  },"93": {
    "doc": "Final Project Grading",
    "title": "Final Project Grading",
    "content": " ",
    "url": "/CS4530-Fall-2024/assignments/project-grading",
    
    "relUrl": "/assignments/project-grading"
  },"94": {
    "doc": "Project Overview",
    "title": "Project Overview",
    "content": "The individual and team project for this class are designed to mirror the experiences of a software engineer joining a new development team: you will be “onboarded” to our codebase, make several individual contributions, and then form a team to propose, develop and implement new features. The codebase that we’ll be developing on is a Fake Stack Overflow project (let’s call it HuskyFlow). You will get an opportunity to work with the starter code which provides basic skeleton for the app and then additional features will be proposed and implemented by you! All implementation will take place in the TypeScript programming language, using React for the user interface. Overview of Project Deliverables . | Date | Deliverable | Description | . | 09/27/2024 | Team Formation Survey | Specify preferences for teammates | . | 10/02/2024 | Project Kick-off Meeting | Schedule a meeting with your Mentor TA during this week | . | 10/09/2024 | Preliminary Project Plan | Propose a new feature for StackOverflow project that can be planned and implemented within 7 weeks | . | 10/23/2024 | Revised Project Plan | Refine the scope of your feature based on staff feedback, define detailed requirements and project acceptance criteria. | . | 11/26/2024 | Project Delivery - Implementation and Documentation | Deliver/Deploy your new features, including design documentation and tests | . Summary of Project Grading . Your overall project grade (which will account for 40% of your final grade in this course) will be the weighted average of each of the deliverables. | Planning (20%) . | This includes the Preliminary Project Plan and the Revised Project Plan. | . | Process (20%) . | This includes: use of a structured development process, including regular git commits, code reviews, timely completion of progress reports and individual/team surveys, and weekly meetings with TA Mentor. | This also includes appropriate division of labor within the project (i.e., roughly equal). For full credit, each member of the team must have at least 4 commits in the final delivered code. | . | Product (40%) . | 20% Successful delivery of your Minimum Viable Product as defined in your project plan | 10% Desirable delivered features | 10% Test suite of your features. | . | Reports (20%) . | 10% Final Report | 10% Poster and Demo | . | . In cases where team members do not equally contribute to the project, we may assign different grades to different individuals, up to an extreme of deducting 50% of the team project grade for a student (which might arise to 100% deduction for not contributing to the project at all). We will evaluate each individual’s contribution on the basis of a variety of factors, including progress reports at weekly meetings, through inspecting version control history, through each students’ self-reflection, and through each students’ peer evaluations (during and/or at the end of the project). We will make regular efforts to collect and distribute this feedback throughout the project — our ultimate goal is for all students to participate and receive full marks. Team Formation . All projects will be completed in a team of 3-4 students. The very first deliverable for the project will be a team formation survey: you will be able to indicate your preferences for teammates. The instructors will assign students to the teams based on a number of factors including your responses to the survey and diversity of skills for the teammates. All students in each team MUST be in the same section of the class. Team Meetings with TA Mentor . Each team will be assigned a TA to act as a mentor, who will work closely with you for the entire project and also will serve as your point of contact for project questions and grading. During Week 5, you will arrange a “Kickoff Meeting” with your TA mentor, where you will meet your TA mentor and have the opportunity to share any early ideas that you might want feedback on before submitting the your preliminary project plan. Once project begins in full force, you will have weekly meetings with your TA mentor (scheduled at your team’s and the TA’s convenience) in order to help ensure that you are making progress on the project, and to help address problems that you encounter (be they technical or non-technical problems). Preliminary Project Plan . All projects will involve frontend and backend development of new features for FakeStackoverflow. Once teams have been formed, you and your team will decide what kind of new features you would like to build. Your features should be something that can be implemented within the timeframe allotted (5-7 weeks), and will be implemented in a fork of the main codebase. Given that you will be up-to-speed on the project codebase (and have been introduced to TypeScript, React, NodeJS, and testing frameworks), and that you will have a team of three or four, we expect that the feature that you propose will be more complex than the feature implemented in the individual projects. The project plan will focus on two sections: . | User stories and conditions of satisfaction that describe the features that you plan to implement. EACH CONDITION OF SATISFACTION MUST HAVE A PRIORITY (Essential, Desirable, or Optional). The set of essential items will constitute the “Minimum Viable Product” discussed above. | Work breakdown: Map your user stories to engineering tasks. Assign each task to a team member (or pair of team members), provide an estimate for how long each task will take, a brief rationale for that estimate, and schedule those stories into sprints. | . Creating a GitHub Repository . Your team’s development must take place within a GitHub repository in our GitHub Classroom. This repository will be private, and visible only to your team and the course staff. After the semester ends, you are welcome to make it public - you will have complete administrative control of the repository. We will provide instructions to set up these repositories for all groups and will also provide the starter code for the project (after the revised project plans are submitted). Revised Project Plan . Based on the feedback that you receive from the course staff, you will revise your preliminary project plan, creating a more detailed plan to implement your new feature. The project plan will include: . | Revised user stories and conditions of satisfaction (based on feedback on the preliminary project plan) | Revised work breakdown (based on feedback on the preliminary project plan) | . Your team will self-organize, as agile teams do, and will use the work breakdown and schedule as the basis for weekly check-ins with your team’s TA. Software Development Process . Each team is expected to use of a structured development process, including use of pull requests and code reviews for their regular github commits. You will also need to ensure appropriate division of labor within the project (i.e., roughly equal). Teams will also be expected to complete regular progress reports (or sprint retrospectives), and individual/team surveys. Peer evaluation may also be used (for Week 6, 8-13). Please note that one of the most important factors in successfully completing a team project is having effective communication between all team members and stakeholders. Project Implementation and Documentation . Your final team deliverable will be a “release” of your new feature on GitHub (with tests), and will be accompanied by a demo. Your final team deliverable will include: . | The implementation of your new features | Automated tests for your new features | A Final Report | A Poster &amp; Demo (each instructor will provide specifics of the demo, which might vary for each section) | . Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own, which will include your reflections on: . | The evolution of your project concept: How does the project that you delivered compare to what you originally planned to deliver? What caused these deviations? | The software engineering processes that you feel could have been improved in your project: were there any procesess that in hindsight, you wish that you followed, or wish that you followed better? | Your team dynamic: Provide a frank (and ideally, blameless) postmortem of your and your teammates collaborative performance and participation. If you had to do this same project over with the same teammates, what would you have done differently (or not) to improve your team’s overall performance? | . The details for the final project deliverable and associated rubrics will be released by Week 10. ",
    "url": "/CS4530-Fall-2024/assignments/project-overview",
    
    "relUrl": "/assignments/project-overview"
  },"95": {
    "doc": "Preliminary Project Plan",
    "title": "Project Plan Due Wednesday October 9, 12:00pm (noon) ET",
    "content": " ",
    "url": "/CS4530-Fall-2024/assignments/project-plan#project-plan-due-wednesday-october-9-1200pm-noon-et",
    
    "relUrl": "/assignments/project-plan#project-plan-due-wednesday-october-9-1200pm-noon-et"
  },"96": {
    "doc": "Preliminary Project Plan",
    "title": "Change Log",
    "content": ". | 10/8/2024: Updated description that could have been interpreted as students having to build only a single feature for the entire project. | . All projects will involve frontend and backend development of new features for our StackOverflow. Once teams have been formed, you and your team will decide what kind of new features you would like to build. Your features should be something that can be implemented within the timeframe allotted (5 weeks, plus 2 weeks of planning), and will be implemented in a fork of the main codebase. In the coming weeks, we will provide tutorials and instructions for you to run the entire application in a local development environment, and also to deploy it to the cloud. Given that you will be up-to-speed on the StackOverflow codebase (and have been introduced to TypeScript, React, NodeJS, and testing frameworks), and that you will have a team of four, we expect that the features that you propose will be more complex than the features implemented in the individual assignments. Feel free to look at existing systems like Stackoverlow, Quora, reddit and similar stack exchange sites for inspiration on new features to build. Examples of features that students might propose include: . | Allow users to pose and answer questions using Markdown | Allow users to register and save a profile using some SSO tool for authentication | Improve the accessibility of the UI for some class of user (e.g.: screen-reader user, low-vision user, user with color-blindness) | Modify the code so that it is easy to switch to other persistence options: (e.g. Firebase, Supabase, Postgres + GraphQL) | Modify the code to generate secure and documented APIs using tsoa and swagger. | Retarget the client to use the Chakra UI library | Improve the quality of the tests | Add direct messaging and other chat features | Propose some cool app using the infrastructure in the starter code (REST, WebSockets, persistent database) | . Please note that multiple teams might choose to propose the same feature, or a variation of that same feature - this is OK. When considering your project, please keep in mind that you will be allowed to publicly post your project online: while your immediate audience for the project is the course staff, if you are ultimately looking for software engineering jobs or co-ops, this project can be a useful piece of your portfolio. The project plan will include: . | Introductory problem statement | User stories and acceptance criteria: high level description of how users will interact with your new feature. | Work breakdown: Define engineering tasks that will be necessary to implement your new feature. Map each task to a sprint. | . You should plan on spending the next two weeks (from Sep 25 until Oct 9) in a “Sprint -1” in which you will undertake organizational and research tasks to help you decide on a project and formulate your plan. You should be in contact with your assigned TA mentor before you submit the project plan, so they can answer questions and make sure you are on the right track. You may wish to share a draft of your plan with them before October 9 to get early feedback. Your team will self-organize, as agile teams do, and will enhance and adapt its plan during the project lifecycle. As such, the primary goal of this document is to begin the planning process, and not to produce a detailed plan that must be followed precisely. The course staff will provide regular feedback on your project to help ensure that the scope of your project is appropriate. We list page maximums for each section as general guidance of what we are willing to grade. Please do not feel compelled to use all of the pages provided, and remember that a diagram or table can be as expressive (or more) as a comparable amount of text. ",
    "url": "/CS4530-Fall-2024/assignments/project-plan#change-log",
    
    "relUrl": "/assignments/project-plan#change-log"
  },"97": {
    "doc": "Preliminary Project Plan",
    "title": "Problem Statement, User Stories and Acceptance Criteria (max 4 pages)",
    "content": "Your project plan should begin with a 1-3 paragraph introductory problem statement: what problem in StackOverflow does your (proposed) features solve? Provide a paragraph (or two) that describes why you are interested in building these features. Given the problem statement, develop 3 user stories that show how a user would interact with the features. User stories are requirements specified in the following format “As a &lt; type of user &gt;, I want &lt; some goal &gt; so that &lt; some reason &gt;.” My conditions of satisfaction are &lt; list of common cases and special cases that must work &gt;. Your user stories should cover the key behavior or qualities that your features will provide. Each user story should include conditions of satisfaction. Please make sure that your conditions of satisfaction cover all the common cases and can be turned into testable behaviors. Each user story and condition of satisfaction must have a priority (Essential, Desirable, or Optional). The set of Essential items will constitute the “Minimum Viable Product”. Some of the suggested projects above are primarily about some non-functional quality of the code base and have little or no user impact. For these, you may want to write stories of the form “As a project owner, I want …”. You still need to offer a reason why a project owner might want the proposed goal to be accomplished. Do not provide more than three user stories. Your problem statement and description of user stories and conditions of satisfaction should be between 2-4 pages. ",
    "url": "/CS4530-Fall-2024/assignments/project-plan#problem-statement-user-stories-and-acceptance-criteria-max-4-pages",
    
    "relUrl": "/assignments/project-plan#problem-statement-user-stories-and-acceptance-criteria-max-4-pages"
  },"98": {
    "doc": "Preliminary Project Plan",
    "title": "Work Breakdown (max 10 pages)",
    "content": "Given the project concept that you have chosen and the functionality that you expect to implement to satisfy your user stories, define a breakdown of the work that will be necessary to complete the project. A work breakdown includes all of the tasks necessary to accomplish the project, and will be an artifact that we will refer back to throughout the project to evaluate whether you are making satisfactory progress. Consider all of the kinds of tasks that your team will need to perform, including knowledge acquisition, design, implementation, testing and documentation tasks. It is hard to say (generically) how many work items are necessary. Each task on the work breakdown should be assigned to exactly one team member (as primary responsible party), who should provide a “T-Shirt” estimate for how long it will take (along with a justification for that estimate). Consider the dependencies between tests: perhaps an API needs to be designed and specified before implementation can begin; perhaps your development environment needs to be configured before anything else can proceed. Assign tasks to sprints considering these dependencies. Given the preliminary nature of your plan, we do not expect that you will know all of the details about precisely how to implement your feature such that you could break it down into tasks that you feel could be implemented in a day or two. Large tasks (those which you can not provide a responsible estimate for) must be accompanied by smaller “research” tasks that can be performed early on in the project. You may wish to provide deadlines by which the task must either be refined into smaller tasks (based on new knowledge gathered), or reworked/abandoned. For example: Consider if you were proposing the “job advertisement” feature, without the experience of having completed it. It might be difficult to consider how to break down a task like “Implement the frontend components for ad video playback” into something that you could commit to doing within a day or two. Given that this is a task that can be delayed until the end of the project (no other tasks depend on it), it would be wise to consider having some tasks early on in the project, such as: “Find react components that embed video ads,” and “Implement simple video player that does not synchronize playback.” Completing these smaller tasks early would let you both demonstrate that some forward progress is being made, and also allow you to create a much more responsible estimate for how that last, otherwise insurmountably large task would take. Do not wait for your TA feedback to begin this work. You probably know more about the details of your project then they do. It will be helpful for all concerned if your Project Plan lists the major unknowns or things that you expect to need help with– this will help the TA provide more useful feedback for you . Be realistic, and leave time for contingencies (including the time around the midterm exam in week 9). Remember that you will need to have a demo prepared of your feature by project deadline - just 7 weeks from the due date of this assignment. If you are uncertain that some tasks will be feasible, then be sure to include evaluation tasks earlier-on in the project that will allow for “go/no-go” decisions to move forward on a task or drop it. We understand that it is quite difficult to estimate the technical complexity of a new project (as you are doing in the case of this course). We will provide you with feedback on this preliminary project plan, which you will use to produce a revised project plan (due 2 weeks later). Throughout the project period, teams will meet regularly with their dedicated TA Mentor, who will help track progress on a week-to-week basis and help to determine when adjustments to the project scope are needed. Each work item should contain the following information: . | Task to be performed | User story (or stories) that this task relates to | Team member responsible for completing the task | T-shirt size estimate of how long will be needed to complete the task, using the following buckets: . | Small: Can likely be completed by one team member in one sitting of less than 3-4 hours | Medium: Likely to require involvement of multiple team members, over the course of 1-2 days | Large: Currently unable to provide a responsible estimate. | . | A brief (1-2 sentence max) justification of how you reached the size estimate of the task | Milestone for delivering the task, chosen from one of the following: . | Sprint 0: Oct 9-Oct 22 | Sprint 1: Oct 23-Oct 29 (Sprint 1 is just a single week) | Sprint 2: Oct 30-Nov 12 | Sprint 3: Nov 13-Nov 26 | . | . Your work breakdown should take the format of a simple textual list. ",
    "url": "/CS4530-Fall-2024/assignments/project-plan#work-breakdown-max-10-pages",
    
    "relUrl": "/assignments/project-plan#work-breakdown-max-10-pages"
  },"99": {
    "doc": "Preliminary Project Plan",
    "title": "Submission",
    "content": "Your project plan should be submitted as a single PDF in Canvas to the assignment “Preliminary Project Plan.” Each team submits a single document to Canvas. ",
    "url": "/CS4530-Fall-2024/assignments/project-plan#submission",
    
    "relUrl": "/assignments/project-plan#submission"
  },"100": {
    "doc": "Preliminary Project Plan",
    "title": "Grading",
    "content": "The project plan will account for 10% of your project grade, and will be graded out of 100 points. The grading of the project plan is further broken down as follows: . Introductory problem statement (5 points): . | Receive full marks if there is a narrative consisting of 1-3 paragraphs that describes the specific problems that your project aims to solve. | Receive partial credit if the narrative is present, but does not describe the problems that the project aims to solve | . User stories (15 points): . Your user stories taken together will account for 15% of your grade on this assignment. Each user story will be graded as follows: . | Receive full marks if: . | The user story fits the problem statement | The user story satisfies the INVEST criteria for good user stories (construed quite broadly) | The user story contains a priority (essential, desirable, extension). | The user story includes conditions of satisfaction that cover the “normal” expected behavior of the feature, and any important error cases | Each condition of satisfaction is marked with a priority (essential, desirable, extension). | . | . The user stories must be numbered (1,2,3) and each the conditions of satisfaction must likewise be numbered (1.1, 1.2, 1.3) and laid out in a table for easy reference. Remember that you will get full credit for delivering a minimum viable product (MVP) only if you deliver working implementations of all of your essential user stories and conditions of satisfaction. Work breakdown (80 points): . Your work breakdown will be evaluated holistically on the following rubric: . Coverage of tasks needed (20 points): . Receive full marks if the work breakdown includes all (reasonably expected) tasks to implement your feature, considering these kinds of tasks: . | Background research | Design of interfaces and data types | Deployment of third-party services | Implementation | Testing | Documentation | . It is not possible to state generically for all projects whether all of the above types of tasks are necessary. However, we believe that this list is exhaustive (we do not expect other kinds of tasks). Assignment of tasks (10 points): . Receive full marks if: . | Each element on the work breakdown is assigned to one team member | The distribution of tasks of each size are roughly similar between the whole team (no single person is assigned significantly more or fewer tasks of one size) | . Sizing of tasks (40 points): . Receive full marks if each element on the work breakdown: . | Has a size estimate (small, medium, or large) that is provided by the team member assigned the task. | Has a responsible justification for that estimation | Every “large” task: . | Is accompanied by a reasonable explanation of why the team is unable to provide a responsible estimate | Is accompanied by at least one small or medium task, scheduled well-before the “large” task is due to be completed. We would expect that most of these research tasks are scheduled to sprint 0, or perhaps sprint 1. | . | . Scheduling of tasks (10 points): . Receive full marks if each element on the work breakdown: . | Is assigned to a sprint | There are no obvious constraint violations (tasks that logically must happen before others should be scheduled before them) | There are no “Large” tasks scheduled in sprint 0 | . ",
    "url": "/CS4530-Fall-2024/assignments/project-plan#grading",
    
    "relUrl": "/assignments/project-plan#grading"
  },"101": {
    "doc": "Preliminary Project Plan",
    "title": "Preliminary Project Plan",
    "content": " ",
    "url": "/CS4530-Fall-2024/assignments/project-plan",
    
    "relUrl": "/assignments/project-plan"
  },"102": {
    "doc": "Other Resources",
    "title": "Other Resources",
    "content": "There are many articles, blogs, books and podcasts that are very interesting for more reading on the topics discussed in class. We’ll update this list as the semester goes, and if you have suggestions of materials to share, please let us know and we’ll add it to the list. Podcasts . The Software Engineering Radio podcast (also available wherever you get your podcasts) aims to produce educational material for professional softare developers, and includes conversations between experts and researchers on various software engineering topics. Here are a few of our favorites that are most relevant to topics that we cover in this class: . | Donny Nadolny on Debugging Distributed Systems, with Robert Blumen, 2017 | Jafar Soltani on Continuous Delivery for Multiplayer Games, with Nate Black, 2018 | Chris Richardson on Microservice Patterns, with Robert Blumen, 2019 | Margaret Burnett on Gender, Cognitive Styles and Usability Bugs, with Felienne Hermans, 2019 | Michaela Greiler on Code Reviews, with Felienne Hermans, 2020 | Ipek Ozkaya on Managing Technical Debt, 2021 | . Code style . | Research paper: To camelcase or under_score, Dave Binkley et al | Research paper: I know what you did last summer: an investigation of how developers spend their time, Minelli, Mocci and Lanza | Research paper: A metric for software readability, Buse and Weimer | Book (free via library): “Refactoring: Improving the Design of Existing Code” By Martin Fowler The definitive list of “code smells” that should be avoiding in programming, matched up with “refactoring” techniques to improve that code | . Debugging . | Book (free via library): “Effective Debugging: 66 Specific Ways to Debug Software and Systems” by Diomidis SpinellisA helpful guidebook for debugging, laying out different strategies that are effective for testing different kinds of debugging hypotheses. | . Design Patterns . | Book (free via library): “Design Patterns Explained: A New Perspective on Object-Oriented Design” by Alan Shalloway and James TrottIn-depth coverage of design patterns, considering why they are important in software development, how to apply them, and descriptions of some common patterns. | Book (free via library): “Refactoring to Patterns” by Joshua KerievskyA unification of the classic Gang of Four Design Patterns work with Fowler’s refactoring work, with practical example of how to introduce patterns into existing code bases to improve code quality. | “Fundamentals of Software Architecture” By Mark Richards and Neal Ford An overview of software architectural patterns and their role in successful software projects. | . Infrastructure + Operations . | Book (free via library) “Site Reliability Engineering” By Betsy Beyer, Chris Jones, Niall Richard Murphy, Jennifer Petoff Site Reliability Engineering is a topic very related to software engineering: while software engineers might focus primarily on the design and development of software systems, SRE’s are engineers who focus on the deployment, monitoring and maintenance of that software. This book documents the SRE practices at Google. | . JavaScript . | Book (free via library): “Modern JavaScript for the Impatient” by Cay Horstmann | . Program Understanding . | Book: “The Programmer’s Brain” by Felienne Hermans A survey of research on programming and cognition, covering topics such as how to read code more effectively and how to write code that is easier to read and share. | . ",
    "url": "/CS4530-Fall-2024/resources/",
    
    "relUrl": "/resources/"
  },"103": {
    "doc": "Revised Project Plan",
    "title": "Revised Project Plan Due Wednesday October 23, 12:00pm (noon) ET",
    "content": "You should use the feedback on your preliminary project plan to revise the scope of your project, and discuss any changes with your assigned TA. The goal of this assignment is to finalize the intended scope of your project based on these discussions and to outline the tasks that you will need to accomplish in order to complete your project. Your assigned TA mentor will review your project plan and provide you with feedback on the scope and details provided in your preliminary plan. In this deliverable, you will revise your project plan based on that feedback, and any preliminary research tasks that you have completed. If there were any deficiencies or concerns noted by your TA mentor on your preliminary plan, you must address those concerns in this revised plan. If you are unsure of how to address any of these concerns or if you have addressed them, please discuss them with your TA mentor before submitting this revised plan. We list page maximums for each section as general guidance of what we are willing to grade. Please do not feel compelled to use all of the pages provided, and remember that a diagram or table can be as expressive (or more) as a comparable amount of text. ",
    "url": "/CS4530-Fall-2024/assignments/revised-project-plan#revised-project-plan-due-wednesday-october-23-1200pm-noon-et",
    
    "relUrl": "/assignments/revised-project-plan#revised-project-plan-due-wednesday-october-23-1200pm-noon-et"
  },"104": {
    "doc": "Revised Project Plan",
    "title": "Revised Problem Statement, User Stories and Acceptance Criteria (max 4 pages)",
    "content": "Your revised project plan should begin with a 1-3 paragraph introductory problem statement: what problem in FakeStackOverflow does your (proposed) feature(s) solve? Provide a paragraph (or two) that describes why you are interested in building the feature(s). Given the problem statement, develop three user stories that show how a user would interact with the feature(s). User stories are requirements specified in the format “As a &lt; type of user &gt;, I want &lt; some goal &gt; so that &lt; some reason &gt;.” My conditions of satisfaction are &lt; list of common cases and special cases that must work &gt;. Please make sure that your conditions of satification are complete (i.e., cover all common cases) and can be turned into testable behaviors. EACH USER STORY MUST HAVE ONE OR MORE ESSENTIAL AND DESIRABLE CONDITION(S) OF SATISFACTION. The set of essential items will constitute the “Minimum Viable Product”. EACH CONDITION OF SATISFACTION MUST HAVE A PRIORITY (Essential, Desirable, or Optional). You should include three different user stories to describe how users will interact with your feature(s). Your three user stories should cover the key behavior that your feature(s) will provide. Do not provide more than three user stories. Your problem statement and description of user stories and conditions of satisfaction should be between 2-4 pages. This revised project plan should be a standalone document (it is OK to copy/paste from the preliminary plan in this case). ",
    "url": "/CS4530-Fall-2024/assignments/revised-project-plan#revised-problem-statement-user-stories-and-acceptance-criteria-max-4-pages",
    
    "relUrl": "/assignments/revised-project-plan#revised-problem-statement-user-stories-and-acceptance-criteria-max-4-pages"
  },"105": {
    "doc": "Revised Project Plan",
    "title": "Revised Work Breakdown (max 10 pages)",
    "content": "Given the project concept that you have chosen and the functionality that you expect to implement to satisfy your user stories, define a breakdown of the work that will be necessary to complete the project. This breakdown is required for all essential, desirable and optional tasks. A work breakdown includes all of the tasks necessary to accomplish the project, and will be an artifact that we will refer back to throughout the project to evaluate whether you are making satisfactory progress. Consider all of the kinds of tasks that your team will need to perform, including knowledge acquisition, design, implementation, testing and documentation tasks. It is hard to say (generically) how many work items are necessary. Each task on the work breakdown should be assigned to exactly one team member (as primary responsible party), who should provide a “T-Shirt” estimate for how long it will take (along with a justification for that estimate). Feel free to assign a second person as secondary responsible party (if you plan to use pair programming) but make clear who has primary responsibility. Consider the dependencies between tests: perhaps an API needs to be designed and specified before implementation can begin; perhaps your development environment needs to be configured before anything else can proceed. Assign tasks to sprints considering these dependencies. Given the preliminary nature of your project, we do not expect that you will know all of the details about precisely how to implement your feature(s) such that you could break it down into tasks that you feel could be implemented in a day or two. Large tasks (those which you can not provide a responsible estimate for) must be accompanied by smaller “research” tasks that can be performed early on in the project. You may wish to provide deadlines by which the task must either be refined into smaller tasks (based on new knowledge gathered), or reworked/abandoned. In keeping with the agile philosophy, you should plan on spending these two weeks of the project (from February 14 until February 28) in a “Sprint 0” in which you will undertake tasks you previously planned including those that help you improve your project plan. For example: Consider if you were proposing the “Viewing Area” project (the individual project), without the experience of having completed it. It might be difficult to consider how to break down a task like “Implement the frontend components for sychnronized video playback” into something that you could commit to doing within a day or two. Given that this is a task that can be delayed until the end of the project (no other tasks depend on it), it would be wise to consider having some tasks early on in the project, such as: “Find react components that embed YouTube videos,” and “Implement simple video player that does not synchronize playback.” Completing these smaller tasks early would let you both demonstrate that some forward progress is being made, and also allow you to create a much more responsible estimate for how that last, otherwise insurmountably large task would take. Do not wait for your TA feedback to begin this work. You probably know more about the details of your project then they do. It will be helpful for all concerned if your Project Plan lists the major unknowns or things that you expect to need help with– this will help the TA provide more useful feedback for you . Be realistic, and leave time for contingencies (including the time around the midterm exam). Remember that you will need to have a demo prepared of your feature(s) by project deadline - just 5 weeks from the due date of this assignment (not counting spring break). If you are uncertain that some tasks will be feasible, then be sure to include evaluation tasks earlier-on in the project that will allow for “go/no-go” decisions to move forward on a task or drop it. We understand that it is quite difficult to estimate the technical complexity of a new project (as you are doing in the case of this course). Throughout the project period, teams will meet regularly with their dedicated TA Mentor, who will help track progress on a week-to-week basis and help to determine when adjustments to the project scope are needed. Each work item should contain the following information: . | Task to be performed | User story (or stories) that this task relates to | Team member responsible for completing the task | T-shirt size estimate of how long will be needed to complete the task, using the following buckets: . | Small: Can likely be completed by one team member in one sitting of less than 3-4 hours | Medium: Likely to require involvement of multiple team members, over the course of 1-2 days | Large: Currently unable to provide a responsible estimate. | . | A brief (1-2 sentence max) justification of how you reached the size estimate of the task | Milestone for delivering the task, chosen from one of the following: . | Sprint 0: Oct 9-Oct 22 | Sprint 1: Oct 23-Oct 29 (Sprint 1 is just a single week) | Sprint 2: Oct 30-Nov 12 | Sprint 3: Nov 13-Nov 26 | . | . Your work breakdown may take the format of a simple textual list. Mandatory update for all teams: Even if your work breakdown is entirely unchanged compared to the preliminary plan, please be certain to include updates on all “sprint 0” tasks (those which were scheduled to be completed before the due date of this revised plan). Many teams included research/learning tasks in the first week to help inform the rest of the work breakdown: you should be certain to revise your work breakdown based on what you have learned so far. Please note that in order to receive full credit for the final delivered product, each team is expected to deliver Minimum Viable Product (marked as essential) as well as additional feature(s) proposed in the project plan (marked as desirables). Please plan your work accordingly. ",
    "url": "/CS4530-Fall-2024/assignments/revised-project-plan#revised-work-breakdown-max-10-pages",
    
    "relUrl": "/assignments/revised-project-plan#revised-work-breakdown-max-10-pages"
  },"106": {
    "doc": "Revised Project Plan",
    "title": "Submission",
    "content": "Your revised project plan should be submitted as a single PDF on Canvas under the assignment “Revised Project Plan.” Each team submits a single document. Make sure that your team number is added to the title of the document. ",
    "url": "/CS4530-Fall-2024/assignments/revised-project-plan#submission",
    
    "relUrl": "/assignments/revised-project-plan#submission"
  },"107": {
    "doc": "Revised Project Plan",
    "title": "Grading",
    "content": "The revised project plan will account for 10% of your project grade, and will be graded out of 100 points. The grading of the revised project plan is further broken down as follows: . Introductory problem statement (5 points): . | Receive full marks if there is a narrative consisting of 1-3 paragraphs that describes a specific problem that your project aims to solve. | Receive partial credit if the narrative is present, but does not describe a problem that the project aims to solve | . User stories (45 points): . Each of the three user stories will account for 5% of your grade on this assignment and will begraded as follows: . | Receive full marks if: . | The user story fits the problem statement | The user story satisfies the INVEST criteria for good user stories (construed quite broadly) | The user story includes conditions of satisfaction that cover the “normal” expected behavior of the feature(s), and any relevant error cases | Conditions of satisfaction can be turned into Testable behaviors | Conditions of satisfaction are prioritized | Each user story includes one or more condition of satisfaction marked with essential, desirable and extension priority. | Any deficiencies or concerns noted by your TA mentor on your preliminary plan are addressed | . | . Work breakdown (50 points): . Your work breakdown will be evaluated holistically on the following rubric: . Coverage of tasks needed (20 points): . Receive full marks if the work breakdown includes all (reasonably expected) tasks to implement your feature(s), considering these kinds of tasks: . | Background research | Design of interfaces and data types | Deployment of third-party services | Implementation | Testing | Documentation | . It is not possible to state generically for all projects whether all of the above types of tasks are necessary. However, we believe that this list is exhaustive (we do not expect other kinds of tasks). Assignment of tasks (5 points): . Receive full marks if: . | Each element on the work breakdown is assigned to one team member | The distribution of tasks of each size are roughly similar between the whole team (no single person is assigned significantly more or fewer tasks of one size) | Any deficiencies or concerns noted by your TA mentor on your preliminary plan are addressed | . Sizing of tasks (20 points): . Receive full marks if each element on the work breakdown: . | Has a size estimate (small, medium, or large) that is provided by the team member assigned the task. | Has a responsible justification for that estimation | Every “large” task: . | Is accompanied by a reasonable explanation of why the team is unnable to provide a responsible estimate | Is accompanied by at least one small or medium task, scheduled well-before the “large” task is due to be completed. We would expect that most of these research tasks are scheduled to sprint -1, or perhaps sprint 0. | . | Any deficiencies or concerns noted by your TA mentor on your preliminary plan are addressed | . Scheduling of tasks (5 points): . Receive full marks if each element on the work breakdown: . | Is assigned to a sprint | There are no obvious constraint violations (tasks that logically must happen before others should be scheduled before them) | There are no “Large” tasks scheduled in sprint 0 | Tasks scheduled to be completed before 3/1 have an update as to their status, and the work breakdown is updated to reflect the result of these tasks. | Any deficiencies or concerns noted by your TA mentor on your preliminary plan are addressed | . ",
    "url": "/CS4530-Fall-2024/assignments/revised-project-plan#grading",
    
    "relUrl": "/assignments/revised-project-plan#grading"
  },"108": {
    "doc": "Revised Project Plan",
    "title": "Revised Project Plan",
    "content": " ",
    "url": "/CS4530-Fall-2024/assignments/revised-project-plan",
    
    "relUrl": "/assignments/revised-project-plan"
  },"109": {
    "doc": "Section 1 - Calendar",
    "title": "Section 1 - Calendar",
    "content": " ",
    "url": "/CS4530-Fall-2024/calendar/s1",
    
    "relUrl": "/calendar/s1"
  },"110": {
    "doc": "Section 2 - Calendar",
    "title": "Section 2 - Calendar",
    "content": " ",
    "url": "/CS4530-Fall-2024/calendar/s2",
    
    "relUrl": "/calendar/s2"
  },"111": {
    "doc": "Section 5 - Calendar",
    "title": "Section 5 - Calendar",
    "content": " ",
    "url": "/CS4530-Fall-2024/calendar/s5",
    
    "relUrl": "/calendar/s5"
  },"112": {
    "doc": "Section 8 - Calendar",
    "title": "Section 8 - Calendar",
    "content": " ",
    "url": "/CS4530-Fall-2024/calendar/s8",
    
    "relUrl": "/calendar/s8"
  },"113": {
    "doc": "Section 9 - Calendar",
    "title": "Section 9 - Calendar",
    "content": " ",
    "url": "/CS4530-Fall-2024/calendar/s9",
    
    "relUrl": "/calendar/s9"
  },"114": {
    "doc": "Calendar",
    "title": "Calendar",
    "content": "Given the synchronization amongst the sections, and the academic calendar starting on a Wednesday, the course material generally is designed to run on weeks from Wednesday-Tuesday. We provide a schedule for each section: . ",
    "url": "/CS4530-Fall-2024/calendar/",
    
    "relUrl": "/calendar/"
  },"115": {
    "doc": "Staff",
    "title": "Staff",
    "content": "For technical questions related to the codebase, please check piazza first (or post a query there). For discussing the course material or the individual projects, please feel free to attend whichever TA’s office hours are convenient. For project-related questions, please coordinate a time to chat directly with your assigned project mentor. ",
    "url": "/CS4530-Fall-2024/staff/",
    
    "relUrl": "/staff/"
  },"116": {
    "doc": "Staff",
    "title": "Office Hours",
    "content": "All TA office hours will be held virtually. We will explore the options of holding in-person office hours too, subject to interest from students/TAs and availability of a room. Instructor office hours may be held in-person or remotely. TA Office Hours are hosted on Microsoft Teams, using the Khoury Office Hours app. Please see the user guide for information on how to log in and ask questions. ",
    "url": "/CS4530-Fall-2024/staff/#office-hours",
    
    "relUrl": "/staff/#office-hours"
  },"117": {
    "doc": "Staff",
    "title": "Schedule",
    "content": " ",
    "url": "/CS4530-Fall-2024/staff/#schedule",
    
    "relUrl": "/staff/#schedule"
  },"118": {
    "doc": "Staff",
    "title": "Instructors",
    "content": "Adeel Bhutta . a.bhutta@northeastern.edu . Section: CS4530 Sections 1, 2, 5 &amp; 8 . Office Hours: . | In-Person: Mondays 11am-1140am and Thursdays 140pm-230pm, Meserve 337 | or Book an appointment with me for a Virtual meeting | . Mitch Wand . wand@ccs.neu.edu . Section: CS4530 Section 9 . Office Hours: . | on Zoom, directly following class | . ",
    "url": "/CS4530-Fall-2024/staff/#instructors",
    
    "relUrl": "/staff/#instructors"
  },"119": {
    "doc": "Staff",
    "title": "Teaching Assistants",
    "content": "Anikesh Ganesh Kamath . kamath.ani@northeastern.edu . Aryan Jain . jain.aryan@northeastern.edu . Bhupesh Digambar Patil . patil.bhu@northeastern.edu . Harikrishnan Unnikrishna Pillai . unnikrishnapillai.h@northeastern.edu . Hongyi Zhang . zhang.hongyi@northeastern.edu . Ngoc Khanh Vy Le . le.ngoc@northeastern.edu . Nishy Ann Tomy . tomy.ni@northeastern.edu . Rumjhum Singru . singru.r@northeastern.edu . Samuel Tomlinson . tomlinson.sa@northeastern.edu . Sanjana Poojary . poojary.sa@northeastern.edu . Sharan Parikh . parikh.shar@northeastern.edu . Srinivasa Pavan Kumar Danaboina . danaboina.s@northeastern.edu . Vatsal Mehta . mehta.vats@northeastern.edu . Vihar Gunamgari . gunamgari.s@northeastern.edu . ",
    "url": "/CS4530-Fall-2024/staff/#teaching-assistants",
    
    "relUrl": "/staff/#teaching-assistants"
  },"120": {
    "doc": "Code Style",
    "title": "Code Style",
    "content": "Programs are easier to read and to understand when they are written in a familiar style and follow standard coding conventions. Most organizations that develop software therefore require programmers to write programs that follow the organization’s preferred style and coding conventions. These conventions can be very elaborate. Many of the guidelines are, in fact, arbitrary. When you are working on a coding project with other developers, different developers often have preference for slightly different syntax, for instance: should our string literals be enclosed by single quotes (') or double quotes (\")? Should files be indented with spaces or tabs? In TypeScript, there are often multiple ways to accomplish the same goal, for instance, you could create a new empty array with the expression const myArray = new Array(), or const myArray = []. Sometimes there is no difference between these variants except for how it reads, and other times there may be unintended consequences of making the seemingly correct but subtly wrong choice. Thankfully, it is possible to write automated checkers (and, at times, fixers) for these style violations. All code that you write for this class will be checked by ESLint, and must be free of style warnings and errors. Our ESlint rules are derived from Airbnb’s JavaScript Style Guide, ESLint’s Recommended Rules, TypeScript/ESLint Recommended Rules, React ESLint Rules and React Hooks ESLint Rules. We do not suggest studying these lists directly, instead, begin writing code naturally, and allow your IDE’s built-in style checker to report issues as you find them. The most important rules to get started are: . | Indent using spaces, not tabs; use 2 spaces for each level of indentation | Enclose all string literals with single quotes, not double | Variables must be named using lowerCamelCase, types are named using UpperCamelCase. Constants (read-only variables that are assigned a static value once and not reused) must be named using UPPER_CASE_WITH_UNDERSCORES. | The maximum line length is 100 characters | . Naming . While the linter can automatically flag names that violate camelCase rules, it can not automatically determine that a name is “good” - this is a subjective judgement call. Please consider the following when choosing names: . | Names should be informative (e.g lineTooLong() rather than checkLineLength()) | Names for types are typically nouns or noun phrases. Interface names, however, might be adjectives (e.g. Serializable). Class names may be noun phrases that include the interface name (e.g. CuckooClock and DigitalClock for classes that implement the interface Clock). | Use noun-like names for functions or methods that return values (e.g. circleDiameter rather than calculateDiameter). (Exception: simple getters can still have names that begin with get). | Reserve verb-like names for functions that perform actions (e.g. addItem). | Use adjective phrases for predicates when possible (e.g. line.tooLong()) | Variable and property names should be descriptive of what the variable is for, and not be named after the type of the variable (which is captured in the variable’s type declaration) | Names for properties that are private must start with a _ | . Documentation and Comments . All public properties and methods (other than getters, setters, and constructors) must be documented using JSDoc-style comments that describes what the property/method does. Example: . /** The unique identifier for this player * */ private readonly _id: string; . /** * A handler to process a remote player's subscription to updates for a room * * @param socket the Socket object that we will use to communicate with the player */ . Consider adding comments within your code to describe non-obvious behavior, or to capture why the code is written the way that it is. Do not add comments that simply restate what can already be immediately discerned by reading the code. For example, here is a useful comment: . // No valid session exists for this token, hence this client's connection should be terminated socket.disconnect(true); return; . Here is a useless comment on the same code snippet: . // Disconnect the socket socket.disconnect(true); return; . Comments are for documentation, not for keeping track of old code you are no longer using (do not submit commented-out code). ",
    "url": "/CS4530-Fall-2024/policies/style/",
    
    "relUrl": "/policies/style/"
  },"121": {
    "doc": "Textbooks",
    "title": "Textbooks",
    "content": "This class is a survey of many sub-areas of software engineering, and an unfortunate result of this is that there is no single textbook that is appropriate for this class. However, there are several texts that have chapters that are quite relevant, and most of these books are available for free for Northeastern students through O’Reilly’s Safari Books online. To create your account, first visit this page: https://www.safaribooksonline.com/library/view/temporary-access/ and then select “Not Listed? Click Here” for institution, then enter your @northeastern.edu email address. After this first account creation, you’ll be able to log in directly to Safari Books Online with your @northeastern.edu email and no need for 2FA (hooray!). The schedule will list which chapters of which texts are relevant for each lecture: . | “Software Engineering at Google” By Titus Winters, Tom Manshreck and Hyrum Wright This book is effectively a manual that describes the software engineering practices at Google, and the rationale behind those practices | “Effective Software Testing: A Developer’s Guide” by Mauricio Aniche (Not on Safari) A focused discussion of software testing concepts, with concrete examples using popular Java testing frameworks. | “The Programmer’s Brain” by Felienne Hermans (Not on Safari) A survey of research on programming and cognition, covering topics such as how to read code more effectively and how to write code that is easier to read and share. | “Fundamentals of Software Architecture” By Mark Richards and Neal Ford An overview of software architectural patterns and their role in successful software projects. | “Refactoring: Improving the Design of Existing Code” By Martin Fowler The definitive list of “code smells” that should be avoiding in programming, matched up with “refactoring” techniques to improve that code | “Learn React with TypeScript 3” by Carl RipponA solid reference for React, describing how to get started, plus more advanced features like React’s Router and testing using Jest | “Programming TypeScript” by Boris ChernyA useful introduction to TypeScript, written assuming familiarity with programming in languages like Java, C# or python. | . ",
    "url": "/CS4530-Fall-2024/textbooks/",
    
    "relUrl": "/textbooks/"
  },"122": {
    "doc": "Tutorials",
    "title": "Tutorials",
    "content": " ",
    "url": "/CS4530-Fall-2024/tutorials/",
    
    "relUrl": "/tutorials/"
  },"123": {
    "doc": "Guide to API Requests and Installing Postman",
    "title": "Tutorial: Guide to API Requests and Installing Postman",
    "content": " ",
    "url": "/CS4530-Fall-2024/tutorials/week1-apirequests-postman#tutorial-guide-to-api-requests-and-installing-postman",
    
    "relUrl": "/tutorials/week1-apirequests-postman#tutorial-guide-to-api-requests-and-installing-postman"
  },"124": {
    "doc": "Guide to API Requests and Installing Postman",
    "title": "Contents",
    "content": ". | Introduction to API Requests and Postman | Breakdown of an API Request | Steps to Install Postman | Using Postman: Basic Steps | Saving API Requests and Using History | Organizing Requests into Collections | Recommended Tools | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-apirequests-postman#contents",
    
    "relUrl": "/tutorials/week1-apirequests-postman#contents"
  },"125": {
    "doc": "Guide to API Requests and Installing Postman",
    "title": "Introduction to API Requests and Postman",
    "content": "APIs (Application Programming Interfaces) are essential tools that allow different software applications to communicate with each other. As developers, it’s crucial to understand how to interact with APIs, which involves making API requests. API requests are structured interactions where one software sends a request to retrieve or send data to another. Postman is a popular API testing tool that allows developers to build, test, and modify APIs quickly and easily. It provides an interface to interact with APIs and simplifies API development. Postman supports making requests like GET, POST, PUT, DELETE, and more. With this guide, you can: . | Understand the basics of API requests, including the different types (GET, POST, PUT, DELETE). | Learn how to use Postman to send requests and test APIs. | Test API responses to ensure that they return the expected results. | . Types of API Requests: . | GET: Retrieves data from an API. It’s commonly used when you want to fetch information without making any changes. | Example: Use a GET request to retrieve a list of videos related to the one you’re currently watching on a streaming platform (e.g., GET /videos/related). | . | POST: Submits new data to an API to create a resource. It’s used when you need to send data to the server to create something new. | Example: Use a POST request to save a newly uploaded video on a platform (e.g., POST /videos). | . | PUT: Updates an existing resource on the API. It’s used when you want to modify an existing item or data. | Example: Use a PUT request to update the details of an existing video, like changing its title or description (e.g., PUT /videos/{id}). | . | DELETE: Removes a resource from an API. It’s used when you need to delete something from the server. | Example: Use a DELETE request to remove a video you’ve uploaded from the platform (e.g., DELETE /videos/{id}). | . | . Each of these request types serves a specific purpose in API interactions, and Postman allows you to easily switch between them to test and build your APIs. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-apirequests-postman#introduction-to-api-requests-and-postman",
    
    "relUrl": "/tutorials/week1-apirequests-postman#introduction-to-api-requests-and-postman"
  },"126": {
    "doc": "Guide to API Requests and Installing Postman",
    "title": "Breakdown of an API Request",
    "content": "Each API request has key components: . 1. URL . For this URL -&gt; https://localhost:8000/api/users . The URL defines the location of the API you’re interacting with: . | Protocol (https://) | Domain (localhost) | Port (8000) | Endpoint (/api/users) | . 2. Method . Defines the action type: . | GET: Retrieves data | POST: Submits new data | PUT: Updates data | DELETE: Deletes data | . 3. Parameters (GET) vs. Body (POST) . | GET sends data as query parameters in the URL: https://api.example.com/users?age=25 In this example, age=25 is a query parameter used to filter the list of users. | POST sends data in the body (usually JSON): . { \"username\": \"newuser\", \"email\": \"newuser@example.com\" } . | . 4. Headers . Headers provide additional information about the request or the client making it. They help the server understand the request. Some common headers include: . | Content-Type: Specifies the format of the request body (e.g., application/json for JSON data). | Authorization: Contains credentials like API keys or tokens required to access certain endpoints. | Example: Authorization: Bearer &lt;your-api-token&gt; . | . | Accept: Specifies the format in which the client expects the server to return the response (e.g., application/json). | Example: Accept: application/json . | . | . 5. Response . After the server processes the request, it sends back a response. The response typically includes: . | Status Code: A number indicating the result of the request. | Common status codes: . | 200 OK: The request was successful. | 201 Created: The resource was successfully created (used for POST requests). | 400 Bad Request: There was an error in the request. | 404 Not Found: The resource could not be found. | 500 Internal Server Error: An error occurred on the server. | . | . | Response Body: Contains the data returned by the API, usually in JSON format. For example, when creating a new user, the server might return a response like this: { \"id\": 1, \"username\": \"newuser\", \"email\": \"newuser@example.com\" } . | . Mozilla documentation for reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-apirequests-postman#breakdown-of-an-api-request",
    
    "relUrl": "/tutorials/week1-apirequests-postman#breakdown-of-an-api-request"
  },"127": {
    "doc": "Guide to API Requests and Installing Postman",
    "title": "Steps to Install Postman",
    "content": "Step 1: Download Postman . | Open your web browser and navigate to the official Postman website: https://www.postman.com/downloads/. | Select the version that is compatible with your operating system (Windows/macOS). If you’re using a Mac, be sure to download the version that corresponds to your system’s chip (Intel or Apple). | Click the “Download” button. | . Step 2: Install Postman . For Windows: . | Once the download is complete, find the setup file in your downloads folder (typically named Postman-win64-setup.exe). | Double-click the file to start the installation. | Follow the on-screen instructions to complete the installation. Postman will install automatically and open once the process is finished. | . For macOS: . | Open the downloaded .dmg file. | Drag the Postman app icon into the “Applications” folder. | Once copied, go to your Applications folder and double-click the Postman icon to launch the app. | . Step 3: Create an Account (Optional but Recommended) . Once Postman is installed: . | Open the Postman application. | You will be prompted to sign in or create a Postman account. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-apirequests-postman#steps-to-install-postman",
    
    "relUrl": "/tutorials/week1-apirequests-postman#steps-to-install-postman"
  },"128": {
    "doc": "Guide to API Requests and Installing Postman",
    "title": "Using Postman: Basic Steps",
    "content": "Step 0: Ensure your backend is running . Step 1: Launch Postman . After installation, launch Postman. You’ll see a workspace where you can start creating requests. Step 2: Make Your First API Request . | Click on the “New” button at the top-left and select HTTP. | . | In the request window, choose the type of request method (GET, POST, PUT, DELETE) from the dropdown menu (default is GET). | Enter the URL of the API you want to test in the input field (e.g., http://localhost:8000/question/getQuestionById/67062b6dd9d59b115c559096). Ensure that the ID is valid and belongs to one of the questions in the database. | . | To send a POST request you need to enter the URL (e.g., http://localhost:8000/question/addQuestion) and include the Body as well. | Go to the Body tab. | Select raw. | Choose JSON as the format. | Enter the JSON data in this format: { \"title\": \"How do I use Postman?\", \"text\": \"I am trying to build an API using TypeScript, but I'm unable to test using Postman. How do I do this?\", \"tags\": [ { \"name\": \"Postman\", \"description\": \"API testing tool that allows developers to send HTTP requests.\" } ], \"asked_by\": \"Pavan Kumar\", \"ask_date_time\": \"2024-10-08T12:00:00.000Z\", \"answers\": [], \"views\": 0, \"up_votes\": [], \"down_votes\": [] } . | . | Click the Send button. | . Step 3: View the Response . | After clicking “Send,” Postman will display the API response below the request window. | You will see the Status Code, Response Body, Headers, and Cookies (if applicable). | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-apirequests-postman#using-postman-basic-steps",
    
    "relUrl": "/tutorials/week1-apirequests-postman#using-postman-basic-steps"
  },"129": {
    "doc": "Guide to API Requests and Installing Postman",
    "title": "Saving API Requests and Using History",
    "content": "One of Postman’s key features is the ability to save API requests for future use. This can save you time when testing or working on multiple endpoints. Additionally, Postman keeps track of your request history, allowing you to quickly revisit previous requests without re-entering all the details. To learn more about using Postman’s history, visit: Postman History. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-apirequests-postman#saving-api-requests-and-using-history",
    
    "relUrl": "/tutorials/week1-apirequests-postman#saving-api-requests-and-using-history"
  },"130": {
    "doc": "Guide to API Requests and Installing Postman",
    "title": "Organizing Requests into Collections",
    "content": "Postman also allows you to save and organize requests into collections. A collection is essentially a folder where you can store multiple requests, making it easier to manage large projects and share API workflows with your team. For more information on creating and using collections, refer to the Postman documentation: Postman Collections. These features enhance your ability to efficiently manage, organize, and track your API development process within Postman. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-apirequests-postman#organizing-requests-into-collections",
    
    "relUrl": "/tutorials/week1-apirequests-postman#organizing-requests-into-collections"
  },"131": {
    "doc": "Guide to API Requests and Installing Postman",
    "title": "Recommended Tools",
    "content": "In addition to using the Postman desktop app, you can also integrate Postman with Visual Studio Code through the Postman extension. This extension allows you to send API requests directly from your code editor. You can find the extension and its documentation here: Postman VS Code Extension. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-apirequests-postman#recommended-tools",
    
    "relUrl": "/tutorials/week1-apirequests-postman#recommended-tools"
  },"132": {
    "doc": "Guide to API Requests and Installing Postman",
    "title": "Guide to API Requests and Installing Postman",
    "content": " ",
    "url": "/CS4530-Fall-2024/tutorials/week1-apirequests-postman",
    
    "relUrl": "/tutorials/week1-apirequests-postman"
  },"133": {
    "doc": "Installing a Development Environment",
    "title": "Installing NodeJS",
    "content": "Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. For this class, you will need Node.js version 20 (20.17.0 was the latest version at time of writing, although any 20.x should work in theory). There are many ways that you can install Node.js: for instance, you can use a package manager like snap or homebrew to install it; you can download an installer directly from the Node.js website, and you can, of course, build it from source. However, due to the complexity of running different Node.js versions on the same machine, we very strongly suggest using nvm, as explained below. We recommend installing Node.js using nvm, the node version manager. When language runtimes are in active development (like Node.js is), sometimes you end up needing to have multiple versions of Node.js installed, and different projects that you work on might require different versions of Node.js. These annoyances are quite rare, but when it happens that you need to have mutliple versions of Node.js installed, it’s super handy to have your system set up already so that installing multiple versions and switching between it is easy. You can use our instructions to set up nvm even if you have previously installed Node.js. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#installing-nodejs",
    
    "relUrl": "/tutorials/week1-getting-started#installing-nodejs"
  },"134": {
    "doc": "Installing a Development Environment",
    "title": "Installing NodeJS with NVM for Windows",
    "content": "Before starting the installation, make sure to kill your Visual Studio Code if you have it installed. To do that on Windows, open a command prompt(type cmd in the windows start bar, then select “Run as administrator”) and run the command taskkill.exe /IM code.exe. | Download nvm-setup.zip from the most recent release of nvm-windows (at time of writing this document, version was 1.1.12). | . | Extract the contents of nvm-setup.zip and run the executable nvm-setup.exe. | This should open the nvm installation wizard. | . | Accept the license agreement and click next. Continue to accept the default choices for any remaining prompts, and click “install”. If you receive messages along the lines of “NodeJS version XYZ is already installed, would you like nvm to control this installation,” select “Yes”. | Upon completion, you will see the below window . | . | Open a command prompt with administrative privileges (type cmd in the windows start bar, then select “Run as administrator”). | Verify the installation, run the command nvm version . | This should display the version of nvm installed. | | . | Install Node.js version 20 using the command nvm install 20. | To use this version of NodeJS, run the command nvm use 20. | . | . Troubleshooting with VSCode: Did you follow these instructions successfully, but find a “Command not found” error when you try to run npm in VSCode? Try this: Close VSCode completely. Re-open it. In your command shell in VSCode, try again. We have noticed that if you have VSCode open while installing nvm, it is possible that VSCode will not see the new software installation until it’s closed and re-opened. You can also confirm that VSCode correctly sees the NodeJS installation by running echo %PATH% in your windows command shell in VSCode: it should include an entry similar to C:\\Program Files\\nodejs. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#installing-nodejs-with-nvm-for-windows",
    
    "relUrl": "/tutorials/week1-getting-started#installing-nodejs-with-nvm-for-windows"
  },"135": {
    "doc": "Installing a Development Environment",
    "title": "Installation Steps (Linux / Mac)",
    "content": ". | Run either curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash or If wget is installed then run wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash. | Close and reopen the active terminal. Note: You can also restart your terminal by running source ~/.bashrc or source ~/.zshrc depending on your shell. | Verify nvm is working by entering command -v nvm. If your terminal prints out nvm, it should be working. If you see nvm: command not found or no feedback, open a new terminal and trying again or restart from step 1. | Install the required version of Node.js by typing nvm install 20. | . Installing NVM when using the fish terminal (Linux / Mac) . Note: When using the Fish terminal, nvm.fish should be used to install nvm. This is not a fish wrapper for nvm rather it is written from scratch using fish. Current version of NVM is not supported on terminals that are running fish or have installed fish in the past. | Install nvm.fish using Fisher: fisher install jorgebucaran/nvm.fish | Restart fish by entering fish in your active terminal | Verify nvm is working by entering nvm -v | Install the required version of Node.js by typing nvm install 20. | . Working with MacOS M1 Silicon: If you have macOS on M1 Silicon 2022, you can find instructions here. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#installation-steps-linux--mac",
    
    "relUrl": "/tutorials/week1-getting-started#installation-steps-linux--mac"
  },"136": {
    "doc": "Installing a Development Environment",
    "title": "Verification",
    "content": ". | Open a shell (for Linux / Mac) or windows powershell/command prompt (for Windows). | Run the command node -v . | This should print the current version of nodeJS installed (20.x.x). | . | Run the command npm -v . | This should print the current version of npm installed (v10.x.x). | | . | If you find that some other version is being used, run the command nvm use 20. For Linux / Mac, you can change the default to 20 by running the command nvm alias default 20. | . Note: The alias command is not compatible with nvm.fish. Instead, you can add a default version with the command exec nvm use 20 in your ~/.config/fish/config.fish file. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#verification",
    
    "relUrl": "/tutorials/week1-getting-started#verification"
  },"137": {
    "doc": "Installing a Development Environment",
    "title": "Installing Visual Studio Code (VSCode)",
    "content": "Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity). VSCode also supports importing hotkey configurations from most other text editors and IDEs. Read more here. While you are required to use an IDE for this class, it is not mandatory to use VSCode: if you already are comfortable developing TypeScript or JavaScript in another suitable IDE (like IntelliJ), then you are welcome to continue to use that. However, VSCode is the “supported” option: if you struggle to get things like the linter set up correctly in VSCode, we will be happy to help you. However, we can’t provide such support for all IDEs. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#installing-visual-studio-code-vscode",
    
    "relUrl": "/tutorials/week1-getting-started#installing-visual-studio-code-vscode"
  },"138": {
    "doc": "Installing a Development Environment",
    "title": "Pre-requisites",
    "content": ". | Administrative access on the host machine for software installation. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#pre-requisites",
    
    "relUrl": "/tutorials/week1-getting-started#pre-requisites"
  },"139": {
    "doc": "Installing a Development Environment",
    "title": "Installation Steps (Windows / Mac)",
    "content": ". | Download the VSCode installer from the VSCode website. | . | Run the installer to start the installation wizard for VSCode . | . | Accept the license agreement and click next. | . | Choose the installation directory of your choice and click next. | . | Click next on the select start menu folder screen. | . | Tick all check boxes on the select additional tasks menu and click next. | . | Review the settings on the the “Ready to install” screen and click Install to begin installation. | Once the installation is complete, you will see the below screen and you are ready to use VSCode. | . | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#installation-steps-windows--mac",
    
    "relUrl": "/tutorials/week1-getting-started#installation-steps-windows--mac"
  },"140": {
    "doc": "Installing a Development Environment",
    "title": "Installation (Linux)",
    "content": ". | The above instructions for Windows/Mac should also work, but VSCode is also provided as a snap package | . | Install snap if you haven’t already by running sudo apt update and then sudo apt install snapd. | Install VSCode by running sudo snap install --classic code. | Open VSCode as an application on your desktop. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#installation-linux",
    
    "relUrl": "/tutorials/week1-getting-started#installation-linux"
  },"141": {
    "doc": "Installing a Development Environment",
    "title": "Additional Extensions (Optional)",
    "content": "VSCode comes with a rich set of extensions to aid in software development. Below is a list of extensions that you may find useful. | GitLens - Git Supercharged | Prettier - code formatter | vscode-icons | ESLint | Andromeda (Color theme: Andromeda Colorizer) | Jest Runner (highly recommended) | GitHub Copilot and GitHub Copilot Chat | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#additional-extensions-optional",
    
    "relUrl": "/tutorials/week1-getting-started#additional-extensions-optional"
  },"142": {
    "doc": "Installing a Development Environment",
    "title": "Installing Extensions (eg. ESLint)",
    "content": ". | Click on the extensions tab on the left in VSCode. | Search ESLint. | Click on Install. | Done! . | . | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#installing-extensions-eg-eslint",
    
    "relUrl": "/tutorials/week1-getting-started#installing-extensions-eg-eslint"
  },"143": {
    "doc": "Installing a Development Environment",
    "title": "Additional Settings (Optional)",
    "content": "You may find it useful to add some settings: . | Turn on “bracket pair colorization” (in File &gt; Preferences &gt; Settings) | Add a keybinding for formatting the current selection (in File &gt; Preferences &gt; Keyboard Shortcuts &gt; Format Selection ) | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#additional-settings-optional",
    
    "relUrl": "/tutorials/week1-getting-started#additional-settings-optional"
  },"144": {
    "doc": "Installing a Development Environment",
    "title": "Getting Started With Typescript",
    "content": "Typescript is a superscript of JavaScript which adds type information and other features. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#getting-started-with-typescript",
    
    "relUrl": "/tutorials/week1-getting-started#getting-started-with-typescript"
  },"145": {
    "doc": "Installing a Development Environment",
    "title": "Pre-requisites",
    "content": ". | NodeJS | VSCode (recommended but not required) | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#pre-requisites-1",
    
    "relUrl": "/tutorials/week1-getting-started#pre-requisites-1"
  },"146": {
    "doc": "Installing a Development Environment",
    "title": "Hello World",
    "content": ". | Create a new directory and open it with VSCode. | Create a new file called hello-world.ts. | You can do this from within VSC by typing ctrl + N, but this is not necessary. | . | Add the following code to the file: console.log('Hello, World!'); . | Open the terminal with ctrl + ~ or ctrl + ‘`’ (ctrl-backtick) . | Ensure that you are in the same directory as hello-world.ts. | . | Install typescript by running the command npm install --save typescript . | This will install Typescript locally in the current directory. | . | Run the command npx ts-node hello-world.ts. | If you are prompted, enter y. | This will give the result below. | | . | . Troubleshooting with VSCode: Did you follow these instructions successfully, but find a “Command not found” error when you try to run npm in VSCode? Try this: Close VSCode completely. Re-open it. In your command shell in VSCode, try again. We have noticed that if you have VSCode open while installing nvm, it is possible that VSCode will not see the new software installation until it’s closed and re-opened. You can also confirm that VSCode correctly sees the NodeJS installation by running echo %PATH% in your windows command shell in VSCode: it should include an entry similar to C:\\Program Files\\nodejs. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started#hello-world",
    
    "relUrl": "/tutorials/week1-getting-started#hello-world"
  },"147": {
    "doc": "Installing a Development Environment",
    "title": "Installing a Development Environment",
    "content": "This tutorial describes the basic steps needed to set up a development environment with NodeJS, TypeScript, and VisualStudio Code. At the end of this tutorial, you should have a complete local development environment that you can use to build and test code for this class. Contents: . | Installing NodeJS | Installing Visual Studio Code | Hello, World in TypeScript | . If you run into any difficulties following any of these steps, please post (in a non-private question) on Piazza. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-getting-started",
    
    "relUrl": "/tutorials/week1-getting-started"
  },"148": {
    "doc": "MongoDB and Mongoose",
    "title": "A mini-tutorial on MongoDB and Mongoose",
    "content": "This tutorial provides basic introduction to MondoDB and Mongoose: . Contents: . | MongoDB Concepts | Mongoose representation of MongoDB Concepts | Databases, Collections, and Documents | ObjectIDs and References | Queries | Examples | Resources | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-mongodb-mongoose#a-mini-tutorial-on-mongodb-and-mongoose",
    
    "relUrl": "/tutorials/week1-mongodb-mongoose#a-mini-tutorial-on-mongodb-and-mongoose"
  },"149": {
    "doc": "MongoDB and Mongoose",
    "title": "MongoDB Concepts",
    "content": ". | An installation consists of a set of named databases. | A database consists of a set of named collections. | A collection consists of a set of documents. | A document is a set of (property,value) pairs. | A schema is a set of (property,type) pairs. All of the documents in a single collection should satisfy the same schema. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-mongodb-mongoose#mongodb-concepts",
    
    "relUrl": "/tutorials/week1-mongodb-mongoose#mongodb-concepts"
  },"150": {
    "doc": "MongoDB and Mongoose",
    "title": "Mongoose representation of MongoDB Concepts",
    "content": "Databases, Collections, and Documents . Mongoose provides representations of MongoDB concepts in the TypeScript/JavaScript language. | In any given program mongoose refers to a particular database in a particular MongoDB instance. For example, executing | . await mongoose.connect(\"mongodb://127.0.0.1:27017/pets\"); . causes mongoose to refer to the pets database in the local MongoDB instance. | A MongoDB schema is represented in Mongoose by an object of class mongoose.Schema. For example, executing | . const kittySchema = new mongoose.Schema({ name: String, color: String, }); . causes kittySchema to represent a Mongo schema with a single property, name, of type String. References to other documents are represented by properties with type Types.ObjectID (more on this later) . In this document, we will use the terms ‘property’ and ‘field’ interchangeably. | A MongoDB collection of documents is represented in Mongoose by a TypeScript constructor created by mongoose.model. For example | . const Kitten = mongoose.model(\"Kitten\", kittySchema); . causes Kitten to refer to a collection named ‘Kitten’ in the current instance; all the documents in the Kitten collection should satisfy the schema represented by kittySchema. | A document with schema M is represented by a TypeScript object created by saying new C, where C is constructor created by mongoose.model. For example | . const fluffy = new Kitten({ name: \"fluffy\", color: \"black\" }); . creates a document intended for insertion in the collection named Kitten. | In Mongoose, creation of a document is separate from being inserted in a collection. So to actually insert fluffy in the Kitten collection, we need to execute | . await fluffy.save(); . Note that most of the operations that touch the database are asyncs. ObjectIDs and References . In MongoDB, every document has a unique identifier, which is kept in its _id field. Queries . In Mongoose, a query is a recipe for retrieving documents from a collection. There are lots of ways to do this. Here are some that work (for a collection called Dogs) . Dog.find(); // finds all documents in the `Dog` collection Dog.findOne({ name: \"Buddy\" }); // finds one of the dogs named 'Buddy' Dog.find({ breed: \"Labrador\" }); // finds all dogs of the given breed . These are all asyncs, so you need to await them. The query syntax offers lots of methods for selecting, sorting, etc. Take a look at this example, which two very different ways of writing the same query: . // With a JSON doc Person.find({ occupation: /host/, \"name.last\": \"Ghost\", age: { $gt: 17, $lt: 66 }, likes: { $in: [\"vaporizing\", \"talking\"] }, }) .limit(10) .sort({ occupation: -1 }) .select({ name: 1, occupation: 1 }) .exec(callback); // Using query builder Person.find({ occupation: /host/ }) .where(\"name.last\") .equals(\"Ghost\") .where(\"age\") .gt(17) .lt(66) .where(\"likes\") .in([\"vaporizing\", \"talking\"]) .limit(10) .sort(\"-occupation\") .select(\"name occupation\") .exec(callback); . For small projects like the one in the course, it is probably preferable to use the simplest Mongoose queries you can, and then process the list of documents that the query returns. There are some circumstances where it is helpful to the query do more work. Consider, for example, the following excerpt from models/application.ts . const q = await QuestionModel.findOneAndUpdate( { _id: new ObjectId(qid) }, { $inc: { views: 1 } }, { new: true } ).populate({ path: \"answers\", model: AnswerModel }); return q; . Here we are give an objectID qid. The call to .findOneAndUpdate first finds a document whose _id field matches qid. It then calls the document’s $inc method to increment its views field by 1. The default behavior of findOneAndUpdate is to return the original (unmodified) document. But that’s not what we wanted here, so we add a third argument { new: true } to return the updated document. All that would be hard to do except by making it part of findOneAndUpdate. Examples . A simple example (i.e, example.ts) can be accessed here. Resources . | Official Mongoose/TypeScript docs | Mongoose Queries | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-mongodb-mongoose#mongoose-representation-of-mongodb-concepts",
    
    "relUrl": "/tutorials/week1-mongodb-mongoose#mongoose-representation-of-mongodb-concepts"
  },"151": {
    "doc": "MongoDB and Mongoose",
    "title": "MongoDB and Mongoose",
    "content": " ",
    "url": "/CS4530-Fall-2024/tutorials/week1-mongodb-mongoose",
    
    "relUrl": "/tutorials/week1-mongodb-mongoose"
  },"152": {
    "doc": "Typescript Basics",
    "title": "Typescript Basics",
    "content": "This tutorial describes the basic concepts and syntax of typescript with code examples. Typescript is treated here as an extension of JavaScript, but it requires no prior knowledge to follow along. You can run the examples on Online Typescript Editor . Contents: . | Types in Typescript . | Boolean | Number | BigInt | String | Arrays | Tuples | Enums | Any | Unknown | Literal | . | Variable declaration in typescript | Objects | Control Flow Statements . | Equality vs Strict Equality | . | Loops | Array Functions . | ForEach | Map | Filter | Reduce | . | Functions . | Typing the function | Invoking the function | Optional and Default Parameters | Rest Parameters | Functions as Constructors | Arrow Functions | Function Overloads | . | Classes . | Creating a class | Creating an abstract class | . | Type Aliases | Interfaces | Custom types | Generics | Modules | Object oriented programming concepts using typescript . | Inheritance | Polymorphism | Abstraction | Encapsulation | . | General Guidelines | tsconfig | . Typescript is a superset of JavaScript. Thus, all JavaScript code is valid Typescript code. Typescript introduces concepts of optional typing, modules, and few additional features to Javascript. Let us begin by extending JavaScript to use the features of Typescript and primitive types. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics",
    
    "relUrl": "/tutorials/week1-typescript-basics"
  },"153": {
    "doc": "Typescript Basics",
    "title": "Types in typescript",
    "content": "Boolean . The boolean type has two values: true and false. Example: . let a = true // boolean var b = false // boolean const c = true // true let d: boolean = true // boolean let e: true = true // true . | Usage: You can compare them (with ==, ===, ||, &amp;&amp;, and ?), negate them (with !). | . Number . Number is the set of all numbers: integers, floats, positives, negatives, Infinity, NaN. Example: . var b = Infinity * 0.10 // number const c = 5678 // 5678 let d = a &lt; b // boolean let e: number = 100 // number let f: 26.218 = 26.218 . | Usage: Numbers can do things, like addition (+), subtraction (-), modulo (%), and comparison (&lt;). When working with long numbers, use numeric separators to make those numbers easier to read. | . BigInt . The bigint type is the set of all BigInts, and supports things like addition (+), subtraction (-), multiplication (*), division (/), and comparison (&lt;). Example: . let a = 1234n // bigint const b = 5678n // 5678n var c = a + b // bigint let d = a &lt; 1235 // boolean let e = 88.5n // Error TS1353: A bigint literal must be an integer. let f: bigint = 100n // bigint let g: 100n = 100n . | Usage: It lets you work with large integers without running into rounding errors. While the number type can only represent whole numbers it can hold numbers larger than 253 – 1. | . String . String is the set of all strings and the things you can do with them like concatenate (+), slice (.slice),etc. Example: . let a: string = 'hello' // string let b: string = 'world' // string let c: string = a + ' ' + b // string . | Usage: Any functionality that requires the functionality of a string of characters. Here are a couple of string operations: | . charAt() : This method returns the character from the specified index. Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string, called stringName, is stringName.length – 1. Syntax: . string.charAt(index) . slice() : This method extracts a section of a string and returns a new string. Syntax: . string.slice( beginSlice [, endSlice]) . split() : This method splits a String object into an array of strings by separating the string into substrings. Syntax: . string.split([separator][, limit]) . concat(): This method adds two or more strings and returns a new single string. Syntax: . string.concat(string2, string3[, ..., stringN]) . indexOf(): This method returns the index within the calling String object of the first occurrence of the specified value, starting the search at index or -1 if the value is not found. Syntax: . string.indexOf(searchValue[, fromIndex]) . Arrays . Like in JavaScript, TypeScript arrays are special kinds of objects that support things like concatenation, pushing, searching, and slicing. Arrays are iterable Objects with the keys as numbers. Example: . let a = [1, 2, 3] // number[] var b = ['a', 'b'] // string[] let c: string[] = ['a'] // string[] let d = [1, 'a'] // (string | number)[] const e = [2, 'b'] // (string | number)[] let f = ['red'] f.push('blue') let g = [] // any[] g.push(1) // number[] g.push('red') // (string | number)[] let h: number[] = [] // number[] h.push(1) // number[] . Tuples . Tuples are subtypes of array. They’re a special way to type arrays that have fixed lengths, where the values at each index have specific, known types. Unlike most other types, tuples have to be explicitly typed when you declare them. Example: . let a: [number] = [1] // A tuple of [first name, last name, birth year] let b: [string, string, number] = ['malcolm', 'gladwell', 1963] . | Usage: In TypeScript Tuples support optional elements too. Just like in object types, ? means “optional”. Tuples also support rest elements, which you can use to type tuples with minimum lengths. Not only do tuple types safely encode heterogeneous lists, but they also capture the length of the list they type. | . Enums . Enums are a way to enumerate the possible values for a type. They are unordered data structures that map keys to values. Example: . enum Language { English, Spanish, Russian } . | Usage: There are two kinds of enums: enums that map from strings to strings, and enums that map from strings to numbers. Use it when you wish to provide flexibility making it easier to express and document intentions and use cases or when you want to save compile-time and runtime with inline code. | . Any . The any data type is the super type of all types in TypeScript. It denotes a dynamic type. Using the any type is equivalent to opting out of type checking for a variable. Example: . let a: any = 666 // any let b: any = ['danger'] // any let c = a + b // any . | Usage: In TypeScript everything needs to have a type at compile time, and any is the default type when you (the programmer) and TypeScript (the typechecker) can’t figure out what type something is. It’s a last resort type, and you should avoid it when possible. | . Unknown . If any is the Godfather, then unknown is Keanu Reeves as undercover FBI agent Johnny Utah in Point Break: laid back, fits right in with the bad guys, but deep down has a respect for the law and is on the side of the good guys. You can compare unknown values (with ==, ===, &amp;&amp;, and ?), and refine them (like you can any other type) with JavaScript’s typeof and instanceof operators. Example: . let a: unknown = 30 // unknown let b = a === 123 // boolean . | Usage: For the few cases where you have a value whose type you really don’t know ahead of time, don’t use any, and instead reach for unknown. Like any, it represents any value, but TypeScript won’t let you use an unknown type until you refine it by checking what it is. | . Literal . In addition to standard types like boolean or number, TypeScript also supports literal types. A literal type represents a specific value, not just a general type. Example: . let e: true = true; // This is a literal type, constrained to the value true. let count: 10 = 10; // This can only ever be the number 10. let status: \"pass\" = \"pass\"; // This can only ever be the string \"pass\". These types act like constants and can only have one exact value, adding stricter type safety to your code. If you try to modify them an error will be thrown. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#types-in-typescript",
    
    "relUrl": "/tutorials/week1-typescript-basics#types-in-typescript"
  },"154": {
    "doc": "Typescript Basics",
    "title": "Variable declaration in typescript",
    "content": "Variables can be declared in Typescript using one of 3 keywords: . | var: var declarations are accessible anywhere within their containing function, module, namespace, or global scope - all which we’ll go over later on - regardless of the containing block. Some people call this var-scoping or function-scoping. Parameters are also function scoped. | let: When a variable is declared using let, it uses what some call lexical-scoping or block-scoping. Unlike variables declared with var whose scopes leak out to their containing function, block-scoped variables are not visible outside of their nearest containing block. | const: They are like let declarations but, as their name implies, their value cannot be changed once they are bound. In other words, they have the same scoping rules as let, but you can’t re-assign to them. | . The syntax of declarations is as below: . var &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; let &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; const &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; . Example: . let num: number = 1; const PI: number = 3.14; let x: string = \"This is a string\"; const t: boolean = true; const f: boolean = false; let uninitialized: any; . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#variable-declaration-in-typescript",
    
    "relUrl": "/tutorials/week1-typescript-basics#variable-declaration-in-typescript"
  },"155": {
    "doc": "Typescript Basics",
    "title": "Objects",
    "content": ". | Objects are similar to dictionaries with key-value pairs. | Arrays are iterable Objects with the keys as numbers. | . Examples: . const myObj: any = { key1: 'value1', key2: 'value2' }; console.log(myObj.key1); // prints 'value1' . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#objects",
    
    "relUrl": "/tutorials/week1-typescript-basics#objects"
  },"156": {
    "doc": "Typescript Basics",
    "title": "Control Flow Statements",
    "content": "Typescript contains the following control flow statements: . | If-Else | Switch | Ternary operator: Shorthand for if-else which returns a value. | . If condition syntax: . if(condition) { // executed when condition is true } if(condition) { // executed when condition is true } else { // executed when condition is false } if(condition) { // executed when condition is true } else if(condition2) { // checked only if condition is false // executed when condition2 is true } else { // executed when all conditions in the if-elseif ladder are false. } . Switch case syntax: . switch (variable) { case &lt;case1&gt;: // executed when value of variable matches &lt;case1&gt; break; // Break is required to prevent all subsequent cases from executing case &lt;case2&gt;: // executed when value of variable matches &lt;case1&gt; break; // Break is required to prevent all subsequent cases from executing default: // executed if variable does not match any prior cases } . Ternary Syntax: . let x = (condition) ? /* Executed when condition is true */ : /*Executed when condition is false*/; . Examples: . const str: string = \"ABCD\"; if(str === \"ABCD\") { console.log(\"it was true\"); } else { console.log(\"it was false\"); } switch (str) { case \"ABCD\": console.log('It was ABCD'); break; case \"WXYZ\": console.log('It was WXYZ'); break; default: console.log('It was something completely different') } let y: string = (str.includes(\"A\")) ? \"The string contains A\" : \"The string does not contain A\"; // y now contains \"The string contains A\" . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#control-flow-statements",
    
    "relUrl": "/tutorials/week1-typescript-basics#control-flow-statements"
  },"157": {
    "doc": "Typescript Basics",
    "title": "Equality vs Strict Equality",
    "content": "Typescript/JavaScript contain 2 equality operators: . | ==: Compares only the value of entities being compared. | ===: Compares the type and value of entities being compared. | . Example: . if(0 == '0') { } // Evaluates to true despite comparing string to number. if(0 === '0') { } // Evaluated to false because types are different. We recommend using strict equality (===) in all cases, and this recommendation is enforced by our linter. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#equality-vs-strict-equality",
    
    "relUrl": "/tutorials/week1-typescript-basics#equality-vs-strict-equality"
  },"158": {
    "doc": "Typescript Basics",
    "title": "Loops",
    "content": "Typescript contains the following loops: . | For | While | Do-while | . Examples: . for(let i: number = 0; i &lt; 10; i++) { } while(condition) { } do { } while(condition) . Tips: . | Entry-Level Loops: for and while loops are entry-level loops; they evaluate their condition before executing any statements. | Exit-Level Loop: The do...while loop is an exit-level loop; it will always execute the loop body at least once, regardless of the condition. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#loops",
    
    "relUrl": "/tutorials/week1-typescript-basics#loops"
  },"159": {
    "doc": "Typescript Basics",
    "title": "Array Functions",
    "content": "ForEach, Map, reduce, and filter are all array methods in JavaScript. Each one will iterate over an array and perform a transformation or computation. Each will return a new array based on the result of the function. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#array-functions",
    
    "relUrl": "/tutorials/week1-typescript-basics#array-functions"
  },"160": {
    "doc": "Typescript Basics",
    "title": "ForEach",
    "content": "forEach() method calls a function for each element in the array. It returns the resultant array. Syntax . array.forEach(callback[, thisObject]); . Example . let num = [7, 8, 9]; num.forEach(function (value) { console.log(value); }); . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#foreach",
    
    "relUrl": "/tutorials/week1-typescript-basics#foreach"
  },"161": {
    "doc": "Typescript Basics",
    "title": "Map",
    "content": "It is an array function that transforms the array according to the applied function and returns the updated array. It works on each element of an array. Syntax . array.map(callback[,object]) . callback - It is a function that provides an element of the new Array from an element of the current one. object - object to use as this when executing callback. Return Type - List . Examples . //Calculate cube of each element with the help of map. function cube(n){ return n*n*n; } var arr=new Array(1,2,3,4) var newArr=arr.map(cube); console.log(newArr) // Output : [1,8,27,64] . In the above example, a function called “cube” is created and then is passed as a callback function into map(). ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#map",
    
    "relUrl": "/tutorials/week1-typescript-basics#map"
  },"162": {
    "doc": "Typescript Basics",
    "title": "Reduce",
    "content": "It also works on a callback for each element of an array. It reduces the result of this callback function from one array element to the other. Syntax . array.reduce(callback[,initalValue]) . callback - this parameter is the function to execute on each value in the array. intitalValue - this parameter is the object to use as the first argument of the first call of the callback. Examples . //To calculate product of every element of an array, var arr = new Array (1,2,3,4,5) var val = arr.reduce(function(a,b){ return a*b; }); //output =&gt; 120 . Calculate the total salary from a list of object, then you will use the reduce() like, . var employees = [ { id: 20, name: 'Ajay', salary:30000 }, { id: 24, name: 'Vijay', salary:35000 }, { id: 56, name: 'Rahul', salary:32000 }, { id: 88, name: 'Raman', salary:38000 } ]; var totalSalary= employees .reduce(function (total, record) { return total + record.salary; }, 0); //It will return the total salary of all the employees. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#reduce",
    
    "relUrl": "/tutorials/week1-typescript-basics#reduce"
  },"163": {
    "doc": "Typescript Basics",
    "title": "Filter",
    "content": "As the name suggests it can filter out the data/array elements on the basis of condition and return the result as a list. Basically, this function pushes the current element into a new array when the callback functions return true. Syntax . array.filter(callback[, object]) . callback - it is a function that provides an element of the new Array from an element of the current one. object - object to use as this when executing callback. Return Type: List . Examples . //Calculate a list of even elements from an array : arr = new Array(1, 2, 3, 6, 5, 4) var newArr = arr.filter(function(record) { return record % 2 == 0; }); // output =&gt; [2,6,4] . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#filter",
    
    "relUrl": "/tutorials/week1-typescript-basics#filter"
  },"164": {
    "doc": "Typescript Basics",
    "title": "Functions",
    "content": ". | Functions usually “take in” data, process it, and “return” a result. Remember one function/method one job! . | There is a lot you can do with functions in JavaScript like assign them to variables, pass them to other functions, return them from functions, assign them to objects and prototypes, write properties to them, read those properties back, and so on, and TypeScript models all of those things with its rich type system, which we just learnt. | Typescript enables us to set the types for our function parameters and our return type. | Functions in Typescript are defined as below: . function functionName(argument1: &lt;type&gt;, defaultArgument: &lt;type&gt; = value, optionalArgument?: &lt;type&gt;): &lt;return type&gt; { // Function body } . | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#functions",
    
    "relUrl": "/tutorials/week1-typescript-basics#functions"
  },"165": {
    "doc": "Typescript Basics",
    "title": "Typing the function",
    "content": "A simple function in javascript would look like this: . // Named function function add(a, b) { return a + b; } . Now, let’s add types to our simple examples above: . function add(a: number, b: number): number { return a + b; } . You will usually explicitly annotate function parameters (a and b in this example)—TypeScript will always infer types throughout the body of your function, but in most cases it won’t infer types for your parameters. The return type is inferred, but it’s a good practice to explicitly annotate it. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#typing-the-function",
    
    "relUrl": "/tutorials/week1-typescript-basics#typing-the-function"
  },"166": {
    "doc": "Typescript Basics",
    "title": "Invoking the function",
    "content": "When you invoke a function in TypeScript, you don’t need to provide any additional type information—just pass in some arguments, and TypeScript will go to work checking that your arguments are compatible with the types of your function’s parameters: . add(1, 2); // evaluates to 3 . Of course, if you forgot an argument, or passed an argument of the wrong type, TypeScript will be quick to point it out: . add(1); // Error TS2554: Expected 2 arguments, but got 1. add(1, 'a'); // Error TS2345: Argument of type '\"a\"' is not assignable // to parameter of type 'number'. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#invoking-the-function",
    
    "relUrl": "/tutorials/week1-typescript-basics#invoking-the-function"
  },"167": {
    "doc": "Typescript Basics",
    "title": "Optional and Default Parameters",
    "content": "Like in object and tuple types, you can use ? to mark parameters as optional. When declaring your function’s parameters, required parameters have to come first, followed by optional parameters: . function log(message: string, userId?: string) { let time = new Date().toLocaleTimeString() console.log(time, message, userId || 'Not signed in') } log('Page loaded') // Logs \"12:38:31 PM Page loaded Not signed in\" log('User signed in', 'da763be') // Logs \"12:38:31 PM User signed in da763be\" . You can provide default values for optional parameters. Semantically it’s similar to making a parameter optional, in that callers no longer have to pass it in (a difference is that default parameters don’t have to be at the end of your list of parameters, while optional parameters do). For example, we can rewrite log as: . function log(message: string, userId = 'Not signed in') { let time = new Date().toISOString() console.log(time, message, userId) } log('User clicked on a button', 'da763be') log('User signed out') . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#optional-and-default-parameters",
    
    "relUrl": "/tutorials/week1-typescript-basics#optional-and-default-parameters"
  },"168": {
    "doc": "Typescript Basics",
    "title": "Rest Parameters",
    "content": "If a function takes a list of arguments, you can of course simply pass the list in as an array: . function sum(numbers: number[]): number { return numbers.reduce((total, n) =&gt; total + n, 0); } sum([1, 2, 3]); // evaluates to 6 . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#rest-parameters",
    
    "relUrl": "/tutorials/week1-typescript-basics#rest-parameters"
  },"169": {
    "doc": "Typescript Basics",
    "title": "Functions as Constructors",
    "content": "In Typescript/Javascript, Functions can be used as constructors for creating objects. This is similar to classes, but not quite the same. For Examples: . | Constructors can’t have type parameters - these belong on the outer class declaration | Constructors can’t have return type annotations - the class instance type is always what’s returned | . function Person(this: any, firstName: string, lastName: string) { this.firstName = firstName; this.lastName = lastName; this.getFullName = function(): string { return this.firstName + ' ' + this.lastName; } } const person1 = new Person('first', 'last'); console.log(person1.getFullName()); // Returns 'first last'. class Point { x: number; y: number; // Normal signature with defaults constructor(x = 0, y = 0) { this.x = x; this.y = y; } } . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#functions-as-constructors",
    
    "relUrl": "/tutorials/week1-typescript-basics#functions-as-constructors"
  },"170": {
    "doc": "Typescript Basics",
    "title": "Arrow Functions",
    "content": "Arrow Functions (also called fat arrow functions) are functions which have lexical ‘this’ and ‘arguments’. This are especially useful in class methods to preserve the context when using higher order functions. Examples: . let sum = (x: number, y: number): number =&gt; { return x + y; } sum(10, 20); //returns 30 . In the above example, sum is an arrow function. (x:number, y:number) denotes the parameter types, :number specifies the return type. The fat arrow =&gt; separates the function parameters and the function body. The right side of =&gt; can contain one or more code statements. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#arrow-functions",
    
    "relUrl": "/tutorials/week1-typescript-basics#arrow-functions"
  },"171": {
    "doc": "Typescript Basics",
    "title": "Function Overloads",
    "content": "In TypeScript, we can specify a function that can be called in different ways by writing overload signatures. To do this, write some number of function signatures (usually two or more), followed by the body of the function: . //function makeDate() with one parameter function makeDate(timestamp: number): Date; //function makeDate() with three parameters function makeDate(m: number, d: number, y: number): Date; //function makeDate() with one parameter and 2 default parameters function makeDate(mOrTimestamp: number, d?: number, y?: number): Date { if (d !== undefined &amp;&amp; y !== undefined) { return new Date(y, mOrTimestamp, d); } else { return new Date(mOrTimestamp); } } const d1 = makeDate(12345678); const d2 = makeDate(5, 5, 5); const d3 = makeDate(1, 3); //No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#function-overloads",
    
    "relUrl": "/tutorials/week1-typescript-basics#function-overloads"
  },"172": {
    "doc": "Typescript Basics",
    "title": "Classes",
    "content": "Classes are blueprints for creating objects. | They can contain properties, methods, and a constructor. | All members of a class can have an access modifier: public, protected, private. | Members can also be static (shared across all instances of the class) and final (immutable). | Class properties may have getters and setters. | Classes can extend other classes. | Classes can implement interfaces. | . Creating a Class . A class definition can include the following: . | Fields − A field is any variable declared in a class. Fields represent data pertaining to objects | Constructors − Responsible for allocating memory for the objects of the class | Functions − Functions represent actions an object can take. They are also at times referred to as methods | . Examples: . class Person { private firstName: string = ''; protected middleName: string; public lastName: string = ''; private static final NeverGonnaGiveYouUp: any; protected static final NeverGonnaLetYouDown: any; public static final isRickRolled: boolean = true; constructor() { // I execute when you call new Person(). // No access modifier === public by default. // Make me private if implementing a singleton. } public anyoneCanCallMe(): void { this.childClassesCanCallMe(); } protected childClassesCanCallMe(): void { this.onlyPersonCanCallMe(); } private onlyAccessibleInsidePerson(): void { // I lied, anyone can call me if you know how. // Welcome to JavaScript :p } public get firstName(): string { return this.firstName; } public set firstName(firstName: string): void { this.firstName = firstName; } } const person = Person(); person.firstName = 'first'; console.log(person.firstName); person.anyoneCanCallMe(); class SpecialPerson extends Person { // I contain everything person has, and can extend/override it. constructor() { super() // I call the constructor for Person. } } . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#classes",
    
    "relUrl": "/tutorials/week1-typescript-basics#classes"
  },"173": {
    "doc": "Typescript Basics",
    "title": "Creating an abstract class",
    "content": ". | Define an abstract class in Typescript using the abstract keyword. Abstract classes are mainly for inheritance where other classes may derive from them. We cannot create an instance of an abstract class. | An abstract class typically includes one or more abstract methods or property declarations. The class which extends the abstract class must define all the abstract methods. | . Example: . abstract class Person { abstract name: string; display(): void{ console.log(this.name); } } class Employee extends Person { name: string; empCode: number; constructor(name: string, code: number) { super(); // must call super() this.empCode = code; this.name = name; } } let emp: Person = new Employee(\"James\", 100); emp.display(); //James . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#creating-an-abstract-class",
    
    "relUrl": "/tutorials/week1-typescript-basics#creating-an-abstract-class"
  },"174": {
    "doc": "Typescript Basics",
    "title": "Type Aliases",
    "content": "We’ve been using object types and union types by writing them directly in type annotations. This is convenient, but it’s common to want to use the same type more than once and refer to it by a single name. A type alias is exactly that - a name for any type. The syntax for a type alias is: . type Point = { x: number; y: number; }; function printCoord(pt: Point) { console.log(\"The coordinate's x value is \" + pt.x); console.log(\"The coordinate's y value is \" + pt.y); } printCoord({ x: 100, y: 100 }); . You can actually use a type alias to give a name to any type at all, not just an object type. For example, a type alias can name a union type: . type ID = number | string; . Note that aliases are only aliases - you cannot use type aliases to create different/distinct “versions” of the same type. When you use the alias, it’s exactly as if you had written the aliased type. In other words, this code might look illegal, but is OK according to TypeScript because both types are aliases for the same type: . type UserInputSanitizedString = string; function sanitizeInput(str: string): UserInputSanitizedString { return sanitize(str); } // Create a sanitized input let userInput = sanitizeInput(getInput()); // Can still be re-assigned with a string though userInput = \"new input\"; . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#type-aliases",
    
    "relUrl": "/tutorials/week1-typescript-basics#type-aliases"
  },"175": {
    "doc": "Typescript Basics",
    "title": "Interfaces",
    "content": "Interfaces are used to define contracts for interaction with external entities. If an interface has a property/method, an Object/Class which implements it must have it. Interfaces can be used to define custom types for Objects in Typescript. Examples: . //Interface IPerson respresents a person by attributes firstName and lastName and a method to getFullName() interface IPerson { firstName: string; lastName: string; getFullName(): string; } //Class Person implements interface Iperson. Person class must contains all the attributes and methods of interface. class Person implements IPerson { public firstName: string = ''; public lastName: string = ''; public getFullName(): string { return this.firstName + ' ' + this.lastName; } // It can contain any other properties/methods but must contain those in the interface. } const person: IPerson = new Person(); . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#interfaces",
    
    "relUrl": "/tutorials/week1-typescript-basics#interfaces"
  },"176": {
    "doc": "Typescript Basics",
    "title": "Custom types",
    "content": ". | For complicated types (usually required for Objects), it is recommended to use an interface. | Additionally, typescript contain the ‘type’ keyword which can be used to create new types. | This is generally used when a union of different types is required. | . Examples: . interface IStudent { name: string; age: number; studentID: number; gender: string; isEnrolled: boolean; } const student: IStudent = { name: 'name', age: 20, studentID: 111111111, gender: 'hidden' isEnrolled: true; }; type StringOrNumber = string | number; let x = 1; x = 'some string'; . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#custom-types",
    
    "relUrl": "/tutorials/week1-typescript-basics#custom-types"
  },"177": {
    "doc": "Typescript Basics",
    "title": "Generics",
    "content": ". | Generics allow us to pass different types to a function/class making it more generalized. | This will be especially useful when working with http requests. | . Examples: . function myFunc&lt;T&gt;(data: T): T { console.log(data); return data } let x: string = myFunc&lt;string&gt;('some string'); let y: number = myFunc&lt;number&gt;(5); class myClass&lt;T&gt; { } interface IMyInterface&lt;T&gt; { } . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#generics",
    
    "relUrl": "/tutorials/week1-typescript-basics#generics"
  },"178": {
    "doc": "Typescript Basics",
    "title": "Modules",
    "content": "A Module in typescript is defined by using the ‘Import’ or ‘Export’ keywords within a file. Variables declared in a module are scoped locally and are not added to the global scope. | Export makes the variables and functions from a file visible outside it. | Import allows use to use variables and functions exported by another file. | . Examples: . // file1.ts export const someVar: string = 'Variables can be exported too.'; export default function add(x: number, y: number): number { return x + y; } export function subtract(x: number, y: number): number { return x - y; } function multiply(): void { throw new Error(); } // file2.ts import add from './file1'; // curly braces are not required if export default is used. // There can be only 1 export default in a while. Use it if file has only 1 export. import { subtract } from './file1'; add(1, 2); subtract(2, 1); // multiply cannot be imported. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#modules",
    
    "relUrl": "/tutorials/week1-typescript-basics#modules"
  },"179": {
    "doc": "Typescript Basics",
    "title": "Object oriented programming concepts using typescript",
    "content": "Object Oriented Programming or OOP is a programming paradigm that has four principles which are: . | Inheritance | Polymorphism | Abstraction | Encapsulation | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#object-oriented-programming-concepts-using-typescript",
    
    "relUrl": "/tutorials/week1-typescript-basics#object-oriented-programming-concepts-using-typescript"
  },"180": {
    "doc": "Typescript Basics",
    "title": "Inheritance",
    "content": "TypeScript supports the concept of Inheritance. Inheritance is the ability of a program to create new classes from an existing class. The class that is extended to create newer classes is called the parent class/super class. The newly created classes are called the child/sub classes. A class inherits from another class using the ‘extends’ keyword. Child classes inherit all properties and methods except private members and constructors from the parent class. However, TypeScript doesn’t support multiple inheritance. Syntax: . class child_class_name extends parent_class_name . Example: . //Parent class Shape class Shape { Area:number constructor(a:number) { this.Area = a } } //Child class Circle that inherits properties of Shape class Circle extends Shape { disp():void { console.log(\"Area of the circle: \"+this.Area) } } var obj = new Circle(223); obj.disp() . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#inheritance",
    
    "relUrl": "/tutorials/week1-typescript-basics#inheritance"
  },"181": {
    "doc": "Typescript Basics",
    "title": "Polymorphism",
    "content": "When multiple classes inherit from a parent and override the same functionality, the result is polymorphism. Each of those child classes now implements a property or method, but they each may have their own way of performing that implementation. Alternatively, one child class might override the parent’s members while another child doesn’t but just accepts the parent class’s implementation instead. This also demonstrates polymorphic behavior, since those behaviors are different between the siblings. class CheckingAccount { open(initialAmount: number) { // code to open account and save in database } } class BusinessCheckingAccount extends CheckingAccount { open(initialAmount: number) { if (initialAmount &lt; 1000) { throw new Error(\"Business accounts must have an initial deposit of 1.000 Euros\") } super.open(initialAmount); } } class PersonalCheckingAccount extends CheckingAccount { open(initialAmount: number) { if (initialAmount &lt;= 0) { throw new Error(\"Personal accounts must have an initial deposit of more than zero Euros\") } super.open(initialAmount); } } . In the above code sample shows, the two child classes have different business rules to implement when it comes to opening an account – mainly different opening balances. Because both children have a method to open the account but both children choose to do it differently means the behavior is polymorphic. To achieve polymorphism, inherit from a base class, then override methods and write implementation code in them. In addition to overriding methods, you can overload methods to achieve polymorphism. Overloaded methods are methods that have different signatures (i.e., different data types or number of arguments) with the same name. However, in TypeScript, methods aren’t overloaded by simply modifying the types or number of arguments like in some other languages. To create an overload in TypeScript, you can either add optional arguments to a method, or overload function declarations in an interface and implement the interface. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#polymorphism",
    
    "relUrl": "/tutorials/week1-typescript-basics#polymorphism"
  },"182": {
    "doc": "Typescript Basics",
    "title": "Abstraction",
    "content": "Abstraction is a way to model objects in a system that creates a separation of duties between class or type and the code that inherits it. A developer creates a type, i.e., a class or interface, and that type specifies what the calling code should implement, but not how. So it’s the job of the abstract type to define what needs to be done, but up to the consuming types to actually do those things. To enforce abstraction, inherit or implement from abstract classes and interfaces. For example, some bank accounts have fees. You can create a Fee interface that defines a method for charging a fee. Fees don’t apply to all types of accounts, so it’s best to create an interface that can be applied to specific classes anywhere in the inheritance hierarchy. A checking account might charge fees, where its parent and sibling, the generic bank account and savings accounts might not. interface Fee { chargeFee(amount: number ); } // parent BankAccount and sibling SavingsAccount do not implement Fee interface class BankAccount { ... } class SavingsAccount extends BankAccount { ... } // checking implements Fee class CheckingAccount extends BankAccount implements Fee { chargeFee(amount: number) {} } . Children classes inherit interface members that have been implemented in their parent, so if a BusinessChecking account has inherited from the CheckingAccount class, then it inherits that implementation. // BusinessChecking inherits CheckingAccount and therefore Fee class BusinessChecking extends CheckingAccount { … } // Code that uses BusinessChecking can call chargeFee function CalculateMonthlyStatements() { let businessChecking = new BusinessChecking(); businessChecking.chargeFee(100); } . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#abstraction",
    
    "relUrl": "/tutorials/week1-typescript-basics#abstraction"
  },"183": {
    "doc": "Typescript Basics",
    "title": "Encapsulation",
    "content": "Encapsulation is a key part of Object Oriented Programming that is a way to structure code so that a certain block of code has specific access points for external code. The term for this is “visibility” or “accessibility”. Visibility defines what code from one method, property, or class can call code in another method, property, or class. In TypeScript, we enforce encapsulation with methods and properties that only allow access to data that we control. The Withdraw method below does that by doing the calculation and updating the class level _balance field. The Balance property then returns the private _balance field to the calling code. Withdraw(amount: number): boolean { if (this._balance &gt; amount) { this._balance -= amount return true; } return false; } private _balance: number; get Balance(): number { return this._balance; } . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#encapsulation",
    
    "relUrl": "/tutorials/week1-typescript-basics#encapsulation"
  },"184": {
    "doc": "Typescript Basics",
    "title": "General Guidelines",
    "content": ". | Naming conventions . | use kebab-case for file names. | Use camelCase for variable and function names. | Use PascalCase for Class and constructor function names. | . | Prefer descriptive names over random letters. | Although typing is optional in typescript, it is not optional for this course. | Always use strict equality. | Use a linter. (as specified on course website) | Use a prettifier. (If the linter doesn’t do it already) | Use general coding guidelines as discussed in Week1. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#general-guidelines",
    
    "relUrl": "/tutorials/week1-typescript-basics#general-guidelines"
  },"185": {
    "doc": "Typescript Basics",
    "title": "tsconfig",
    "content": "What is the tsconfig.json file? . | The presence of a tsconfig.json file in a directory indicates that the directory is the root of a TypeScript project. The tsconfig.json file specifies the root files and the compiler options required to compile the project. | JavaScript projects can use a jsconfig.json file instead, which acts almost the same but has some JavaScript-related compiler flags enabled by default. | Note: In many packages, a configuration file is included, featuring predefined settings that typically require no alterations. Also, you may not need this for simple projects like hello world. A project is compiled in one of the following ways: | . Using tsconfig.json or jsconfig.json: . | By invoking tsc with no input files, in which case the compiler searches for the tsconfig.json file starting in the current directory and continuing up the parent directory chain. | By invoking tsc with no input files and a –project (or just -p) command line option that specifies the path of a directory containing a tsconfig.json file, or a path to a valid .json file containing the configurations. When input files are specified on the command line, tsconfig.json files are ignored. | . Example tsconfig.json files: Using the files property . \"compilerOptions\": { \"module\": \"commonjs\", \"noImplicitAny\": true, \"removeComments\": true, \"preserveConstEnums\": true, \"sourceMap\": true }, \"files\": [ \"core.ts\", \"sys.ts\", \"types.ts\", \"scanner.ts\", \"parser.ts\", \"utilities.ts\", \"binder.ts\", \"checker.ts\", \"emitter.ts\", \"program.ts\", \"commandLineParser.ts\", \"tsc.ts\", \"diagnosticInformationMap.generated.ts\" ] } . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-typescript-basics#tsconfig",
    
    "relUrl": "/tutorials/week1-typescript-basics#tsconfig"
  },"186": {
    "doc": "Unit Testing with Jest",
    "title": "Understanding Unit Testing",
    "content": "At some point, every programmer has wondered why they should spend time writing test cases instead of focusing on implementing a new feature. The reason for this is that it is important! In this tutorial, we’ll go through several aspects of unit testing, with a focus on utilizing Jest. Before we get into that, let’s define unit testing and why it’s so important in the real world. Unit testing is not a new concept; it has been around for a long time. “Unit tests are often automated tests prepared and executed by software engineers to check that a portion of an application (referred to as a “unit”) matches its design and behaves as expected,” according to Wikipedia. So, to put it another way, it’s a technique to undertake rigorous testing of every single function/module in isolation. Unit testing technques: . | Black Box Testing : It is a process of validating a function’s input and output without any knowledge of it’s internal implementation details. | White Box Testing : Unlike Black Box testing, white box testing focuses on testing the specific internal code flows, uncovering any unidentified error or bug in that component. | Gray Box Testing : Gray Box testing is a combination of the two above wherein partial knowledge of the internal code is needed. This strategy lowers a tester’s reliance on a developer for every minor issue, allowing the tester to detect and resolved it alone. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#understanding-unit-testing",
    
    "relUrl": "/tutorials/week1-unit-testing#understanding-unit-testing"
  },"187": {
    "doc": "Unit Testing with Jest",
    "title": "Testing with Jest",
    "content": " ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#testing-with-jest",
    
    "relUrl": "/tutorials/week1-unit-testing#testing-with-jest"
  },"188": {
    "doc": "Unit Testing with Jest",
    "title": "Basics",
    "content": "To understand the basics of unit testing, let us look at the file called ‘calculator.ts’ present in the directory src/services/math/. This file contains a class called Calculator with a method for add() defined as shown below: . // Contents of src/services/math/calculator.ts export default class Calculator { public add(num1: number, num2: number): number { const result: number = num1 + num2; console.log(\"The result is: \", result); return result; } } . Let us write some tests for this code using jest. The test code will go into a file in the same directory titled ‘calculator.spec.ts’. Create this file now. This pattern of ‘file-name.spec.ts’ is how you should name all of your test files when using jest. All test files start with a suite. A suite is a collection of tests (or a logical grouping of tests). In jest, a suite is created by using the function describe(). The suite takes 2 arguments: the 1st being the description of the suite and the second being a callback function. Additionally, suites can be nested to form logical groups. Suites can further be broken down into 3 components that we will explore in detail shortly: . | Setup | Teardown | Test | . Syntax: . describe(\"Description of suite\", () =&gt; { // The tests go here. }); . Suites can be used to make debugging easier when you are using a large number of tests. Here is one recommended suite hierarchy: . | Top level describe should contain the file path after src. | Second describe should contain the name of the Class/File being tested. | Subsequent describe blocks should contain the name of the function being tested. | . Using this hierarchy, the test file for the above example would look as follows: . describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { // Tests for add() go here. }); }); }); . Specs . A spec is an actual test that executes some code and asserts some result. A test is created using the keyword it() or test(). Similar to describe(), it() takes 2 arguments, the first being the description of the test and the second being a callback. Generally, we want to describe what the code should do in the description of it() and assert the described behavior within the test. Each test can be broken down into 3 parts (Assemble, Act, Assert) which makes up the AAA pattern. Optionally, there may be a clean-up/teardown step after the assert. Syntax: . it(\"should check a specific behaviour\", () =&gt; {}); . Let us write a simple test for our add() method to check 1 + 1 = 2. We start by adding a spec to the suite we created previously. describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { // Assemble // Act // Assert }); }); }); }); . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#basics",
    
    "relUrl": "/tutorials/week1-unit-testing#basics"
  },"189": {
    "doc": "Unit Testing with Jest",
    "title": "Matchers",
    "content": ".toEqual() vs .toBe() vs .toStrictEqual() . All three matchers are used to test equality, though they have slight but important differences. To understand these differences, let us take a look at the example of Store.ts with the below code. export default class Store { private static _data: any = null; public static getData(): any { return Store._data; } public static setData(data: any): void { Store._data = data; } } . | Use .toEqual() to compare recursively all properties of object instances (also known as “deep” equality). It calls Object.is to compare primitive values, which is even better for testing than ‘===’, the strict equality operator. This is the most commonly used matcher. | . describe(\"utils &gt; store\", () =&gt; { describe(\"Store\", () =&gt; { beforeEach(() =&gt; { Store[\"_data\"] = undefined; }); describe(\"setData()\", () =&gt; { it(\"should assign the input data to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store.setData(mockData); expect(Store[\"_data\"]).toEqual(mockData); }); }); describe(\"getData()\", () =&gt; { it(\"should return an object equal to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toEqual(mockData); }); }); }); }); . | Use .toBe() to compare primitive values or to check referential identity of object instances. It calls Object.is to compare values, which is even better for testing than ‘===’, the strict equality operator. | . describe(\"getData()\", () =&gt; { it(\"should return an object with a reference different to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toEqual(mockData); expect(returnedValue).not.toBe(mockData); expect(Store[\"_data\"]).toBe(mockData); }); }); . | Use .toStrictEqual() to test that objects have the same types as well as structure. This checks for undefined in Objects and sparseness in Arrays. | { key: undefined } is not strictly equal to { }. | [ , 1] is not strictly equal to [undefined, 1]. | . | . it(\"should return an object strictly equal to object stored in Store._data\", () =&gt; { const mockData = { key: \"value\" }; const mockDataWithUndefined = { key: \"value\", key2: undefined }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toStrictEqual(mockData); expect(returnedValue).toEqual(mockDataWithUndefined); expect(returnedValue).not.toStrictEqual(mockDataWithUndefined); }); . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#matchers",
    
    "relUrl": "/tutorials/week1-unit-testing#matchers"
  },"190": {
    "doc": "Unit Testing with Jest",
    "title": "AAA",
    "content": "Assemble . In order to run a test, we need to first assemble it. This may include creating instances of classes/variables, setting up test data for inputs, setting up spies/stubs/mocks (which will be covered in subsequest sections), or setting up the expected output. In simple cases, one may not need to assemble the test. This phase is very similar to the setup phase. In our example, let us create an instance of the Calculator class as part of assembling the test. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); // Act // Assert }); }); }); }); . Act . In this step, we actually execute the function under test with required inputs and get the returned result (if any). In our example, we will invoke the add() method with inputs (1, 1) and get the result. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); const result: number = calculator.add(1, 1); // Assert }); }); }); }); . Assert . Assertion is a statement that validates the behavior of our code by comparing the actual result against the expected results. There are many assertions provided by Jest, including some useful assertions we will use throughout our tests. Some of these assertions are listed below: . | expect(actual).toEqual(expected) // Expects both entities to have the same value. | expect(actual).toBe(expected) // Expects both entities to be the same. | expect(spy/stub/mock).toHaveBeenCalled() // Expects a function being spied/stubbed/mocked to be invoked. | expect(spy/stub/mock).toHaveBeenCalledWith([arguments]) // Expects a function being spied/stubbed/mocked to be invoked with specified arguments. | expect(actual).toBeDefined() // Expects the entity to be defined. | expect(actual).not. // Negates the assertion. Can be chained with any matchers above | await expect(error causing code returning a promise).rejects.toThrowError() // Waits for the error throwing code that returns promise (e.g. an API call) to throw the error and asserts the error was thrown. | . A full list of matchers can be found here. In our example, we can use the .toEqual() matcher. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); }); }); }); . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#aaa",
    
    "relUrl": "/tutorials/week1-unit-testing#aaa"
  },"191": {
    "doc": "Unit Testing with Jest",
    "title": "Setup and Teardown",
    "content": "Often in tests, we need some things to happen before a test actually runs and some things to happen after it. This may include resetting/initializing values, setting up test data, setting up spies/stubs/mocks, cleaning up variables after a test, or resetting spies/stubs/mocks. Sometimes these steps may need to be repeated for each test. This is where the setup and teardown can be especially useful. Jest Provides 2 methods for setup and 2 methods for teardown: . | beforeAll(): Runs one time before all the tests in a suite. | beforeEach(): Runs before every test in a suite. | afterEach(): Runs after every test in a suite. | afterAll(): Runs once after all tests in a suite. | . In our example, notice we created an instance of calculator in our Assemble phase. We will probably have multiple tests for the calculator that will require this instance. In order to avoid repeating this in every step, let us move this to the setup phase and add a teardown to clear this after all tests. Note: Use beforeEach()/afterEach() if the function/class stores state, and we need a clean instance for each test. In our case, calculator does not store any state, and we can share the same instance across tests with out any side effects. Hence, we will use beforeAll()/afterAll(). import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { (&lt;any&gt;calculator) = undefined; }); it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); }); }); }); . Let us add another test to cover a different scenario, such as adding negative numbers. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { (&lt;any&gt;calculator) = undefined; }); it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); it(\"should return -2 when inputs are -1 and -1\", () =&gt; { const result: number = calculator.add(-1, -1); expect(result).toEqual(-2); }); }); }); }); . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#setup-and-teardown",
    
    "relUrl": "/tutorials/week1-unit-testing#setup-and-teardown"
  },"192": {
    "doc": "Unit Testing with Jest",
    "title": "Mock Testing",
    "content": "As a project grows so do the interdependencies in the project. A function under test can have dependencies from various external entities. This may include other functions, network requests, database connections, or built-in connections. Spies, Stubs, and Mocks are ways of dealing with such external dependencies. You can read more on what you can do with spies/stubs/mocks here. Spy . A spy is a watcher on a function that tracks various properties of the function being spied on. This can return information such as whether a function was invoked, how many times it was invoked, and what argument it was invoked with. A spy on a function is created using the syntax const spy = jest.spyOn(object, 'methodName'); . Note: The function being spied on actually executes. In our example, we have an external dependency on console.log(). Let us add a spy and test for it. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { (&lt;any&gt;calculator) = undefined; }); it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(console, \"log\"); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); }); }); }); . Mock . A mock is function which replaces an existing function. In our example, if we wanted to change the behavior of console.log() for our tests, we can do so using a mock. A mock implementation can be substituted for a spy or a jest.fn(). The syntax is as below: . spy.mockImplementation(() =&gt; { // new function body goes here. }); . Note: The function being mocked does not execute. In our example, if we wanted to replace the behavior of console.log(), we can do so as shown: . it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(console, \"log\"); logSpy.mockImplementation(() =&gt; { // This will no longer print to console. }); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); . Warning: Watch out for circular dependencies in mock implementations. Stub . A stub is a special kind of mock which does not require an alternate implementation but instead returns some value that we specify. When a stub gets invoked, it does not invoke the actual function, but returns the desired value instead. The syntax is as below: . spy.mockReturnValue(someValue); . To return a promise, we can use: . spy.mockResolvedValue(someValue); . This can be especially handy when stubbing Axios requests. Using a stub in our example simply prevents console.log() from being executed, since it does not return a value anyway. it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(console, \"log\"); logSpy.mockReturnValue(); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#mock-testing",
    
    "relUrl": "/tutorials/week1-unit-testing#mock-testing"
  },"193": {
    "doc": "Unit Testing with Jest",
    "title": "Testing Asynchronous Code",
    "content": "Promise . In previous tutorials, we have used Axios to make http requests which return promises. This is how we can write tests for axios requests. Consider the example below: . import axios from \"axios\"; import Store from \"../../utils/store/store\"; export default class HttpService { public getData(): Promise&lt;any&gt; { return axios.get(\"/myUrl\"); } } . We can test the above code as follows: . // Assuming we have done the setup as in previous tests describe(\"getData()\", () =&gt; { it('should invoke axios.get() with \"myUrl\"', async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); await httpService.getData(); expect(getStub).toHaveBeenCalledWith(\"/myUrl\"); }); it(\"should return the status as 200\", async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); const response = await httpService.getData(); expect(response.status).toEqual(200); getStub.mockRestore(); }); }); . Note: You can return different values for subsequent calls to a stub. Occasionally, you may run into situations where an http request is made but no promise is returned. This is often found in cases involving “fire and forget” calls or a central store with an Observable pattern implementation (e.g. Redux with react). We cannot await a function that does not return a promise. However, we can use fake timers to simulate passage of time to test such asynchronous behavior. Consider the example below: . import axios from \"axios\"; import Store from \"../../utils/store/store\"; export default class HttpService { public getData(): Promise&lt;any&gt; { return axios.get(\"/myUrl\"); } public getDataAndSetStore(): void { axios.get(\"/myUrl\").then((res) =&gt; { Store.setData(res.data); }); } } . We can test the above functionality as follows: . describe(\"getDataAndSetStore()\", () =&gt; { it('should invoke axios.get() with \"myUrl\"', async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); await httpService.getDataAndSetStore(); expect(getStub).toHaveBeenCalledWith(\"/myUrl\"); }); it(\"should set the data in store\", async () =&gt; { const addDataStub = jest.spyOn(Store, \"setData\").mockImplementation(); const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: \"myData\" }); jest.useFakeTimers(); httpService.getDataAndSetStore(); jest.runAllTimers(); await Promise.resolve(); expect(addDataStub).toHaveBeenCalledWith(\"myData\"); addDataStub.mockRestore(); getStub.mockRestore(); jest.useRealTimers(); }); }); . You can read more about jest timers here. Callbacks . Callbacks are one of the most commonly used patterns for asynchronous programming in JavaScript/TypeScript. Consider the below callback function use case: . test('Check if I am a true husky', () =&gt; { function callback(data) { expect(data).toBe('I am from Northeastern!'); } fetchData(callback); }); . Here, fetchData() is a function that takes a callback and would call that callback function later in it’s implementation. Now consider 2 scenarios: . case 1: . fetchData(callback) { setTimeout(()=&gt;{ callback('I am from Northeastern!'); }, 1000); } . case 2: . fetchData(callback) { setTimeout(()=&gt;{ callback('I am not from Northeastern!'); }, 1000); } . The test case would still pass in either of the above scenarios since fetchData() is an async function, which means the program will not wait for the call to complete. The correct way to test a callback would be using the argument done in the test like shown in below example: . test('Check if I am a true husky', (done) =&gt; { function callback(data) { expect(data).toBe('I am from Northeastern!'); done(); } fetchData(callback); }); . Now, the program would wait for done to be invoked. This implementation would correctly test both the above scenarios. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#testing-asynchronous-code",
    
    "relUrl": "/tutorials/week1-unit-testing#testing-asynchronous-code"
  },"194": {
    "doc": "Unit Testing with Jest",
    "title": "UI Testing",
    "content": "Testing UIs can be very tricky, especially when we want to test features involving user interaction (e.g. a user clicking on a button). However, there are some useful tools that can help us. The React Testing Library provides many helpful features that can help us. import {render, screen} from '@testing-library/react' import Counter from './Counter' it('renders the Counter component correctly', async () =&gt; { render(&lt;Counter /&gt;); // Will throw error if not found screen.getByText(\"Count: 0\" ) screen.getByText(\"Click me!\" ) }) . Above is a very simple test to ensure that our Counter component renders as expected with out any user input. Suppose now that we wanted to test user interaction with the page: . import {render, fireEvent, screen} from '@testing-library/react' import Counter from './Counter' it('correctly renders the updated count after the user clicks the button', async () =&gt; { render(&lt;Counter /&gt;); screen.getByText(\"Count: 0\" ) fireEvent.click(screen.getByRole('button')) screen.getByText(\"Count: 1\" ) }) . A full list of testing functions from React Testing Library can be found here. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#ui-testing",
    
    "relUrl": "/tutorials/week1-unit-testing#ui-testing"
  },"195": {
    "doc": "Unit Testing with Jest",
    "title": "Setting up testing using Jest in VSCode",
    "content": "Testing can sometimes get cumbersome as the user is expected to remember all the options provided by Jest to run a specific set of tests, or otherwise the user will have to run the entire test suite just to verify the result of a single test case. Not anymore! . With vscode-jest, you have complete control over the way you want to run tests, with many features that visually inform the users about which specific line is failing with what error. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#setting-up-testing-using-jest-in-vscode",
    
    "relUrl": "/tutorials/week1-unit-testing#setting-up-testing-using-jest-in-vscode"
  },"196": {
    "doc": "Unit Testing with Jest",
    "title": "Features",
    "content": ". | Starts Jest automatically when you’re in a root folder project with Jest installed. | Show individual fail / passes inline. | Show fails inside the problem inspector. | Highlights the errors next to the expect functions. | Adds syntax highlighting to snapshot files. | A one button update for failed snapshots. | Show coverage information in files being tested. | Help debug jest tests in vscode. | Supports multiple test run modes (automated, manual, and hybrid onSave) to meet user’s preferred development experience. | Track and shows overall workspace/project test stats. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#features",
    
    "relUrl": "/tutorials/week1-unit-testing#features"
  },"197": {
    "doc": "Unit Testing with Jest",
    "title": "Installation",
    "content": "Direct Installation . | Open Visual Studio Code, go to the extension tab. | Search for “Jest” with the publisher name as “Orta”. | Click “Install”. | . From Visual Studio Marketplace . | Visit Jest - Visual Studio Marketplace and click “Install”. | Allow the browser to open VSCode as shown (might be different for macOS/Linux systems) by clicking on Continue. | Once VSCode is open, click on “Install”. | . Once installed, the extension should work out of the box without any extra configuration for most of the homework handouts and project starter code. You can verify the installation by checking if the following is visible to you when you open a project which has Jest configured (VSCode restart maybe required.). If restarting Jest does not work, you can run the following in your VSCode by opening VSCode’s command palette (Ctrl + Shift + P in Windows, Cmd + Shift + P in macOS) and run the following - “Jest: Start All Runners”. Additional Extensions and Libraries . If you would like to run each test individually (and all tests in test suites collectively), VSC extenstion called “Jest Runner” will be very useful. You can also explore jest extended library that offers additional matchers for testing. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#installation",
    
    "relUrl": "/tutorials/week1-unit-testing#installation"
  },"198": {
    "doc": "Unit Testing with Jest",
    "title": "Configuration",
    "content": "As of the latest stable version, the extension is set to run all tests whenever any change is made to the files containing the tests. You can modify the behaviour to manual execution where you can run specific test cases as and when required. This can be modified by changing the \"jest.autoRun\" setting as follows - . | \"jest.autoRun\": {\"watch\": true} =&gt; will start the jest with the watch flag and leave all tests at “unknown” state until changes are detected. | \"jest.autoRun\": {\"watch\": true, \"onStartup\": [\"all-tests\"]} =&gt; will start running all tests upon project launch to update overall project test stats, followed by the jest watch for changes. | \"jest.autoRun\": \"off\" =&gt; there will be no automatic test run, users will trigger test run by either command or context-menu. | \"jest.autoRun\": {\"watch\": false, \"onSave\": \"test-file\"} =&gt; the extension will trigger test run for the given test file upon save. | \"jest.autoRun\": {\"watch\": false, \"onSave\": \"test-src-file\"} =&gt; the extension will trigger test run for the given test or source file upon save. | . An example of changing the extension to run in manual mode is demonstrated below - . NOTE - You will only be able to Run specific test cases as and when required only when autoRun is off. However, you’ll be able to Debug any test cases in all available modes. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#configuration",
    
    "relUrl": "/tutorials/week1-unit-testing#configuration"
  },"199": {
    "doc": "Unit Testing with Jest",
    "title": "Debugging Tests",
    "content": "Once the extension is setup and confirmed to be working, we can now begin debugging the tests. You can do so by opening the testing tab from the left sidebar in VSCode to view all the tests present in the current project. You can also navigate to the specific test file manually, and you will notice some icons/action buttons in the editor next to each test. Right clicking on the icons will bring up a test-specific context menu which will have options to debug the specific test. Be sure to place breakpoints in the specific pieces of code by clicking to the left of the line numbers. If everything is setup correctly, the debugger in VSCode will pause at the breakpoint you set and you can check the values of the variables by hovering over the said variable. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#debugging-tests",
    
    "relUrl": "/tutorials/week1-unit-testing#debugging-tests"
  },"200": {
    "doc": "Unit Testing with Jest",
    "title": "General Guidelines For Writing Tests",
    "content": "Note: The following will be used as a reference when grading assignments. | Tests should be hermetic. | Reduce flakiness. | Flaky tests are those that fail intermittently: . | Nondeterminism (e.g., hash codes, random numbers); | Timing issues (e.g., threads, network). | Availability of Resources | . | . | Tests should be clear. | After failure, should be clear what went wrong. | . | Tests should be scoped as small as possible. | Faster and more reliable. | . | Tests should make calls against public APIs. | Or they become brittle | Brittle tests are those that are not self-contained: . | Ordering of tests (e.g., assume prior state) | . | . | . Note: The following will not be used as a reference when grading assignments. But you should try following these guidelines as much as you can. | Write tests based on the expected behavior, not based on the interpretation/implementation of it. | Test assertion (expect) should match the test description. | Each spec should test only 1 thing (preferably with 1 assertion per test). | Organize tests using suites (i.e. each method has it’s own suite). | Use setup and teardown functions to reduce code duplicity. | Code duplicity in tests is preferred over complicated logic to reduce it. | If your tests need tests, they have no value. | . | Cover the happy path for your code first. | Follow up with edge cases. | End with error scenarios. | . | Mock/Stub all external dependencies. | Clear the mocks after each test. | . | If large test data is being used, ensure clean-up after tests to prevent memory leaks. | Code coverage is a deceptive measure. 100% coverage does not mean 100% tested code. | A well designed test suite improves the quality and reliability of code. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing#general-guidelines-for-writing-tests",
    
    "relUrl": "/tutorials/week1-unit-testing#general-guidelines-for-writing-tests"
  },"201": {
    "doc": "Unit Testing with Jest",
    "title": "Unit Testing with Jest",
    "content": "This tutorial covers the basics on unit testing with Jest. By the end of this tutorial, you will have an introduction to unit testing with jest, best practices, and some handy tricks and tips to use in your tests. Starter code is available here, and finished code with tests covered in this tutorial can be found here. We strongly recommend using the completed solution only for reference and implementing the tutorial step by step from the starter code. Note: Run npm i on the handouts before proceeding to update/run the tests. Contents: . | Understanding Unit Testing | Testing with Jest . | Basics . | Specs | . | Matchers . | .toEqual() vs .toBe() vs .toStrictEqual() | . | AAA . | Assemble | Act | Assert | . | Setup and Teardown | Mock Testing . | Spy | Mock | Stub | . | Testing Asynchronous Code . | Promise | Callbacks | . | UI Testing | . | Setting up testing using Jest in VSCode . | Features | Installation . | Direct Installation | From Visual Studio Marketplace | Additional Extensions and Libraries | . | Configuration | Debugging Tests | . | General Guidelines For Writing Tests | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-unit-testing",
    
    "relUrl": "/tutorials/week1-unit-testing"
  },"202": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Conditions of Satisfaction",
    "content": "A user story is an informal, general explanation of a software feature written from the perspective of the end user or customer. A user story is always of the following form: . As a &lt;role&gt; I can &lt;perform action&gt; so that I can &lt;receive benefit&gt; . User stories represent something the user/customer might want. There will be many ways to give the user/customer the benefit that they want. We need to refine these in order to determine what to build. We call these refinements “conditions of satisfaction” (COS) . A COS should be a specific capability or behavior that the user expects, in the user’s terms. It should be visible to and verifiable by the user. The COS is a guide to the implementation team. It should be specific enough so that the implementation team has a clear idea of what they are building. There still may be many ways to implement a COS. For example, a COS probably would not specify any of the graphic or layout details; these would likely be left to the implementation team. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-user-stories#user-stories-and-conditions-of-satisfaction",
    
    "relUrl": "/tutorials/week1-user-stories#user-stories-and-conditions-of-satisfaction"
  },"203": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Project Planning",
    "content": "In planning a project, need to assign priorities to each user story and Condition of Satisfaction. Priorities tell us the order in which COS and their associated engineering tasks should be addressed, and how much effort should be devoted to each of them. There are many ways to describe priorities. For example, a user story might be described as Essential, Desirable, or Extension: . | Essential means the project is useless without it. | Desirable means the project is less usable without it, but is still usable. | Extension describes a User story or COS that is desirable, but may not be achievable within the scope of the project. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-user-stories#user-stories-and-project-planning",
    
    "relUrl": "/tutorials/week1-user-stories#user-stories-and-project-planning"
  },"204": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "Minimum Viable Product (MVP)",
    "content": "An MVP is a product that consists of all essential user stories. Developers should prioritize those above others. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-user-stories#minimum-viable-product-mvp",
    
    "relUrl": "/tutorials/week1-user-stories#minimum-viable-product-mvp"
  },"205": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Test-Driven Development",
    "content": "We model the development process as a cycle of refinements: . | User Stories | Conditions of Satisfaction | Testable behaviors | Executable Tests | Engineering Tasks (Code) | . As we proceed down these refinements, we will likely go back and revisit design decisions that we made at earlier stages. This is the topic of Module 02. ",
    "url": "/CS4530-Fall-2024/tutorials/week1-user-stories#user-stories-and-test-driven-development",
    
    "relUrl": "/tutorials/week1-user-stories#user-stories-and-test-driven-development"
  },"206": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "Examples",
    "content": " ",
    "url": "/CS4530-Fall-2024/tutorials/week1-user-stories#examples",
    
    "relUrl": "/tutorials/week1-user-stories#examples"
  },"207": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories:",
    "content": "User Story #1: . As a manager, I want to track my subordinates’ progress, so that the organization’s business goals are met. [Probably too general; in the agile terminology, this might be an “epic”, which is then refined into a set of user stories] . User Story #2: . As a player in covey.town, I want to be able to play a game of connect4 with another player, so that I can pass the time enjoyably. (Essential) . User Story #3: . As a player in covey.town, I want to see how well I’m doing at connect4 compared to other players, so I can feel superior to them. (Desirable) . User Story #4: . As a player in covey.town, I want to learn different strategies for connect4, so I can win more games. (Extension) . User Story #5: . As a user of Covey.Town, I want to be able to interact with other users in different activities like private chat, playing games, etc. while providing ability to customize user avatars to make the town more fun. (Essential but too general. Best to split it in 3 different stories one for private chat, one for games and one for customization.) . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-user-stories#user-stories",
    
    "relUrl": "/tutorials/week1-user-stories#user-stories"
  },"208": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "Conditions of Satisfaction:",
    "content": "For User Story #2: . | There should be a Connect4 area in the town, where players can play Connect4. (Essential) | Whenever there are two players in the same Connect4 area, a Connect4 game is started between them. (Essential) | The status of the Connect4 game is presented in graphical form on the screen (Essential). | When one player wins (or there is a draw), both players are notified of the result. (Essential) | When a player makes a move in the Connect4 game, the tile visibly drops onto the game board, and a suitable sound effect is emitted (Extension) | If other players enter a Connect4 area while a game is going on, they can see the status of the game also (Desirable) | . [Note: these COSs do not describe the game board in detail, though that is pretty standard. They also do not describe what happens to the two players when the game is over. Do they stay in the area and spectate? Do the next two players play? Does the first spectator play the winner of the game? etc. etc.] . | There should be a way for one player to challenge another to play the game of Connect4, no matter where they are in the town. (This might be an Extension, or it might be a different user story). | . For User Story #3: . | There should be a leaderboard showing the Connect4 ranking of all the players in the town. (Essential). | The leaderboard should show the current score of all the Connect4 games currently in progress. (Desirable) | The leaderboard should show the current score of all the Connect4 games currently in progress, and any player can click on the entry for a game and spectate that game. (Desirable; might be Extension, depending on the expertise of the team). | The leaderboard should show the lifetime standings of all the players who have ever logged in to this town. (Extension) | . For User Story #5: . | User will be able to join an interactable area which includes leaderboards for all activities (This is too general and should be split in several conditions of satisfactions. For example, joining an area itself can be independent of being able to view leaderboard. Also each activity’s leaderboard should have its own condition of satisfaction. There could be several conditions for leaderboard alone to describe how data is organized) | User is able interact with an instance of interactable area created by another player (This COS is vague. What does interact mean? Does it mean enter an area or do something else?) | User is allowed to join an interactable area of another player in a town if the user was not invited (this sounds wrong, opposite to what the system should be doing) | User is allowed to join an interactable area (Desirable, The priority is wrong. For a user story that requires joining an interable area before anything else, this condition should be considered essential, instead of desirable) | . Reference . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-user-stories#conditions-of-satisfaction",
    
    "relUrl": "/tutorials/week1-user-stories#conditions-of-satisfaction"
  },"209": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Conditions of Satisfaction",
    "content": "This tutorial provides examples for user stories, conditions of satisfaction and how a minimum viable product can be defined. Contents: . | User Stories and Conditions of Satisfaction | User Stories and Project Planning | User Stories and Test-Driven Development | Examples | . ",
    "url": "/CS4530-Fall-2024/tutorials/week1-user-stories",
    
    "relUrl": "/tutorials/week1-user-stories"
  },"210": {
    "doc": "React Tutorial",
    "title": "React Basics",
    "content": "This tutorial covers the basic concepts of React. By the end of this tutorial, you will be able to create a new React app, understand the basic concepts of React such as states and props, understand React hooks and handling events. | React Basics | Creating a new NextJs App | Understanding a React App . | Components | Template For Structure of Function Component | Props | State | Communicating between Components . | Parent to Child | Child to Parent | . | Handling Events | . | React Hooks . | UseState . | Updating Arrays in State | . | UseEffect . | Object Dependencies in UseEffect | . | . | . ",
    "url": "/CS4530-Fall-2024/tutorials/week4-react-basics#react-basics",
    
    "relUrl": "/tutorials/week4-react-basics#react-basics"
  },"211": {
    "doc": "React Tutorial",
    "title": "Creating a New Next Js App",
    "content": "Let’s use npx and create-next-app to create a new Next.Js project . | npx stands for Node Package Execute (Part of the npm package since version 5.2). It is a runner that can execute any package that you want from the npm registry without even installing that package. In this case npx tool temporarily installs the create-next-app npm package and uses it to create our project. | Please check the following reference to the Next.Js boiler plate and getting started with framework Next.Js official documentation . | Before beginning the installation, please ensure that your Node.js version is 18 or higher, as Next.js is only supported on these versions. Use node --version command to check. | . | We use the create-next-app npx package to create an application that creates a fully-featured TS package. npx create-next-app my-app . | Note 1: This will create a new project directory called my-app under the current directory. | Note 2: This will create a git repo in my-app, so you probably shouldn’t do this inside a pre-existing git repository. | Note 3: Create the project with the following details after executing the command | . | Navigate to the project directory using the command: cd my-app . | To start the development server for React, run the command: npm run dev . | Note: Next.Js renders the content within the app/pages.tsx file as the root component. | . | Navigate to http://localhost:3000/ to see the default React page. | After a few seconds, a browser window opens, with our app running: | . | Chakra UI provides a comprehensive library of reusable React components for developing modern web applications. To install Chakra UI for Next.js, please enter the following command: npm i --save @chakra-ui/react @chakra-ui/next-js . The save flag is used to add the dependency in the package.json file. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week4-react-basics#creating-a-new-next-js-app",
    
    "relUrl": "/tutorials/week4-react-basics#creating-a-new-next-js-app"
  },"212": {
    "doc": "React Tutorial",
    "title": "React Component",
    "content": "React follows a Component based architecture. A component is a reusable html element with built-in state, business logic, and a lifecycle. The component may be something as simple as a single html element such as an input box, or a button, or a complex entity made up of other components. Components are the basic building blocks of a React application and they allow the developer to split the UI into independent and reusable pieces where each piece can be used in isolation. Creating a Function Component in React . View in sandbox . The simplest method to define a component is to write a function in JavaScript. These components are also widely referred to as functional stateless components but in the recent versions of React, they have the capabilities to contain state as well. import * as React from \"react\"; interface Props { name?: string }; function App (props: Props) { return ( &lt;div className=\"App\"&gt; &lt;h1&gt;Welcome to React with Typescript Tutorial.&lt;/h1&gt; &lt;/div&gt; ); } export default App; . A Few Things to Note About React Components: . | The root (App) component is the entry point for the React App and all other components are nested in it. | We create a functional component by defining a JavaScript function and passing the props type as a generic parameter. | The import statement is used to import the public classes/functions from the react library. | A function can return a single top level element. | div is the top level element in this case and other elements can be nested in it. | The attribute className is used to specify a CSS class name if CSS properties have been defined separately for a class. | className attribute is used to set the value of an element’s class attribute. Using this property, the user can set the class of an element to the desired class. | . | . | The round brackets (()) after return are used to span a JSX/TSX element across multiple lines. | At last, the component needs to be exported from the current file, so that it can be imported somewhere else and can be used either in isolation or combination with other components for rendering on the UI. | Elements on one line can be returned directly. | Each instance of a component creates a new element independent of other instances of the component. | Each component has its own state, props, and lifecycle (which will be explored later in the tutorial). | . ",
    "url": "/CS4530-Fall-2024/tutorials/week4-react-basics#react-component",
    
    "relUrl": "/tutorials/week4-react-basics#react-component"
  },"213": {
    "doc": "React Tutorial",
    "title": "Template For Structure of Function Component",
    "content": "View in sandbox . import * as React from \"react\"; interface Props { property1?: value1, property2?: value2 } function ComponentName (props: Props) { const handler = () =&gt; { /* ... */ }; return ( &lt;div&gt;Our TSX&lt;/div&gt; ); }; ComponentName.defaultProps = { /* ... */ }; export default ComponentName; . ",
    "url": "/CS4530-Fall-2024/tutorials/week4-react-basics#template-for-structure-of-function-component",
    
    "relUrl": "/tutorials/week4-react-basics#template-for-structure-of-function-component"
  },"214": {
    "doc": "React Tutorial",
    "title": "Props",
    "content": "View in sandbox . React components are similar to JavaScript functions and can accept arbitrary arguments called props. Since components are reusable, props are especially useful to display different content in each instance of the component. Let us extract the header elements from the previous code snippet into a new component called Header. We can then use props to say “hello” to different users. | Create a new file in src/ directory called Header.tsx | Create and export a function called Header in the file as below: | . import React from \"react\"; interface IProps { name?: string; } const Header = (props: IProps) =&gt; { return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;; }; Header.defaultProps = { name: \"World\" }; export default Header; . | The above code snippet creates a new function component Header and prints the value of the name passed in the props. | It defines a defaultProps for the component Header where the default value for name is used in case the value for props for name is not passed in any instance of the component. | In App.tsx: . | Remove the code in h1 tags. | Import the Header component as below: . | import Header from './Header'; . | . | Update the contents of return as below: . | &lt;div className=\"App-header\"&gt; &lt;Header /&gt; &lt;Header name=\"John\" /&gt; &lt;Header name=\"Jane\" /&gt; &lt;/div&gt; . | . | Save all files and run npm start | . | . A few things to note from the above example: . | Component.defaultProps can be used to specify default values for props. | Components are rendered to the user interface and the component’s logic contains the data to be displayed in the view(UI). | Curly braces ({}) in JSX/TSX are used as a connection between the data to be displayed in the view and the component’s logic for displaying the data in the view. | In our example, {props.name} will reflect the value of the property name in the view(html) for the cases when the values “John” and “Jane” are passed as props for the name property. | If no props are passed for an instance of the component, then it will display the default value of props. Note: React uses a special syntax called JSX which allows us to mix HTML with JavaScript. The curly brackets {} lets the JSX parser know that the content inside the brackets is JavaScript. | . | . ",
    "url": "/CS4530-Fall-2024/tutorials/week4-react-basics#props",
    
    "relUrl": "/tutorials/week4-react-basics#props"
  },"215": {
    "doc": "React Tutorial",
    "title": "State",
    "content": "State management is just a means of facilitating data sharing and communication among components. It creates a concrete data structure that you can read and write to reflect the state of your program. const [counter, setCounter] = useState(0) . The above snippet shows creation of counter state with an initial value of 0. Using the array destructuring syntax we extract out the state variable and the function to update the counter value. In its most basic form, a State object is a JavaScript object that represents the part of a component that can change as a result of a user’s action. States can also be thought of as a component’s memory. State update calls are asynchronous. As one cannot expect to call the update state function on one line and expect the state to be updated on the next. The reason for this is that update state methods are more of a request than an immediate order to update state. So React schedules an update to a component’s state object. When state changes, the component responds by re-rendering. Also, multiple update requests may be batched into one for performance reasons. Changes in state and/or props will both cause our React component to re-render. Changes in state, on the other hand, can only occur internally as a result of components modifying their own state.  . ",
    "url": "/CS4530-Fall-2024/tutorials/week4-react-basics#state",
    
    "relUrl": "/tutorials/week4-react-basics#state"
  },"216": {
    "doc": "React Tutorial",
    "title": "Communication Between Components:",
    "content": "Parent To Child Component Communication: . View in sandbox . Passing values from a parent component to a child component is simple. We only have to pass the values as props of the child component. The child component can then use the props object to output results. In the example code you will see that CounterContent component accepts a counter prop which is then used to display the value inside div element. import { useState } from \"react\"; interface CounterContentProps { counter: Number; } function CounterContent({ counter }: CounterContentProps) { return &lt;div&gt;Counter: {counter}&lt;/div&gt;; } function Counter() { const [counter, setCounter] = useState&lt;number&gt;(0); return ( &lt;&gt; &lt;CounterContent counter={counter} /&gt; &lt;button onClick={() =&gt; setCounter(counter + 1)}&gt;Increment Count&lt;/button&gt; &lt;/&gt; ); } . Child to Parent Component Communication . View in sandbox . For passing data from child component to parent component do the following steps: . | Declare a callback function inside the parent component. This function will get data from the child component. | Pass the callback function to the child component as props. | Child then sends the update to the parent through the use of the callback function. | . In the example below we have four children components: . | CounterContent: Displays the counter value | IncrementCounterButton: Increments the counter value | DecrementCounterButton: Decrements the counter value | CustomCounterButton: Sets the counter to a particular value. | . All callback functions passed to the children component are declared in Counter function which is the parent component that maintains the state value for counter. import { useState } from \"react\"; interface CounterContentProps { counter: Number; } interface IncrementCounterButtonProps { incrementCount(): void; } interface DecrementCounterButtonProps { decrementCount(): void; } interface SetCounterButtonProps { setCount(value: number): void; } function CounterContent({ counter }: CounterContentProps) { return &lt;div&gt;Counter: {counter}&lt;/div&gt;; } /** * Child component accepts an incrementCount callback function as a props. * The callback which is declared inside the parent component triggers a state update. */ function IncrementCounterButton({ incrementCount }: IncrementCounterButtonProps) { return &lt;button onClick={() =&gt; incrementCount()}&gt;increment Count&lt;/button&gt;; } /** * Child component accepts a decrementCount callback function as a props. * The callback which is declared inside the parent component triggers a state update. */ function DecrementCounterButton({ decrementCount }: DecrementCounterButtonProps) { return &lt;button onClick={() =&gt; decrementCount()}&gt;Decrement Count&lt;/button&gt;; } function CustomCounterButton({ setCount }: SetCounterButtonProps) { // change this value to see how child passes count value data to parent through // the use of callback function const dummyValue = 100; return ( &lt;button onClick={() =&gt; setCount(dummyValue)}&gt; Set Count to {dummyValue} &lt;/button&gt; ); } /** * Parent Component where state and callbacks are maintained. **/ function Counter() { const [counter, setCounter] = useState(0); const decrementCount = () =&gt; { if (counter === 0) return; setCounter(counter - 1); }; const incrementCount = () =&gt; { setCounter(counter + 1); }; const setCount = (value: number) =&gt; { setCounter(value); }; return ( &lt;&gt; &lt;CounterContent counter={counter} /&gt; &lt;IncrementCounterButton incrementCount={incrementCount} /&gt; &lt;DecrementCounterButton decrementCount={decrementCount} /&gt; &lt;CustomCounterButton setCount={setCount} /&gt; &lt;/&gt; ); } . ",
    "url": "/CS4530-Fall-2024/tutorials/week4-react-basics#communication-between-components",
    
    "relUrl": "/tutorials/week4-react-basics#communication-between-components"
  },"217": {
    "doc": "React Tutorial",
    "title": "Handling Events",
    "content": "View in sandbox . | React implements its own system of handling events that is very similar to handling events on DOM elements. There are some syntax differences: . | React events are named using camelCase, rather than lower case. | With JSX a function can be passed as an event handler instead of a string. | . | . For example, the HTML . &lt;button onclick=\"incrementCounter()\"&gt;Increment Counter&lt;/button&gt; . is slightly different in React: . &lt;button onClick={incrementCounter}&gt;Increment Counter&lt;/button&gt; . | React provides an equivalent of each event that you might be familiar with from standard HTML DOM. Events typing can be imported directly from react as shown in the example below: | . import { MouseEvent } from \"react\"; function HelloWorld() { const sayHello = (event: MouseEvent) =&gt; { event.preventDefault(); console.log(`${event.currentTarget.tagName}: says hello, world.`); }; return ( &lt;div&gt; &lt;button onClick={sayHello}&gt;Submit&lt;/button&gt; &lt;/div&gt; ); } export default HelloWorld; . For the list of all the supported events refer here . Please check the list of common events and instances in which they are used here . ",
    "url": "/CS4530-Fall-2024/tutorials/week4-react-basics#handling-events",
    
    "relUrl": "/tutorials/week4-react-basics#handling-events"
  },"218": {
    "doc": "React Tutorial",
    "title": "React Hooks",
    "content": "React hooks are built-in functions which allows us to use state and other lifecycle features. The most basic hooks used by React are useState() which adds a state variable to a React component and useEffect() which is the lifecycle hook for a component. State of component refers to the data it is holding at a particular moment in time. useState(): . View in sandbox . In this section we will see how we can add state to a React Component using the useState() hook provided by React. The useState hook takes the initial value of the state variable as an argument, the initial state can be any type you want (a string, a number, an array, an object or a function). Only on the first render will the initial value be assigned. Each useState call returns a two-element array. The state variable is the first element of the array, followed by a function to change the variable’s value. | We’ll start by defining and initializing state for the number of times the button is clicked, by adding the state variable as follows: | . import {useState} from 'react'; function Counter() { const [count, setCount] = useState(0); ... } . This line of code looks a little strange, so let’s break it down: . | When the hook useState() is invoked, it returns an array. Where the first item is the state value, and the second item is a function that updates the state. | First, we import useState from the react library. | useState is a React function that lets us create state, passing in a default value as a parameter. In our case, we pass it a default value of 0. | The useState function returns an array containing two elements: | . | The first array element contains the current value of state. | . | . | The second array element contains a function to set state to a different value. | . | We destructure the array and store the first array element (the state value) in count, and the second array element (the function to set state) in setCount. | The rest of the function now has access to the count, via the count variable. The function is also able to increment the count, via the setCount variable. | . | Let’s add a function to update the state of the variable: | . function incrementCount() { setCount(count + 1); } . | Now, functions to set the piece of state take in the new state as their parameter. | . | Next we’ll make the component return the count along with a button to increment the count when clicked. Final function code will be as follows: | . import { useState } from \"react\"; function Counter() { const [count, setCount] = useState(0); function incrementCount() { setCount(count + 1); } return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . If we give this a try in the running app, we should find the count variable’s value to keep incrementing by one every time the button is clicked. After we’ve got our heads around the code needed to define state, accessing and setting state is fairly simple and elegant. Updating Arrays in State . Suppose we want to maintain an array in our state object. const [list, setList] = useState([]); . Now suppose we want to add an element to this list and have the component re-render to reflect the changes. We might try pushing an item to the list like so: . list.push(element); // doesn't work . However, React will not re-render the component as it does not detect a change in the state. This is because the object referenced in the state is the same before and after pushing the element, and so to React, the object looks the same because the reference is the same. To get around this, we must invoke the setList function to create a new reference so that React will detect the change and re-render the component. The easiest way in this case would be to use the spread operator (...) to make a copy of the existing list and push a new element to the new list: . const newList = [...list]; // copy the current list newList.push(element); setList(newList) . useEffect(): . View in sandbox . Now let’s have a look at how to invoke the code to execute at a certain point in the component’s lifecycle. Older versions of React consisted of different Lifecycle hooks that allowed a user to hook into various phases of component rendering such as componentDidMount, componentDidUpdate, etc. which have all been condensed into a single function called useEffect(). Let us observe how this hook behaves by printing out the count in the browser console. The new functional component system in React (moving away from class based) added amazing syntactic sugar to the React ecosystem. Use of a hook to control component lifecycle is an example such as the useEffect() hook. | As always, we will start by importing the function from the react library: | . import { useEffect } from \"react\"; . | Next we will add the function to our existing counter component: | . useEffect(() =&gt; { console.log(`The current count is ${count}`); }, []); . Let’s break down this code to understand what is happening: . | We use React’s useEffect function to hook into the component life cycle. | The function takes in an arrow function, which executes when the component is first rendered. | The function takes in a second parameter, which determines when our arrow function is called. This parameter is an array of values that, when changed, will cause the arrow function to be invoked. In our case, we pass in an empty array, so our arrow function will never be called after the first render. | If we now try the running app and open the console, we’ll see that the log within the useEffect only appears once. | . | Let’s remove the second parameter from useEffect now: | . | If no second parameter is provided, it will cause the arrow function to be invoked first on mount and then on every re-render. | . useEffect(() =&gt; { console.log(`The current count is ${count}`); }); . | Additionally we can also pass the variable in the array to observe only changes related to a particular value (as below). | Now we can see that the component will render every time the value of count is changed. | . useEffect(() =&gt; { console.log(`The current count is ${count}`); }, [count]); . | We can also return a function from the useEffect hook which will be called when the component is unmounted. This is useful for cleaning up any resources that the component may have used. | . useEffect(() =&gt; { console.log(`The current count is ${count}`); return () =&gt; { console.log(\"The component is unmounting\"); }; }, [count]); . Let’s break this down: . |   | useEffect pattern | . | Run on every render | useEffect(() =&gt; { /* ... */ }); | . | Run when some changes | useEffect(() =&gt; { /* ... */ }, [array of Deps]); | . | Run on mount | useEffect(() =&gt; { /* ... */ }, []); | . | Run on cleanup | useEffect(() =&gt; { return ( /* ... */ ) }); | . | Finally, our component counter will look like: | . import { useState } from \"react\"; import { useEffect } from \"react\"; function Counter() { const [count, setCount] = useState(0); function incrementCount() { setCount(count + 1); } useEffect(() =&gt; { console.log(`The current count is ${count}`); }, [count]); return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . Object Dependencies in UseEffect . Consider a case where useEffect depends on an object: . import { useState } from \"react\"; import { useEffect } from \"react\"; function Counter() { const [counter, setCounter] = useState({ count: 0, increment: 1 }); function incrementCount() { counter.count += counter.increment; setCounter(counter); // will not cause component to re-render } // Will not get called when incrementCount is called useEffect(() =&gt; { console.log(`The current count is ${counter.count}`); }, [counter]); return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . In the example above, we’ve modified the counter to be an object containing both the current count and the amount to increment the counter by when the button is clicked. Similar to the list case for useState, updating an attribute of an object and setting the state variable to that same object reference will not cause a re-render, and useEffect will not detect a change in its dependencies, even though we have changed one of the attributes. To properly invoke a useEffect call, we must change the object reference itself: . function Counter() { const [counter, setCounter] = useState({ count: 0, increment: 1 }); function incrementCount() { // we use the spread operator (...) to make a copy of the object setCounter({...counter, count: counter.count + counter.increment}); } useEffect(() =&gt; { console.log(`The current count is ${counter.count}`); }, [counter]); return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . The useEffect hook will now be invoked with each button click. However, our useEffect is dependent on the entire counter object, meaning that a change to any of its attributes will cause the useEffect hook to be called, which is not always a desired behavior. We can get around this by being more specific in our dependency list: . function Counter() { const [counter, setCounter] = useState({ count: 0, increment: 1 }); function incrementCount() { // we use the spread operator (...) to make a copy of the object setCounter({...counter, count: counter.count + counter.increment}); } function incrementIncrement() { // we use the spread operator (...) to make a copy of the object setCounter({...counter, increment: counter.increment + 1}); } useEffect(() =&gt; { console.log(`The current count is ${counter.count}`); }, [counter.count]); // Now that we only depend on count, this function will not be called if the incrementIncrement function is called return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me to increment the count!&lt;/button&gt; &lt;button onClick={incrementIncrement}&gt;Click me to increase the increment amount!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . Feel free to explore additional React hooks, such as useContext, useCallback, useMemo, and useReducer, as these are essential tools for efficient React development. For more information, check here. ",
    "url": "/CS4530-Fall-2024/tutorials/week4-react-basics#react-hooks",
    
    "relUrl": "/tutorials/week4-react-basics#react-hooks"
  },"219": {
    "doc": "React Tutorial",
    "title": "React Tutorial",
    "content": " ",
    "url": "/CS4530-Fall-2024/tutorials/week4-react-basics",
    
    "relUrl": "/tutorials/week4-react-basics"
  },"220": {
    "doc": "Socket.IO Tutorial",
    "title": "What is Socket.IO?",
    "content": "Socket.IO is a library that enables real-time, bidirectional, and persistent communication between client(s) and server(s). Bi-directional means that both the client and the server can send or receive messages. These features make it particularly useful for applications requiring continuous data sharing, such as live dashboards and chat apps. ",
    "url": "/CS4530-Fall-2024/tutorials/week5-socketio-basics#what-is-socketio",
    
    "relUrl": "/tutorials/week5-socketio-basics#what-is-socketio"
  },"221": {
    "doc": "Socket.IO Tutorial",
    "title": "How Does It Work?",
    "content": "Socket.IO follows the “observer pattern” or “listener pattern” discussed in class. In this context: . | Publisher - A publisher can be identified where .emit is used. This emits (sends) out data to the specified channel, making it available to any subscriber to the channel. | Subscriber - A subscriber can be identified where .on is used. This listens for updates emitted by a publisher to the specified channel and executes a handler function (if applicable). | . The code implementations below explore this in more depth. Internally, Socket.IO establishes WebSocket connections where possible to send data. You can read more about the protocols in the documentation. ",
    "url": "/CS4530-Fall-2024/tutorials/week5-socketio-basics#how-does-it-work",
    
    "relUrl": "/tutorials/week5-socketio-basics#how-does-it-work"
  },"222": {
    "doc": "Socket.IO Tutorial",
    "title": "Socket.IO vs. REST APIs",
    "content": "A brief comparison between communication with Socket.IO and REST APIs: . | Feature | Socket.IO | REST API | . | Design Pattern | Bidirectional, Publisher-Subscriber | Server -&gt; Client Response, Data-pull | . | Connection | Persistent (WebSocket or fallback) | Temporary (HTTP request) | . | Use Cases | Real-time, low-latency data sharing | CRUD operations, static data | . | Data Flow | Server and client can send data anytime | Client-initiated requests (on-demand) | . | Statefulness | Stateful | Stateless | . ",
    "url": "/CS4530-Fall-2024/tutorials/week5-socketio-basics#socketio-vs-rest-apis",
    
    "relUrl": "/tutorials/week5-socketio-basics#socketio-vs-rest-apis"
  },"223": {
    "doc": "Socket.IO Tutorial",
    "title": "Example Uses:",
    "content": "Socket.IO is great for any use case where real-time updates are essential, or when the client and server need continuous communication. A few examples are: . | Chat Room - This is a simple use case outlined in the documentation (linked below). Users need to send and receive messages in real-time (instantly). With Socket.IO, the user can emit a message to the server, which then broadcasts it with the other connected users. If you were to use a REST API here, there would a lot of overhead and latency in sending/receiving messages from the need of constant requests to the API. | Multiplayer Games - Real-time game state sharing with low latency is essential for smooth multiplayer gameplay. By emitting socket events with the updated game state, you can make sure that all of the connected player clients have the same synchronized copy of the game state to display. | Collaborative Tools - For applications like collaborative text editors or whiteboards, sockets can help keep the state synchronized across the clients. When a user makes a change, the change will be emitted to the server, which may internally update the “source of truth” for the application. Then, the updated state would be emitted to all other connected clients, so that everyone sees the edits in real-time. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week5-socketio-basics#example-uses",
    
    "relUrl": "/tutorials/week5-socketio-basics#example-uses"
  },"224": {
    "doc": "Socket.IO Tutorial",
    "title": "Using Socket.IO",
    "content": " ",
    "url": "/CS4530-Fall-2024/tutorials/week5-socketio-basics#using-socketio",
    
    "relUrl": "/tutorials/week5-socketio-basics#using-socketio"
  },"225": {
    "doc": "Socket.IO Tutorial",
    "title": "Set Up a New Project",
    "content": "To get started with Socket.IO, you’ll need to set up a Node.js project. Follow these steps: . | Initialize a Node.js Project . First, create a new directory for your project and navigate into it: . mkdir socketio-tutorial cd socketio-tutorial . Now initialize a new Node.js project by running the following command: . npm init -y . This will generate a package.json file with the default configuration. | Install the Necessary Packages . To use Socket.IO, you’ll need to install both express (for setting up a basic HTTP server) and socket.io itself. Also, you need to install typescript, the type definitions for both express and socket.io and some utilities to support TypeScript development. Run the following command to install everything that is needed for this project: . npm install --save-dev typescript express @types/express socket.io @types/socket.io ts-node . To configure TypeScript, you need to add a tsconfig.json. You can create this file manually or run: . npx tsc --init . This will generate a basic tsconfig.json with the default configuration. | Set Up a Basic Server . Now, let’s create the server. Inside your project directory, create a file called server.ts: . touch server.ts . Open server.ts and write the following code to create a basic HTTP server with Socket.IO: . import express, { Request, Response } from \"express\"; import http from \"http\"; import { Server, Socket } from \"socket.io\"; import path from \"path\"; const app = express(); const server = http.createServer(app); const io = new Server(server); // Serve a simple HTML page (or use this for serving static files) app.get(\"/\", (req: Request, res: Response) =&gt; { res.sendFile(path.join(__dirname, \"index.html\")); }); // Set up a connection handler io.on(\"connection\", (socket: Socket) =&gt; { console.log(\"A user connected\"); // Clean up when the client disconnects socket.on(\"disconnect\", () =&gt; { console.log(\"A user disconnected\"); }); }); const PORT = 3000; server.listen(PORT, () =&gt; { console.log(`Server is running on http://localhost:${PORT}`); }); . This will setup a basic HTTP server that uses Socket.IO to establish connections. Now, let’s create a simple client. | Create a Client-Side HTML File . In your project directory, create a file called index.html: . touch index.html . Now, open index.html and add the following code: . &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;Socket.IO Tutorial&lt;/title&gt; &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello Socket.IO!&lt;/h1&gt; &lt;script&gt; const socket = io(); // Listen for connection confirmation socket.on(\"connect\", () =&gt; { console.log(\"Connected to the server\"); }); // Listen for disconnection socket.on(\"disconnect\", () =&gt; { console.log(\"Disconnected from the server\"); }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . This HTML file sets up a basic client-side script that connects to the server using Socket.IO. | Run Your Project . To start the server, run the following command: . ts-node server.ts . Then, open a browser and go to http://localhost:3000. You should see “Hello Socket.IO!” on the page, and in the browser’s developer console, you’ll see a message confirming the connection. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week5-socketio-basics#set-up-a-new-project",
    
    "relUrl": "/tutorials/week5-socketio-basics#set-up-a-new-project"
  },"226": {
    "doc": "Socket.IO Tutorial",
    "title": "Emitting and Receiving Socket Events",
    "content": "Now that you’ve set up a basic project, let’s dive into how you can emit and receive Socket.IO events to communicate between the client and server. | Creating a Socket Object on Client and Server . Client-Side: When the browser loads the HTML page, it creates a socket object that connects to the server. We’ve already initialized the socket object in the script section of index.html: . const socket = io(); // Automatically connects to the server . Server-Side: On the server, Socket.IO will create a socket object for each client that connects. You can listen for new connections with the io.on('connection') event: . io.on(\"connection\", (socket: Socket) =&gt; { console.log(\"A user connected\"); }); . | Setting Up a Connection . Once the socket object is created, both the client and server can start emitting and receiving events. Example: Handling Connections and Disconnections . We can already see basic connection handling: . // Server-side io.on(\"connection\", (socket: Socket) =&gt; { console.log(\"A user connected\"); socket.on(\"disconnect\", () =&gt; { console.log(\"A user disconnected\"); }); }); . On the client-side, you can also listen for the connect and disconnect events: . // Client-side socket.on(\"connect\", () =&gt; { console.log(\"Connected to the server\"); }); socket.on(\"disconnect\", () =&gt; { console.log(\"Disconnected from the server\"); }); . | Emitting an Update + Object with the Update . To send data from the client to the server or vice versa, you use the .emit() method. Example: Emitting a Custom Event . Let’s say we want to send a chat message from the client to the server. You can emit a custom event like this: . // Client-side socket.emit(\"chat message\", { user: \"John\", message: \"Hello, World!\" }); . On the server-side, you can listen for this event and handle the received data: . // Server-side socket.on(\"chat message\", (data: { user: string; message: string }) =&gt; { console.log(`${data.user}: ${data.message}`); }); . You can also send data back to all connected clients: . // Server-side io.emit(\"chat message\", { user: \"Server\", message: \"Welcome to the chat!\" }); . | Subscribing a Listener to an Update + Handler Function for Emitted Object . On the client-side, you need to subscribe to the event to receive the emitted messages: . // Client-side socket.on(\"chat message\", (data: { user: string; message: string }) =&gt; { console.log(`${data.user}: ${data.message}`); }); . This will allow the client to receive and handle chat messages sent from the server (or other clients). | . ",
    "url": "/CS4530-Fall-2024/tutorials/week5-socketio-basics#emitting-and-receiving-socket-events",
    
    "relUrl": "/tutorials/week5-socketio-basics#emitting-and-receiving-socket-events"
  },"227": {
    "doc": "Socket.IO Tutorial",
    "title": "Putting It All Together",
    "content": "Here’s an example of the sockets in a simple chat app: . Server-Side (server.ts): . io.on(\"connection\", (socket) =&gt; { console.log(\"A user connected\"); socket.on(\"chat message\", (data: { user: string; message: string }) =&gt; { console.log(`${data.user}: ${data.message}`); // Broadcast the message to all clients io.emit(\"chat message\", data); }); socket.on(\"disconnect\", () =&gt; { console.log(\"A user disconnected\"); }); }); . Client-Side (index.html): . &lt;script&gt; const socket = io(); // Listen for chat messages socket.on(\"chat message\", (data: { user: string, message: string }) =&gt; { console.log(`${data.user}: ${data.message}`); }); // Example of emitting a message socket.emit(\"chat message\", { user: \"John\", message: \"Hello, World!\" }); &lt;/script&gt; . This example sets up a basic chat app where users can send and receive messages in real time. ",
    "url": "/CS4530-Fall-2024/tutorials/week5-socketio-basics#putting-it-all-together",
    
    "relUrl": "/tutorials/week5-socketio-basics#putting-it-all-together"
  },"228": {
    "doc": "Socket.IO Tutorial",
    "title": "Useful Resources",
    "content": ". | Socket.IO Introduction (Documentation) | Socket.IO Chat App Tutorial (Documentation) | Learn Socket.io In 30 Minutes - Web Dev Simplified | . ",
    "url": "/CS4530-Fall-2024/tutorials/week5-socketio-basics#useful-resources",
    
    "relUrl": "/tutorials/week5-socketio-basics#useful-resources"
  },"229": {
    "doc": "Socket.IO Tutorial",
    "title": "Socket.IO Tutorial",
    "content": "This tutorial covers the basic concepts of Socket.IO. By the end of the tutorial, you’ll have an introduction to the concept of sockets for client-server communication, understand in what situations they are useful, and learn how to emit and listen for events for real-time updates. Contents: . | What is Socket.IO . | How Does It Work? | Socket.IO vs. REST APIs | Example Uses | . | Using Socket.IO . | Set Up a New Project | Emitting &amp; Receiving Socket Events | Putting It All Together | . | Useful Resources | . ",
    "url": "/CS4530-Fall-2024/tutorials/week5-socketio-basics",
    
    "relUrl": "/tutorials/week5-socketio-basics"
  },"230": {
    "doc": "UI Testing with Cypress",
    "title": "UI Testing with Cypress",
    "content": "This tutorial covers the basic concepts of UI testing and end-to-end (E2E) testing using Cypress. By the end, you’ll have a clear understanding of UI testing, how it compares with other forms of testing, and how to implement Cypress for UI testing with practical examples. ",
    "url": "/CS4530-Fall-2024/tutorials/week6-cypress",
    
    "relUrl": "/tutorials/week6-cypress"
  },"231": {
    "doc": "UI Testing with Cypress",
    "title": "Contents:",
    "content": ". | What is UI Testing? . | UI Testing vs. E2E Testing | Example Scenarios | . | Using Cypress for UI Testing . | Setting Up Cypress | Common Commands | . | Example Scenarios and Tests . | Scenario 1: Testing a Login Form | Scenario 2: Testing a Search Feature | Scenario 3: Form Submission and Validation | . | Where to Place Cypress Tests | Useful Resources | . ",
    "url": "/CS4530-Fall-2024/tutorials/week6-cypress#contents",
    
    "relUrl": "/tutorials/week6-cypress#contents"
  },"232": {
    "doc": "UI Testing with Cypress",
    "title": "What is UI Testing?",
    "content": "UI (User Interface) testing involves testing the graphical interface of an application to ensure that it behaves as expected. This includes checking how elements like buttons, forms, and text fields respond to user actions. UI testing is an important part of maintaining quality in software, as it ensures users can interact with the application seamlessly. UI Testing vs. E2E Testing . UI testing focuses specifically on the frontend (how a user interacts with the application), while End-to-End (E2E) testing tests the entire flow of an application—from the frontend to the backend, database, and external systems. | Feature | UI Testing | End-to-End Testing | . | Focus | Testing user interface and interactions | Testing the full user journey | . | Components Tested | Frontend only | Frontend, backend, database, APIs | . | Tools | Cypress, Selenium, Puppeteer | Cypress, Playwright | . | Use Cases | Testing individual elements or flows | Ensuring the entire app works as a whole | . Example Scenarios . Here are some scenarios where UI testing is typically used: . | Testing a login form to ensure it behaves as expected when correct/incorrect credentials are provided. | Checking that a search feature returns the expected results. | Testing whether the user is able to submit a form successfully and gets proper feedback. | . ",
    "url": "/CS4530-Fall-2024/tutorials/week6-cypress#what-is-ui-testing",
    
    "relUrl": "/tutorials/week6-cypress#what-is-ui-testing"
  },"233": {
    "doc": "UI Testing with Cypress",
    "title": "Using Cypress for UI Testing",
    "content": "Cypress is a popular framework for writing automated tests for web applications. It is particularly good at UI and E2E testing due to its ability to interact directly with the browser in real-time. Setting Up Cypress . To get started with Cypress, follow these steps: . | Create a New Project . First, create a new directory for your project: . mkdir cypress-tutorial cd cypress-tutorial . | Initialize the Project Initialize the project and install Cypress by running: . npm init -y npm install cypress --save-dev . | Open Cypress Once installed, you can open Cypress using the following command: . npx cypress open . Cypress will open a test runner window, where you can create and run tests. | . Common Commands . Here are some common commands you’ll use frequently when writing UI tests in Cypress: . | Command | Description | . | cy.visit(url) | Visits a specific URL | . | cy.get(selector) | Grabs an element based on a CSS selector | . | cy.contains(text) | Finds an element that contains the specified text | . | cy.click() | Clicks on an element | . | cy.type(text) | Types into an input field | . | cy.should(condition) | Asserts that an element meets a certain condition | . ",
    "url": "/CS4530-Fall-2024/tutorials/week6-cypress#using-cypress-for-ui-testing",
    
    "relUrl": "/tutorials/week6-cypress#using-cypress-for-ui-testing"
  },"234": {
    "doc": "UI Testing with Cypress",
    "title": "Example Scenarios and Tests",
    "content": "Here are a few scenarios that show how Cypress can be used for UI testing: . Scenario 1: Testing a Login Form . This test checks if the login form functions as expected when correct and incorrect credentials are submitted. describe('Login Form', () =&gt; { it('Should show error for incorrect credentials', () =&gt; { cy.visit('/login'); cy.get('input[name=\"email\"]').type('wrong@example.com'); cy.get('input[name=\"password\"]').type('wrongpassword'); cy.get('button[type=\"submit\"]').click(); cy.contains('Invalid credentials').should('be.visible'); }); it('Should successfully login with correct credentials', () =&gt; { cy.visit('/login'); cy.get('input[name=\"email\"]').type('user@example.com'); cy.get('input[name=\"password\"]').type('correctpassword'); cy.get('button[type=\"submit\"]').click(); cy.url().should('include', '/dashboard'); }); }); . Scenario 2: Testing a Search Feature . This test verifies that searching for a keyword returns the correct results. describe('Search Feature', () =&gt; { it('Should display search results when a keyword is entered', () =&gt; { cy.visit('/search'); cy.get('input[name=\"search\"]').type('Cypress'); cy.get('button[type=\"submit\"]').click(); cy.contains('Search Results for Cypress').should('be.visible'); cy.get('.result-item').should('have.length.greaterThan', 0); }); }); . Scenario 3: Form Submission and Validation . In this scenario, we check if a form validates input and submits correctly. describe('Form Submission', () =&gt; { it('Should display validation errors for empty fields', () =&gt; { cy.visit('/form'); cy.get('button[type=\"submit\"]').click(); cy.contains('This field is required').should('be.visible'); }); it('Should submit the form when all fields are filled', () =&gt; { cy.visit('/form'); cy.get('input[name=\"name\"]').type('John Doe'); cy.get('input[name=\"email\"]').type('john@example.com'); cy.get('input[name=\"phone\"]').type('1234567890'); cy.get('button[type=\"submit\"]').click(); cy.contains('Form submitted successfully').should('be.visible'); }); }); . ",
    "url": "/CS4530-Fall-2024/tutorials/week6-cypress#example-scenarios-and-tests",
    
    "relUrl": "/tutorials/week6-cypress#example-scenarios-and-tests"
  },"235": {
    "doc": "UI Testing with Cypress",
    "title": "Where to Place Cypress Tests",
    "content": "Here is the typical structure of a Cypress project: . 1. Cypress Folder Structure: . After running npx cypress open, Cypress will create a folder structure like this: . cypress/ ├── e2e/ # Your test files go here ├── fixtures/ # Test data (JSON files) for mocking server responses ├── support/ # Reusable commands and hooks └── cypress.config.js # Cypress configuration file . 2. Create Test Files: . Inside the cypress/e2e directory, create separate test files for each feature you want to test. For example: . cypress/ ├── e2e/ │ ├── login.cy.ts # Login tests │ ├── search.cy.ts # Search tests │ ├── formSubmission.cy.ts # Form submission tests . 3. Adding describe Blocks: . Each test file should contain one or more describe blocks, which group related tests. These blocks and individual it blocks go inside the respective test files. Example: . // cypress/e2e/login.cy.ts describe('Login Form', () =&gt; { // individual tests inside 'it' blocks }); . 4. Running Tests: . You can run all tests either through the Cypress Test Runner or in headless mode with: . npx cypress run . ",
    "url": "/CS4530-Fall-2024/tutorials/week6-cypress#where-to-place-cypress-tests",
    
    "relUrl": "/tutorials/week6-cypress#where-to-place-cypress-tests"
  },"236": {
    "doc": "UI Testing with Cypress",
    "title": "Useful Resources",
    "content": ". | Cypress Official Documentation | Cypress Best Practices | End-to-End Testing with Cypress | . ",
    "url": "/CS4530-Fall-2024/tutorials/week6-cypress#useful-resources",
    
    "relUrl": "/tutorials/week6-cypress#useful-resources"
  }
}
